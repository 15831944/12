//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace ControlPlatformLib.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MESInterfaceSoap", Namespace="WWW.SUNWODA.COM")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class MESInterface : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSoftwareVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSystemTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPO_PalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback QMS_FQA_ResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback HR_UserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchInsertDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceInformationSZOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductionGroupInfoSZOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductionGroupInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback MaterialControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback NegativePressureMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductModelNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback RelTestDataUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback SNbindBatchNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkNetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductEndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkSNUniquenessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUseInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindingOperationCompleted;
        
        private System.Threading.SendOrPostCallback HWInterfaceTest_testOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCellsByModuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadDownCellsOperationCompleted;
        
        private System.Threading.SendOrPostCallback mainFittingLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenOrColsePalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenOrCloseBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOneImagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageFtpOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPurviewInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDepartmentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback UPLOADTESTDATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UPLOADBAT540TESTDATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWipPackSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIfactoryWipPackSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindCellSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindCellMoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindOneCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindTwoCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindThreeCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindFourCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindPCMPackOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindPCMCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback PCMPackLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback PCMPackBurnLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveLogInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCellSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCellTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPCMSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindPackPCMOperationCompleted;
        
        private System.Threading.SendOrPostCallback WipCellTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellAgvDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CellGroupBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCellGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback PackLinkCellGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CellBindPackOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCellGroupBindPackOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchInsertInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckModuleCellBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckModuleGroupBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPACKGroupBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModuleGroupBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback PackGroupBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModuleCellBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQueryConnOperationCompleted;
        
        private System.Threading.SendOrPostCallback LargeSmallPanelLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSmallPanelAisleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTestResOKOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductItemValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestOKOperationCompleted;
        
        private System.Threading.SendOrPostCallback CellGroupLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback FittingLinkCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback CellGroupLinkCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupplierDataInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBatteryCellLinkInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback EBSMoProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback EBSMoNumberToMESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductTOCellSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMotoProductTOUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyToProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProductMoNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback PCMPackBurnLinkRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarrierToProductTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductTestDataListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarrierToProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindCarrierProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductFittingLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModuleNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviecStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback HWInterfaceTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback HWInterfaceConversionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPoNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAddressCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PoPalletLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback MachineFittingLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMacIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback BarcodeConversionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductNewSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductOldSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrioductDIDInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductThroughStationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRouteFirstOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProductMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SMTWeldInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback MES_KEYPSN_SAVEOperationCompleted;
        
        private System.Threading.SendOrPostCallback MES_PACK_BATTERYLINK_RULEOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRoutePackingOperationCompleted;
        
        private System.Threading.SendOrPostCallback PackingCheckCellTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback BarcodeConversionNEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback EVBModelSortingOperationCompleted;
        
        private System.Threading.SendOrPostCallback EVBModelReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EVBGetModelInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckItemRuleProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckItemRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ItemAsnWMSToMESOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCycleRecordNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback cycleLevelsDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback cycleGasGaugeDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback recordLayerDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback cycleDataAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAddressLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStencilInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAddressAndPalletLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintProductUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintCheckProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupplierInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback Initialize_UserOperationCompleted;
        
        private System.Threading.SendOrPostCallback Transfer_PositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOCV_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserDoOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatteryLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelBatteryLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBatterySNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBatteriesSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback LargePanelCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback PanelLargeToSmallOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgIngDeBugEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgIngDeBugDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GroupTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GroupTestCommonOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSupplierSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback WeldInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutoSelectInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback WIPTESTSAMPLEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GETSAMPLETESTDATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GETTESTDATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback WIPTESTOperationCompleted;
        
        private System.Threading.SendOrPostCallback WipTestConversionOperationCompleted;
        
        private System.Threading.SendOrPostCallback OfflineDataUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback OfflineDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback WeldInputTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPITESTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AOITestOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback OffLineDataNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserUnlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBurinFilePathSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBurinFilePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutoPasteLabelingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestItemValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductItemValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMonumberSettingInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductItemLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindBatteryProductSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoxProductSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoxProductSnesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetATLBarcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DEVICE_INTERFACE_TESTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductCellItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback HWInterfaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadLongDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetErrorCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCUSTOMER_SNOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePCMDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPCMDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveMutureDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMutureDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelMutureDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarrierRecycleOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatteryBindingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckStationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindCarrierPackOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnbindCarrirPackOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBindingPackOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBindingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllBindingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportBatteryCapacityOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadOCVOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishBatOperationCompleted;
        
        private System.Threading.SendOrPostCallback BulidBatteryGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindPackSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackSnByCellSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelCellSnByPackSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackSnTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackSnItemNameTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSqlDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSqlDataConnOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelWipInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBarcodeRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback FittingBindingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback MacBindCustSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback MacBindCustSnAndIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCustMacBindOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubKeyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPalletSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback SolutionBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPalletInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBoxInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductPackingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCellBingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMarkingInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveCusInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackingInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLastBoxQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveLastPrintOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MESInterface() {
            this.Url = global::ControlPlatformLib.Properties.Settings.Default.ControlPlatformLib_WebReference_MESInterface;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSoftwareVersionCompletedEventHandler GetSoftwareVersionCompleted;
        
        /// <remarks/>
        public event getSystemTimeCompletedEventHandler getSystemTimeCompleted;
        
        /// <remarks/>
        public event CheckPO_PalletCompletedEventHandler CheckPO_PalletCompleted;
        
        /// <remarks/>
        public event QMS_FQA_ResultCompletedEventHandler QMS_FQA_ResultCompleted;
        
        /// <remarks/>
        public event HR_UserInfoCompletedEventHandler HR_UserInfoCompleted;
        
        /// <remarks/>
        public event BatchInsertDataCompletedEventHandler BatchInsertDataCompleted;
        
        /// <remarks/>
        public event CheckPalletCompletedEventHandler CheckPalletCompleted;
        
        /// <remarks/>
        public event DeviceInformationSZCompletedEventHandler DeviceInformationSZCompleted;
        
        /// <remarks/>
        public event ProductionGroupInfoSZCompletedEventHandler ProductionGroupInfoSZCompleted;
        
        /// <remarks/>
        public event LoginCheckCompletedEventHandler LoginCheckCompleted;
        
        /// <remarks/>
        public event DeviceInformationCompletedEventHandler DeviceInformationCompleted;
        
        /// <remarks/>
        public event ProductionGroupInfoCompletedEventHandler ProductionGroupInfoCompleted;
        
        /// <remarks/>
        public event MaterialControlCompletedEventHandler MaterialControlCompleted;
        
        /// <remarks/>
        public event NegativePressureMessageCompletedEventHandler NegativePressureMessageCompleted;
        
        /// <remarks/>
        public event GetProductModelNameCompletedEventHandler GetProductModelNameCompleted;
        
        /// <remarks/>
        public event RelTestDataUploadCompletedEventHandler RelTestDataUploadCompleted;
        
        /// <remarks/>
        public event SNbindBatchNumberCompletedEventHandler SNbindBatchNumberCompleted;
        
        /// <remarks/>
        public event checkNetStatusCompletedEventHandler checkNetStatusCompleted;
        
        /// <remarks/>
        public event GetProductEndDateCompletedEventHandler GetProductEndDateCompleted;
        
        /// <remarks/>
        public event checkSNUniquenessCompletedEventHandler checkSNUniquenessCompleted;
        
        /// <remarks/>
        public event getUseInfoCompletedEventHandler getUseInfoCompleted;
        
        /// <remarks/>
        public event BindingCompletedEventHandler BindingCompleted;
        
        /// <remarks/>
        public event HWInterfaceTest_testCompletedEventHandler HWInterfaceTest_testCompleted;
        
        /// <remarks/>
        public event getSNCompletedEventHandler getSNCompleted;
        
        /// <remarks/>
        public event getCellsByModuleCompletedEventHandler getCellsByModuleCompleted;
        
        /// <remarks/>
        public event uploadDownCellsCompletedEventHandler uploadDownCellsCompleted;
        
        /// <remarks/>
        public event mainFittingLinkCompletedEventHandler mainFittingLinkCompleted;
        
        /// <remarks/>
        public event OpenOrColsePalletCompletedEventHandler OpenOrColsePalletCompleted;
        
        /// <remarks/>
        public event OpenOrCloseBoxCompletedEventHandler OpenOrCloseBoxCompleted;
        
        /// <remarks/>
        public event CheckUserCompletedEventHandler CheckUserCompleted;
        
        /// <remarks/>
        public event GetImagesCompletedEventHandler GetImagesCompleted;
        
        /// <remarks/>
        public event GetOneImagesCompletedEventHandler GetOneImagesCompleted;
        
        /// <remarks/>
        public event UploadImageFtpCompletedEventHandler UploadImageFtpCompleted;
        
        /// <remarks/>
        public event UploadImageCompletedEventHandler UploadImageCompleted;
        
        /// <remarks/>
        public event GetPurviewInfoCompletedEventHandler GetPurviewInfoCompleted;
        
        /// <remarks/>
        public event GetDepartmentInfoCompletedEventHandler GetDepartmentInfoCompleted;
        
        /// <remarks/>
        public event GetRoleInfoCompletedEventHandler GetRoleInfoCompleted;
        
        /// <remarks/>
        public event GetLoginLogCompletedEventHandler GetLoginLogCompleted;
        
        /// <remarks/>
        public event UPLOADTESTDATACompletedEventHandler UPLOADTESTDATACompleted;
        
        /// <remarks/>
        public event UPLOADBAT540TESTDATACompletedEventHandler UPLOADBAT540TESTDATACompleted;
        
        /// <remarks/>
        public event GetWipPackSnCompletedEventHandler GetWipPackSnCompleted;
        
        /// <remarks/>
        public event GetIfactoryWipPackSnCompletedEventHandler GetIfactoryWipPackSnCompleted;
        
        /// <remarks/>
        public event BindCellSNCompletedEventHandler BindCellSNCompleted;
        
        /// <remarks/>
        public event BindCellMoreCompletedEventHandler BindCellMoreCompleted;
        
        /// <remarks/>
        public event BindOneCellCompletedEventHandler BindOneCellCompleted;
        
        /// <remarks/>
        public event BindTwoCellCompletedEventHandler BindTwoCellCompleted;
        
        /// <remarks/>
        public event BindThreeCellCompletedEventHandler BindThreeCellCompleted;
        
        /// <remarks/>
        public event BindFourCellCompletedEventHandler BindFourCellCompleted;
        
        /// <remarks/>
        public event BindPCMPackCompletedEventHandler BindPCMPackCompleted;
        
        /// <remarks/>
        public event BindPCMCellCompletedEventHandler BindPCMCellCompleted;
        
        /// <remarks/>
        public event PCMPackLinkCompletedEventHandler PCMPackLinkCompleted;
        
        /// <remarks/>
        public event PCMPackBurnLinkCompletedEventHandler PCMPackBurnLinkCompleted;
        
        /// <remarks/>
        public event GetCellSnCompletedEventHandler GetCellSnCompleted;
        
        /// <remarks/>
        public event SaveLogInfoCompletedEventHandler SaveLogInfoCompleted;
        
        /// <remarks/>
        public event CheckCellSNCompletedEventHandler CheckCellSNCompleted;
        
        /// <remarks/>
        public event GetCellTestDataCompletedEventHandler GetCellTestDataCompleted;
        
        /// <remarks/>
        public event UploadCellTestDataCompletedEventHandler UploadCellTestDataCompleted;
        
        /// <remarks/>
        public event CheckPCMSNCompletedEventHandler CheckPCMSNCompleted;
        
        /// <remarks/>
        public event BindPackPCMCompletedEventHandler BindPackPCMCompleted;
        
        /// <remarks/>
        public event WipCellTestDataCompletedEventHandler WipCellTestDataCompleted;
        
        /// <remarks/>
        public event GetTestDataCompletedEventHandler GetTestDataCompleted;
        
        /// <remarks/>
        public event GetCellAgvDataCompletedEventHandler GetCellAgvDataCompleted;
        
        /// <remarks/>
        public event CellGroupBindCompletedEventHandler CellGroupBindCompleted;
        
        /// <remarks/>
        public event GetCellGroupCompletedEventHandler GetCellGroupCompleted;
        
        /// <remarks/>
        public event CheckCellGroupCompletedEventHandler CheckCellGroupCompleted;
        
        /// <remarks/>
        public event PackLinkCellGroupCompletedEventHandler PackLinkCellGroupCompleted;
        
        /// <remarks/>
        public event CellBindPackCompletedEventHandler CellBindPackCompleted;
        
        /// <remarks/>
        public event CheckCellGroupBindPackCompletedEventHandler CheckCellGroupBindPackCompleted;
        
        /// <remarks/>
        public event BatchInsertInfoCompletedEventHandler BatchInsertInfoCompleted;
        
        /// <remarks/>
        public event CheckModuleCellBindCompletedEventHandler CheckModuleCellBindCompleted;
        
        /// <remarks/>
        public event CheckModuleGroupBindCompletedEventHandler CheckModuleGroupBindCompleted;
        
        /// <remarks/>
        public event CheckPACKGroupBindCompletedEventHandler CheckPACKGroupBindCompleted;
        
        /// <remarks/>
        public event ModuleGroupBindCompletedEventHandler ModuleGroupBindCompleted;
        
        /// <remarks/>
        public event PackGroupBindCompletedEventHandler PackGroupBindCompleted;
        
        /// <remarks/>
        public event ModuleCellBindCompletedEventHandler ModuleCellBindCompleted;
        
        /// <remarks/>
        public event ExecuteNonQueryCompletedEventHandler ExecuteNonQueryCompleted;
        
        /// <remarks/>
        public event ExecuteNonQueryConnCompletedEventHandler ExecuteNonQueryConnCompleted;
        
        /// <remarks/>
        public event LargeSmallPanelLinkCompletedEventHandler LargeSmallPanelLinkCompleted;
        
        /// <remarks/>
        public event GetSmallPanelAisleCompletedEventHandler GetSmallPanelAisleCompleted;
        
        /// <remarks/>
        public event GetItemRuleCompletedEventHandler GetItemRuleCompleted;
        
        /// <remarks/>
        public event GetTestDateTimeCompletedEventHandler GetTestDateTimeCompleted;
        
        /// <remarks/>
        public event CheckTestResultCompletedEventHandler CheckTestResultCompleted;
        
        /// <remarks/>
        public event CheckTestResOKCompletedEventHandler CheckTestResOKCompleted;
        
        /// <remarks/>
        public event GetProductItemValueCompletedEventHandler GetProductItemValueCompleted;
        
        /// <remarks/>
        public event GetTestOKCompletedEventHandler GetTestOKCompleted;
        
        /// <remarks/>
        public event CellGroupLinkCompletedEventHandler CellGroupLinkCompleted;
        
        /// <remarks/>
        public event FittingLinkCheckCompletedEventHandler FittingLinkCheckCompleted;
        
        /// <remarks/>
        public event CellGroupLinkCheckCompletedEventHandler CellGroupLinkCheckCompleted;
        
        /// <remarks/>
        public event GetSupplierDataInfoCompletedEventHandler GetSupplierDataInfoCompleted;
        
        /// <remarks/>
        public event GetBatteryCellLinkInfoCompletedEventHandler GetBatteryCellLinkInfoCompleted;
        
        /// <remarks/>
        public event EBSMoProjectCompletedEventHandler EBSMoProjectCompleted;
        
        /// <remarks/>
        public event EBSMoNumberToMESCompletedEventHandler EBSMoNumberToMESCompleted;
        
        /// <remarks/>
        public event GetProductTOCellSnCompletedEventHandler GetProductTOCellSnCompleted;
        
        /// <remarks/>
        public event GetMotoProductTOUIDCompletedEventHandler GetMotoProductTOUIDCompleted;
        
        /// <remarks/>
        public event GetKeyToProductCompletedEventHandler GetKeyToProductCompleted;
        
        /// <remarks/>
        public event CheckProductMoNumberCompletedEventHandler CheckProductMoNumberCompleted;
        
        /// <remarks/>
        public event LockProductCompletedEventHandler LockProductCompleted;
        
        /// <remarks/>
        public event PCMPackBurnLinkRuleCompletedEventHandler PCMPackBurnLinkRuleCompleted;
        
        /// <remarks/>
        public event GetCarrierToProductTypeCompletedEventHandler GetCarrierToProductTypeCompleted;
        
        /// <remarks/>
        public event GetProductTestDataCompletedEventHandler GetProductTestDataCompleted;
        
        /// <remarks/>
        public event GetProductTestDataListCompletedEventHandler GetProductTestDataListCompleted;
        
        /// <remarks/>
        public event GetCarrierToProductCompletedEventHandler GetCarrierToProductCompleted;
        
        /// <remarks/>
        public event BindCarrierProductCompletedEventHandler BindCarrierProductCompleted;
        
        /// <remarks/>
        public event ProductFittingLinkCompletedEventHandler ProductFittingLinkCompleted;
        
        /// <remarks/>
        public event GetModuleNumberCompletedEventHandler GetModuleNumberCompleted;
        
        /// <remarks/>
        public event DeviecStatusCompletedEventHandler DeviecStatusCompleted;
        
        /// <remarks/>
        public event DeviceStatusCompletedEventHandler DeviceStatusCompleted;
        
        /// <remarks/>
        public event HWInterfaceTestCompletedEventHandler HWInterfaceTestCompleted;
        
        /// <remarks/>
        public event HWInterfaceConversionCompletedEventHandler HWInterfaceConversionCompleted;
        
        /// <remarks/>
        public event CheckPoNumberCompletedEventHandler CheckPoNumberCompleted;
        
        /// <remarks/>
        public event CheckAddressCodeCompletedEventHandler CheckAddressCodeCompleted;
        
        /// <remarks/>
        public event PoPalletLinkCompletedEventHandler PoPalletLinkCompleted;
        
        /// <remarks/>
        public event MachineFittingLinkCompletedEventHandler MachineFittingLinkCompleted;
        
        /// <remarks/>
        public event GetMacIdCompletedEventHandler GetMacIdCompleted;
        
        /// <remarks/>
        public event BarcodeConversionCompletedEventHandler BarcodeConversionCompleted;
        
        /// <remarks/>
        public event GetProductNewSnCompletedEventHandler GetProductNewSnCompleted;
        
        /// <remarks/>
        public event GetProductOldSnCompletedEventHandler GetProductOldSnCompleted;
        
        /// <remarks/>
        public event GetPrioductDIDInfoCompletedEventHandler GetPrioductDIDInfoCompleted;
        
        /// <remarks/>
        public event ProductThroughStationCompletedEventHandler ProductThroughStationCompleted;
        
        /// <remarks/>
        public event CheckRouteFirstCompletedEventHandler CheckRouteFirstCompleted;
        
        /// <remarks/>
        public event DeleteProductMessageCompletedEventHandler DeleteProductMessageCompleted;
        
        /// <remarks/>
        public event SMTWeldInputCompletedEventHandler SMTWeldInputCompleted;
        
        /// <remarks/>
        public event MES_KEYPSN_SAVECompletedEventHandler MES_KEYPSN_SAVECompleted;
        
        /// <remarks/>
        public event MES_PACK_BATTERYLINK_RULECompletedEventHandler MES_PACK_BATTERYLINK_RULECompleted;
        
        /// <remarks/>
        public event CheckRoutePackingCompletedEventHandler CheckRoutePackingCompleted;
        
        /// <remarks/>
        public event PackingCheckCellTypeCompletedEventHandler PackingCheckCellTypeCompleted;
        
        /// <remarks/>
        public event BarcodeConversionNEWCompletedEventHandler BarcodeConversionNEWCompleted;
        
        /// <remarks/>
        public event EVBModelSortingCompletedEventHandler EVBModelSortingCompleted;
        
        /// <remarks/>
        public event EVBModelReplaceCompletedEventHandler EVBModelReplaceCompleted;
        
        /// <remarks/>
        public event EVBGetModelInfoCompletedEventHandler EVBGetModelInfoCompleted;
        
        /// <remarks/>
        public event CheckItemRuleProductCompletedEventHandler CheckItemRuleProductCompleted;
        
        /// <remarks/>
        public event CheckItemRuleCompletedEventHandler CheckItemRuleCompleted;
        
        /// <remarks/>
        public event ItemAsnWMSToMESCompletedEventHandler ItemAsnWMSToMESCompleted;
        
        /// <remarks/>
        public event getCycleRecordNumberCompletedEventHandler getCycleRecordNumberCompleted;
        
        /// <remarks/>
        public event cycleLevelsDataCompletedEventHandler cycleLevelsDataCompleted;
        
        /// <remarks/>
        public event cycleGasGaugeDataCompletedEventHandler cycleGasGaugeDataCompleted;
        
        /// <remarks/>
        public event recordLayerDataCompletedEventHandler recordLayerDataCompleted;
        
        /// <remarks/>
        public event cycleDataAllCompletedEventHandler cycleDataAllCompleted;
        
        /// <remarks/>
        public event CheckAddressLinkCompletedEventHandler CheckAddressLinkCompleted;
        
        /// <remarks/>
        public event GetStencilInfoCompletedEventHandler GetStencilInfoCompleted;
        
        /// <remarks/>
        public event CheckAddressAndPalletLinkCompletedEventHandler CheckAddressAndPalletLinkCompleted;
        
        /// <remarks/>
        public event PrintProductUploadCompletedEventHandler PrintProductUploadCompleted;
        
        /// <remarks/>
        public event PrintCheckProductCompletedEventHandler PrintCheckProductCompleted;
        
        /// <remarks/>
        public event GetSupplierInfoCompletedEventHandler GetSupplierInfoCompleted;
        
        /// <remarks/>
        public event Initialize_UserCompletedEventHandler Initialize_UserCompleted;
        
        /// <remarks/>
        public event Transfer_PositionCompletedEventHandler Transfer_PositionCompleted;
        
        /// <remarks/>
        public event GetOCV_DataCompletedEventHandler GetOCV_DataCompleted;
        
        /// <remarks/>
        public event DelSNCompletedEventHandler DelSNCompleted;
        
        /// <remarks/>
        public event CheckUserDoCompletedEventHandler CheckUserDoCompleted;
        
        /// <remarks/>
        public event BatteryLinkCompletedEventHandler BatteryLinkCompleted;
        
        /// <remarks/>
        public event DelBatteryLinkCompletedEventHandler DelBatteryLinkCompleted;
        
        /// <remarks/>
        public event GetBatterySNCompletedEventHandler GetBatterySNCompleted;
        
        /// <remarks/>
        public event GetBatteriesSNCompletedEventHandler GetBatteriesSNCompleted;
        
        /// <remarks/>
        public event LargePanelCheckCompletedEventHandler LargePanelCheckCompleted;
        
        /// <remarks/>
        public event PanelLargeToSmallCompletedEventHandler PanelLargeToSmallCompleted;
        
        /// <remarks/>
        public event AgIngDeBugEventCompletedEventHandler AgIngDeBugEventCompleted;
        
        /// <remarks/>
        public event AgIngDeBugDataCompletedEventHandler AgIngDeBugDataCompleted;
        
        /// <remarks/>
        public event GroupTestCompletedEventHandler GroupTestCompleted;
        
        /// <remarks/>
        public event GroupTestCommonCompletedEventHandler GroupTestCommonCompleted;
        
        /// <remarks/>
        public event CheckSupplierSNCompletedEventHandler CheckSupplierSNCompleted;
        
        /// <remarks/>
        public event WeldInputCompletedEventHandler WeldInputCompleted;
        
        /// <remarks/>
        public event AutoSelectInputCompletedEventHandler AutoSelectInputCompleted;
        
        /// <remarks/>
        public event WIPTESTSAMPLECompletedEventHandler WIPTESTSAMPLECompleted;
        
        /// <remarks/>
        public event GETSAMPLETESTDATACompletedEventHandler GETSAMPLETESTDATACompleted;
        
        /// <remarks/>
        public event GETTESTDATACompletedEventHandler GETTESTDATACompleted;
        
        /// <remarks/>
        public event WIPTESTCompletedEventHandler WIPTESTCompleted;
        
        /// <remarks/>
        public event WipTestConversionCompletedEventHandler WipTestConversionCompleted;
        
        /// <remarks/>
        public event OfflineDataUploadCompletedEventHandler OfflineDataUploadCompleted;
        
        /// <remarks/>
        public event OfflineDataCompletedEventHandler OfflineDataCompleted;
        
        /// <remarks/>
        public event WeldInputTestCompletedEventHandler WeldInputTestCompleted;
        
        /// <remarks/>
        public event SPITESTCompletedEventHandler SPITESTCompleted;
        
        /// <remarks/>
        public event AOITestCompletedEventHandler AOITestCompleted;
        
        /// <remarks/>
        public event AddTestDataCompletedEventHandler AddTestDataCompleted;
        
        /// <remarks/>
        public event OffLineDataNewCompletedEventHandler OffLineDataNewCompleted;
        
        /// <remarks/>
        public event CheckUserUnlockCompletedEventHandler CheckUserUnlockCompleted;
        
        /// <remarks/>
        public event GetBurinFilePathSNCompletedEventHandler GetBurinFilePathSNCompleted;
        
        /// <remarks/>
        public event GetBurinFilePathCompletedEventHandler GetBurinFilePathCompleted;
        
        /// <remarks/>
        public event GetMoesCompletedEventHandler GetMoesCompleted;
        
        /// <remarks/>
        public event MoExistCompletedEventHandler MoExistCompleted;
        
        /// <remarks/>
        public event AutoPasteLabelingCompletedEventHandler AutoPasteLabelingCompleted;
        
        /// <remarks/>
        public event GetTestItemValuesCompletedEventHandler GetTestItemValuesCompleted;
        
        /// <remarks/>
        public event GetProductItemValuesCompletedEventHandler GetProductItemValuesCompleted;
        
        /// <remarks/>
        public event GetMonumberSettingInfoCompletedEventHandler GetMonumberSettingInfoCompleted;
        
        /// <remarks/>
        public event GetProductItemLineCompletedEventHandler GetProductItemLineCompleted;
        
        /// <remarks/>
        public event BindBatteryProductSnCompletedEventHandler BindBatteryProductSnCompleted;
        
        /// <remarks/>
        public event BoxProductSnCompletedEventHandler BoxProductSnCompleted;
        
        /// <remarks/>
        public event BoxProductSnesCompletedEventHandler BoxProductSnesCompleted;
        
        /// <remarks/>
        public event GetATLBarcodeCompletedEventHandler GetATLBarcodeCompleted;
        
        /// <remarks/>
        public event DEVICE_INTERFACE_TESTCompletedEventHandler DEVICE_INTERFACE_TESTCompleted;
        
        /// <remarks/>
        public event GetGroupItemCompletedEventHandler GetGroupItemCompleted;
        
        /// <remarks/>
        public event GetProductCellItemCompletedEventHandler GetProductCellItemCompleted;
        
        /// <remarks/>
        public event HWInterfaceCompletedEventHandler HWInterfaceCompleted;
        
        /// <remarks/>
        public event UploadLongDataCompletedEventHandler UploadLongDataCompleted;
        
        /// <remarks/>
        public event GetErrorCodeCompletedEventHandler GetErrorCodeCompleted;
        
        /// <remarks/>
        public event GetCUSTOMER_SNCompletedEventHandler GetCUSTOMER_SNCompleted;
        
        /// <remarks/>
        public event SavePCMDataCompletedEventHandler SavePCMDataCompleted;
        
        /// <remarks/>
        public event GetPCMDataCompletedEventHandler GetPCMDataCompleted;
        
        /// <remarks/>
        public event SaveMutureDataCompletedEventHandler SaveMutureDataCompleted;
        
        /// <remarks/>
        public event GetMutureDataCompletedEventHandler GetMutureDataCompleted;
        
        /// <remarks/>
        public event DelMutureDataCompletedEventHandler DelMutureDataCompleted;
        
        /// <remarks/>
        public event CarrierRecycleCompletedEventHandler CarrierRecycleCompleted;
        
        /// <remarks/>
        public event BatteryBindingCompletedEventHandler BatteryBindingCompleted;
        
        /// <remarks/>
        public event CheckStationCompletedEventHandler CheckStationCompleted;
        
        /// <remarks/>
        public event ReplaceSNCompletedEventHandler ReplaceSNCompleted;
        
        /// <remarks/>
        public event BindCarrierPackCompletedEventHandler BindCarrierPackCompleted;
        
        /// <remarks/>
        public event UnbindCarrirPackCompletedEventHandler UnbindCarrirPackCompleted;
        
        /// <remarks/>
        public event GetBindingPackCompletedEventHandler GetBindingPackCompleted;
        
        /// <remarks/>
        public event GetBindingListCompletedEventHandler GetBindingListCompleted;
        
        /// <remarks/>
        public event RemoveAllBindingCompletedEventHandler RemoveAllBindingCompleted;
        
        /// <remarks/>
        public event ImportBatteryCapacityCompletedEventHandler ImportBatteryCapacityCompleted;
        
        /// <remarks/>
        public event UploadOCVCompletedEventHandler UploadOCVCompleted;
        
        /// <remarks/>
        public event FinishBatCompletedEventHandler FinishBatCompleted;
        
        /// <remarks/>
        public event BulidBatteryGroupCompletedEventHandler BulidBatteryGroupCompleted;
        
        /// <remarks/>
        public event BindPackSNCompletedEventHandler BindPackSNCompleted;
        
        /// <remarks/>
        public event GetPackSnByCellSnCompletedEventHandler GetPackSnByCellSnCompleted;
        
        /// <remarks/>
        public event DelCellSnByPackSnCompletedEventHandler DelCellSnByPackSnCompleted;
        
        /// <remarks/>
        public event GetPackSnTestDataCompletedEventHandler GetPackSnTestDataCompleted;
        
        /// <remarks/>
        public event GetPackSnItemNameTestDataCompletedEventHandler GetPackSnItemNameTestDataCompleted;
        
        /// <remarks/>
        public event GetSqlDataCompletedEventHandler GetSqlDataCompleted;
        
        /// <remarks/>
        public event GetSqlDataConnCompletedEventHandler GetSqlDataConnCompleted;
        
        /// <remarks/>
        public event DelWipInfoCompletedEventHandler DelWipInfoCompleted;
        
        /// <remarks/>
        public event CheckBarcodeRuleCompletedEventHandler CheckBarcodeRuleCompleted;
        
        /// <remarks/>
        public event FittingBindingCompletedEventHandler FittingBindingCompleted;
        
        /// <remarks/>
        public event CheckRouteCompletedEventHandler CheckRouteCompleted;
        
        /// <remarks/>
        public event MacBindCustSnCompletedEventHandler MacBindCustSnCompleted;
        
        /// <remarks/>
        public event MacBindCustSnAndIDCompletedEventHandler MacBindCustSnAndIDCompleted;
        
        /// <remarks/>
        public event CheckCustMacBindCompletedEventHandler CheckCustMacBindCompleted;
        
        /// <remarks/>
        public event GetSubKeyListCompletedEventHandler GetSubKeyListCompleted;
        
        /// <remarks/>
        public event CreatePalletCompletedEventHandler CreatePalletCompleted;
        
        /// <remarks/>
        public event GetPalletSerialCompletedEventHandler GetPalletSerialCompleted;
        
        /// <remarks/>
        public event CreateBoxCompletedEventHandler CreateBoxCompleted;
        
        /// <remarks/>
        public event DeletePalletCompletedEventHandler DeletePalletCompleted;
        
        /// <remarks/>
        public event DeleteBoxCompletedEventHandler DeleteBoxCompleted;
        
        /// <remarks/>
        public event SolutionBoxCompletedEventHandler SolutionBoxCompleted;
        
        /// <remarks/>
        public event GetPalletInfoCompletedEventHandler GetPalletInfoCompleted;
        
        /// <remarks/>
        public event GetBoxInfoCompletedEventHandler GetBoxInfoCompleted;
        
        /// <remarks/>
        public event GetProductInfoCompletedEventHandler GetProductInfoCompleted;
        
        /// <remarks/>
        public event ProductPackingCompletedEventHandler ProductPackingCompleted;
        
        /// <remarks/>
        public event CheckCellBingCompletedEventHandler CheckCellBingCompleted;
        
        /// <remarks/>
        public event GetMarkingInfoCompletedEventHandler GetMarkingInfoCompleted;
        
        /// <remarks/>
        public event SaveCusInfoCompletedEventHandler SaveCusInfoCompleted;
        
        /// <remarks/>
        public event GetCustomerInfoCompletedEventHandler GetCustomerInfoCompleted;
        
        /// <remarks/>
        public event GetTrackingInfoCompletedEventHandler GetTrackingInfoCompleted;
        
        /// <remarks/>
        public event UpdateLastBoxQtyCompletedEventHandler UpdateLastBoxQtyCompleted;
        
        /// <remarks/>
        public event GetLastPrintCompletedEventHandler GetLastPrintCompleted;
        
        /// <remarks/>
        public event SaveLastPrintCompletedEventHandler SaveLastPrintCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSoftwareVersion", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSoftwareVersion(string item_code) {
            object[] results = this.Invoke("GetSoftwareVersion", new object[] {
                        item_code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSoftwareVersionAsync(string item_code) {
            this.GetSoftwareVersionAsync(item_code, null);
        }
        
        /// <remarks/>
        public void GetSoftwareVersionAsync(string item_code, object userState) {
            if ((this.GetSoftwareVersionOperationCompleted == null)) {
                this.GetSoftwareVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoftwareVersionOperationCompleted);
            }
            this.InvokeAsync("GetSoftwareVersion", new object[] {
                        item_code}, this.GetSoftwareVersionOperationCompleted, userState);
        }
        
        private void OnGetSoftwareVersionOperationCompleted(object arg) {
            if ((this.GetSoftwareVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoftwareVersionCompleted(this, new GetSoftwareVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/getSystemTime", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSystemTime() {
            object[] results = this.Invoke("getSystemTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSystemTimeAsync() {
            this.getSystemTimeAsync(null);
        }
        
        /// <remarks/>
        public void getSystemTimeAsync(object userState) {
            if ((this.getSystemTimeOperationCompleted == null)) {
                this.getSystemTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSystemTimeOperationCompleted);
            }
            this.InvokeAsync("getSystemTime", new object[0], this.getSystemTimeOperationCompleted, userState);
        }
        
        private void OngetSystemTimeOperationCompleted(object arg) {
            if ((this.getSystemTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSystemTimeCompleted(this, new getSystemTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckPO_Pallet", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckPO_Pallet(string strPO, string itemcode, int PO_QTY) {
            object[] results = this.Invoke("CheckPO_Pallet", new object[] {
                        strPO,
                        itemcode,
                        PO_QTY});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPO_PalletAsync(string strPO, string itemcode, int PO_QTY) {
            this.CheckPO_PalletAsync(strPO, itemcode, PO_QTY, null);
        }
        
        /// <remarks/>
        public void CheckPO_PalletAsync(string strPO, string itemcode, int PO_QTY, object userState) {
            if ((this.CheckPO_PalletOperationCompleted == null)) {
                this.CheckPO_PalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPO_PalletOperationCompleted);
            }
            this.InvokeAsync("CheckPO_Pallet", new object[] {
                        strPO,
                        itemcode,
                        PO_QTY}, this.CheckPO_PalletOperationCompleted, userState);
        }
        
        private void OnCheckPO_PalletOperationCompleted(object arg) {
            if ((this.CheckPO_PalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPO_PalletCompleted(this, new CheckPO_PalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/QMS_FQA_Result", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QMS_FQA_Result(string FQA_Check_Info) {
            object[] results = this.Invoke("QMS_FQA_Result", new object[] {
                        FQA_Check_Info});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QMS_FQA_ResultAsync(string FQA_Check_Info) {
            this.QMS_FQA_ResultAsync(FQA_Check_Info, null);
        }
        
        /// <remarks/>
        public void QMS_FQA_ResultAsync(string FQA_Check_Info, object userState) {
            if ((this.QMS_FQA_ResultOperationCompleted == null)) {
                this.QMS_FQA_ResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQMS_FQA_ResultOperationCompleted);
            }
            this.InvokeAsync("QMS_FQA_Result", new object[] {
                        FQA_Check_Info}, this.QMS_FQA_ResultOperationCompleted, userState);
        }
        
        private void OnQMS_FQA_ResultOperationCompleted(object arg) {
            if ((this.QMS_FQA_ResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QMS_FQA_ResultCompleted(this, new QMS_FQA_ResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/HR_UserInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HR_UserInfo(string str) {
            object[] results = this.Invoke("HR_UserInfo", new object[] {
                        str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HR_UserInfoAsync(string str) {
            this.HR_UserInfoAsync(str, null);
        }
        
        /// <remarks/>
        public void HR_UserInfoAsync(string str, object userState) {
            if ((this.HR_UserInfoOperationCompleted == null)) {
                this.HR_UserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHR_UserInfoOperationCompleted);
            }
            this.InvokeAsync("HR_UserInfo", new object[] {
                        str}, this.HR_UserInfoOperationCompleted, userState);
        }
        
        private void OnHR_UserInfoOperationCompleted(object arg) {
            if ((this.HR_UserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HR_UserInfoCompleted(this, new HR_UserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BatchInsertData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatchInsertData(System.Data.DataTable dt, string table_name, int batch_count, string sqlconn) {
            object[] results = this.Invoke("BatchInsertData", new object[] {
                        dt,
                        table_name,
                        batch_count,
                        sqlconn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchInsertDataAsync(System.Data.DataTable dt, string table_name, int batch_count, string sqlconn) {
            this.BatchInsertDataAsync(dt, table_name, batch_count, sqlconn, null);
        }
        
        /// <remarks/>
        public void BatchInsertDataAsync(System.Data.DataTable dt, string table_name, int batch_count, string sqlconn, object userState) {
            if ((this.BatchInsertDataOperationCompleted == null)) {
                this.BatchInsertDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchInsertDataOperationCompleted);
            }
            this.InvokeAsync("BatchInsertData", new object[] {
                        dt,
                        table_name,
                        batch_count,
                        sqlconn}, this.BatchInsertDataOperationCompleted, userState);
        }
        
        private void OnBatchInsertDataOperationCompleted(object arg) {
            if ((this.BatchInsertDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchInsertDataCompleted(this, new BatchInsertDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckPallet", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckPallet(string strPallet, string itemcode, string orgid) {
            object[] results = this.Invoke("CheckPallet", new object[] {
                        strPallet,
                        itemcode,
                        orgid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPalletAsync(string strPallet, string itemcode, string orgid) {
            this.CheckPalletAsync(strPallet, itemcode, orgid, null);
        }
        
        /// <remarks/>
        public void CheckPalletAsync(string strPallet, string itemcode, string orgid, object userState) {
            if ((this.CheckPalletOperationCompleted == null)) {
                this.CheckPalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPalletOperationCompleted);
            }
            this.InvokeAsync("CheckPallet", new object[] {
                        strPallet,
                        itemcode,
                        orgid}, this.CheckPalletOperationCompleted, userState);
        }
        
        private void OnCheckPalletOperationCompleted(object arg) {
            if ((this.CheckPalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPalletCompleted(this, new CheckPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeviceInformationSZ", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviceInformationSZ(string DeviceInfo) {
            object[] results = this.Invoke("DeviceInformationSZ", new object[] {
                        DeviceInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceInformationSZAsync(string DeviceInfo) {
            this.DeviceInformationSZAsync(DeviceInfo, null);
        }
        
        /// <remarks/>
        public void DeviceInformationSZAsync(string DeviceInfo, object userState) {
            if ((this.DeviceInformationSZOperationCompleted == null)) {
                this.DeviceInformationSZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceInformationSZOperationCompleted);
            }
            this.InvokeAsync("DeviceInformationSZ", new object[] {
                        DeviceInfo}, this.DeviceInformationSZOperationCompleted, userState);
        }
        
        private void OnDeviceInformationSZOperationCompleted(object arg) {
            if ((this.DeviceInformationSZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceInformationSZCompleted(this, new DeviceInformationSZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ProductionGroupInfoSZ", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductionGroupInfoSZ(string GroupInfo) {
            object[] results = this.Invoke("ProductionGroupInfoSZ", new object[] {
                        GroupInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductionGroupInfoSZAsync(string GroupInfo) {
            this.ProductionGroupInfoSZAsync(GroupInfo, null);
        }
        
        /// <remarks/>
        public void ProductionGroupInfoSZAsync(string GroupInfo, object userState) {
            if ((this.ProductionGroupInfoSZOperationCompleted == null)) {
                this.ProductionGroupInfoSZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductionGroupInfoSZOperationCompleted);
            }
            this.InvokeAsync("ProductionGroupInfoSZ", new object[] {
                        GroupInfo}, this.ProductionGroupInfoSZOperationCompleted, userState);
        }
        
        private void OnProductionGroupInfoSZOperationCompleted(object arg) {
            if ((this.ProductionGroupInfoSZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductionGroupInfoSZCompleted(this, new ProductionGroupInfoSZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/LoginCheck", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoginCheck(string LoginInfo) {
            object[] results = this.Invoke("LoginCheck", new object[] {
                        LoginInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginCheckAsync(string LoginInfo) {
            this.LoginCheckAsync(LoginInfo, null);
        }
        
        /// <remarks/>
        public void LoginCheckAsync(string LoginInfo, object userState) {
            if ((this.LoginCheckOperationCompleted == null)) {
                this.LoginCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCheckOperationCompleted);
            }
            this.InvokeAsync("LoginCheck", new object[] {
                        LoginInfo}, this.LoginCheckOperationCompleted, userState);
        }
        
        private void OnLoginCheckOperationCompleted(object arg) {
            if ((this.LoginCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCheckCompleted(this, new LoginCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeviceInformation", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviceInformation(string DeviceInfo) {
            object[] results = this.Invoke("DeviceInformation", new object[] {
                        DeviceInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceInformationAsync(string DeviceInfo) {
            this.DeviceInformationAsync(DeviceInfo, null);
        }
        
        /// <remarks/>
        public void DeviceInformationAsync(string DeviceInfo, object userState) {
            if ((this.DeviceInformationOperationCompleted == null)) {
                this.DeviceInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceInformationOperationCompleted);
            }
            this.InvokeAsync("DeviceInformation", new object[] {
                        DeviceInfo}, this.DeviceInformationOperationCompleted, userState);
        }
        
        private void OnDeviceInformationOperationCompleted(object arg) {
            if ((this.DeviceInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceInformationCompleted(this, new DeviceInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ProductionGroupInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductionGroupInfo(string GroupInfo) {
            object[] results = this.Invoke("ProductionGroupInfo", new object[] {
                        GroupInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductionGroupInfoAsync(string GroupInfo) {
            this.ProductionGroupInfoAsync(GroupInfo, null);
        }
        
        /// <remarks/>
        public void ProductionGroupInfoAsync(string GroupInfo, object userState) {
            if ((this.ProductionGroupInfoOperationCompleted == null)) {
                this.ProductionGroupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductionGroupInfoOperationCompleted);
            }
            this.InvokeAsync("ProductionGroupInfo", new object[] {
                        GroupInfo}, this.ProductionGroupInfoOperationCompleted, userState);
        }
        
        private void OnProductionGroupInfoOperationCompleted(object arg) {
            if ((this.ProductionGroupInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductionGroupInfoCompleted(this, new ProductionGroupInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MaterialControl", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MaterialControl(string Material) {
            object[] results = this.Invoke("MaterialControl", new object[] {
                        Material});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MaterialControlAsync(string Material) {
            this.MaterialControlAsync(Material, null);
        }
        
        /// <remarks/>
        public void MaterialControlAsync(string Material, object userState) {
            if ((this.MaterialControlOperationCompleted == null)) {
                this.MaterialControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMaterialControlOperationCompleted);
            }
            this.InvokeAsync("MaterialControl", new object[] {
                        Material}, this.MaterialControlOperationCompleted, userState);
        }
        
        private void OnMaterialControlOperationCompleted(object arg) {
            if ((this.MaterialControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MaterialControlCompleted(this, new MaterialControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/NegativePressureMessage", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NegativePressureMessage(string PressureMessage) {
            object[] results = this.Invoke("NegativePressureMessage", new object[] {
                        PressureMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NegativePressureMessageAsync(string PressureMessage) {
            this.NegativePressureMessageAsync(PressureMessage, null);
        }
        
        /// <remarks/>
        public void NegativePressureMessageAsync(string PressureMessage, object userState) {
            if ((this.NegativePressureMessageOperationCompleted == null)) {
                this.NegativePressureMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNegativePressureMessageOperationCompleted);
            }
            this.InvokeAsync("NegativePressureMessage", new object[] {
                        PressureMessage}, this.NegativePressureMessageOperationCompleted, userState);
        }
        
        private void OnNegativePressureMessageOperationCompleted(object arg) {
            if ((this.NegativePressureMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NegativePressureMessageCompleted(this, new NegativePressureMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductModelName", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductModelName(string M_SN) {
            object[] results = this.Invoke("GetProductModelName", new object[] {
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductModelNameAsync(string M_SN) {
            this.GetProductModelNameAsync(M_SN, null);
        }
        
        /// <remarks/>
        public void GetProductModelNameAsync(string M_SN, object userState) {
            if ((this.GetProductModelNameOperationCompleted == null)) {
                this.GetProductModelNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductModelNameOperationCompleted);
            }
            this.InvokeAsync("GetProductModelName", new object[] {
                        M_SN}, this.GetProductModelNameOperationCompleted, userState);
        }
        
        private void OnGetProductModelNameOperationCompleted(object arg) {
            if ((this.GetProductModelNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductModelNameCompleted(this, new GetProductModelNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/RelTestDataUpload", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RelTestDataUpload(string RelTestDataAll) {
            object[] results = this.Invoke("RelTestDataUpload", new object[] {
                        RelTestDataAll});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RelTestDataUploadAsync(string RelTestDataAll) {
            this.RelTestDataUploadAsync(RelTestDataAll, null);
        }
        
        /// <remarks/>
        public void RelTestDataUploadAsync(string RelTestDataAll, object userState) {
            if ((this.RelTestDataUploadOperationCompleted == null)) {
                this.RelTestDataUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRelTestDataUploadOperationCompleted);
            }
            this.InvokeAsync("RelTestDataUpload", new object[] {
                        RelTestDataAll}, this.RelTestDataUploadOperationCompleted, userState);
        }
        
        private void OnRelTestDataUploadOperationCompleted(object arg) {
            if ((this.RelTestDataUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RelTestDataUploadCompleted(this, new RelTestDataUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SNbindBatchNumber", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SNbindBatchNumber(string MainSN, string Z_BatchSN, string F_BatchSN, string MachineNo, string Userid) {
            object[] results = this.Invoke("SNbindBatchNumber", new object[] {
                        MainSN,
                        Z_BatchSN,
                        F_BatchSN,
                        MachineNo,
                        Userid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SNbindBatchNumberAsync(string MainSN, string Z_BatchSN, string F_BatchSN, string MachineNo, string Userid) {
            this.SNbindBatchNumberAsync(MainSN, Z_BatchSN, F_BatchSN, MachineNo, Userid, null);
        }
        
        /// <remarks/>
        public void SNbindBatchNumberAsync(string MainSN, string Z_BatchSN, string F_BatchSN, string MachineNo, string Userid, object userState) {
            if ((this.SNbindBatchNumberOperationCompleted == null)) {
                this.SNbindBatchNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSNbindBatchNumberOperationCompleted);
            }
            this.InvokeAsync("SNbindBatchNumber", new object[] {
                        MainSN,
                        Z_BatchSN,
                        F_BatchSN,
                        MachineNo,
                        Userid}, this.SNbindBatchNumberOperationCompleted, userState);
        }
        
        private void OnSNbindBatchNumberOperationCompleted(object arg) {
            if ((this.SNbindBatchNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SNbindBatchNumberCompleted(this, new SNbindBatchNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/checkNetStatus", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkNetStatus() {
            object[] results = this.Invoke("checkNetStatus", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkNetStatusAsync() {
            this.checkNetStatusAsync(null);
        }
        
        /// <remarks/>
        public void checkNetStatusAsync(object userState) {
            if ((this.checkNetStatusOperationCompleted == null)) {
                this.checkNetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckNetStatusOperationCompleted);
            }
            this.InvokeAsync("checkNetStatus", new object[0], this.checkNetStatusOperationCompleted, userState);
        }
        
        private void OncheckNetStatusOperationCompleted(object arg) {
            if ((this.checkNetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkNetStatusCompleted(this, new checkNetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductEndDate", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductEndDate(string product_sn) {
            object[] results = this.Invoke("GetProductEndDate", new object[] {
                        product_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductEndDateAsync(string product_sn) {
            this.GetProductEndDateAsync(product_sn, null);
        }
        
        /// <remarks/>
        public void GetProductEndDateAsync(string product_sn, object userState) {
            if ((this.GetProductEndDateOperationCompleted == null)) {
                this.GetProductEndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductEndDateOperationCompleted);
            }
            this.InvokeAsync("GetProductEndDate", new object[] {
                        product_sn}, this.GetProductEndDateOperationCompleted, userState);
        }
        
        private void OnGetProductEndDateOperationCompleted(object arg) {
            if ((this.GetProductEndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductEndDateCompleted(this, new GetProductEndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/checkSNUniqueness", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkSNUniqueness(string sn) {
            object[] results = this.Invoke("checkSNUniqueness", new object[] {
                        sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkSNUniquenessAsync(string sn) {
            this.checkSNUniquenessAsync(sn, null);
        }
        
        /// <remarks/>
        public void checkSNUniquenessAsync(string sn, object userState) {
            if ((this.checkSNUniquenessOperationCompleted == null)) {
                this.checkSNUniquenessOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckSNUniquenessOperationCompleted);
            }
            this.InvokeAsync("checkSNUniqueness", new object[] {
                        sn}, this.checkSNUniquenessOperationCompleted, userState);
        }
        
        private void OncheckSNUniquenessOperationCompleted(object arg) {
            if ((this.checkSNUniquenessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkSNUniquenessCompleted(this, new checkSNUniquenessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/getUseInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getUseInfo(string SN, string CMD) {
            object[] results = this.Invoke("getUseInfo", new object[] {
                        SN,
                        CMD});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUseInfoAsync(string SN, string CMD) {
            this.getUseInfoAsync(SN, CMD, null);
        }
        
        /// <remarks/>
        public void getUseInfoAsync(string SN, string CMD, object userState) {
            if ((this.getUseInfoOperationCompleted == null)) {
                this.getUseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUseInfoOperationCompleted);
            }
            this.InvokeAsync("getUseInfo", new object[] {
                        SN,
                        CMD}, this.getUseInfoOperationCompleted, userState);
        }
        
        private void OngetUseInfoOperationCompleted(object arg) {
            if ((this.getUseInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUseInfoCompleted(this, new getUseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/Binding", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Binding(string snMain, string fittingGroup, string user, string device_no) {
            object[] results = this.Invoke("Binding", new object[] {
                        snMain,
                        fittingGroup,
                        user,
                        device_no});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindingAsync(string snMain, string fittingGroup, string user, string device_no) {
            this.BindingAsync(snMain, fittingGroup, user, device_no, null);
        }
        
        /// <remarks/>
        public void BindingAsync(string snMain, string fittingGroup, string user, string device_no, object userState) {
            if ((this.BindingOperationCompleted == null)) {
                this.BindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindingOperationCompleted);
            }
            this.InvokeAsync("Binding", new object[] {
                        snMain,
                        fittingGroup,
                        user,
                        device_no}, this.BindingOperationCompleted, userState);
        }
        
        private void OnBindingOperationCompleted(object arg) {
            if ((this.BindingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindingCompleted(this, new BindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/HWInterfaceTest_test", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HWInterfaceTest_test(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            object[] results = this.Invoke("HWInterfaceTest_test", new object[] {
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HWInterfaceTest_testAsync(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            this.HWInterfaceTest_testAsync(M_MACHINENO, M_PRODUCT_SN, M_MO, M_EMP, M_KP_ITEMSN_ALL, M_ITEMVALUE, M_RESULT, M_ERROR, null);
        }
        
        /// <remarks/>
        public void HWInterfaceTest_testAsync(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR, object userState) {
            if ((this.HWInterfaceTest_testOperationCompleted == null)) {
                this.HWInterfaceTest_testOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHWInterfaceTest_testOperationCompleted);
            }
            this.InvokeAsync("HWInterfaceTest_test", new object[] {
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR}, this.HWInterfaceTest_testOperationCompleted, userState);
        }
        
        private void OnHWInterfaceTest_testOperationCompleted(object arg) {
            if ((this.HWInterfaceTest_testCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HWInterfaceTest_testCompleted(this, new HWInterfaceTest_testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/getSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSN(string cell1) {
            object[] results = this.Invoke("getSN", new object[] {
                        cell1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSNAsync(string cell1) {
            this.getSNAsync(cell1, null);
        }
        
        /// <remarks/>
        public void getSNAsync(string cell1, object userState) {
            if ((this.getSNOperationCompleted == null)) {
                this.getSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSNOperationCompleted);
            }
            this.InvokeAsync("getSN", new object[] {
                        cell1}, this.getSNOperationCompleted, userState);
        }
        
        private void OngetSNOperationCompleted(object arg) {
            if ((this.getSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSNCompleted(this, new getSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/getCellsByModule", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCellsByModule(string Module) {
            object[] results = this.Invoke("getCellsByModule", new object[] {
                        Module});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCellsByModuleAsync(string Module) {
            this.getCellsByModuleAsync(Module, null);
        }
        
        /// <remarks/>
        public void getCellsByModuleAsync(string Module, object userState) {
            if ((this.getCellsByModuleOperationCompleted == null)) {
                this.getCellsByModuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCellsByModuleOperationCompleted);
            }
            this.InvokeAsync("getCellsByModule", new object[] {
                        Module}, this.getCellsByModuleOperationCompleted, userState);
        }
        
        private void OngetCellsByModuleOperationCompleted(object arg) {
            if ((this.getCellsByModuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCellsByModuleCompleted(this, new getCellsByModuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/uploadDownCells", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string uploadDownCells(string type, string cell) {
            object[] results = this.Invoke("uploadDownCells", new object[] {
                        type,
                        cell});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadDownCellsAsync(string type, string cell) {
            this.uploadDownCellsAsync(type, cell, null);
        }
        
        /// <remarks/>
        public void uploadDownCellsAsync(string type, string cell, object userState) {
            if ((this.uploadDownCellsOperationCompleted == null)) {
                this.uploadDownCellsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadDownCellsOperationCompleted);
            }
            this.InvokeAsync("uploadDownCells", new object[] {
                        type,
                        cell}, this.uploadDownCellsOperationCompleted, userState);
        }
        
        private void OnuploadDownCellsOperationCompleted(object arg) {
            if ((this.uploadDownCellsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadDownCellsCompleted(this, new uploadDownCellsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/mainFittingLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string mainFittingLink(string mainSN, string fittingSN, int count, string userCode) {
            object[] results = this.Invoke("mainFittingLink", new object[] {
                        mainSN,
                        fittingSN,
                        count,
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void mainFittingLinkAsync(string mainSN, string fittingSN, int count, string userCode) {
            this.mainFittingLinkAsync(mainSN, fittingSN, count, userCode, null);
        }
        
        /// <remarks/>
        public void mainFittingLinkAsync(string mainSN, string fittingSN, int count, string userCode, object userState) {
            if ((this.mainFittingLinkOperationCompleted == null)) {
                this.mainFittingLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmainFittingLinkOperationCompleted);
            }
            this.InvokeAsync("mainFittingLink", new object[] {
                        mainSN,
                        fittingSN,
                        count,
                        userCode}, this.mainFittingLinkOperationCompleted, userState);
        }
        
        private void OnmainFittingLinkOperationCompleted(object arg) {
            if ((this.mainFittingLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.mainFittingLinkCompleted(this, new mainFittingLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/OpenOrColsePallet", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpenOrColsePallet(string PalletSn, string State) {
            object[] results = this.Invoke("OpenOrColsePallet", new object[] {
                        PalletSn,
                        State});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OpenOrColsePalletAsync(string PalletSn, string State) {
            this.OpenOrColsePalletAsync(PalletSn, State, null);
        }
        
        /// <remarks/>
        public void OpenOrColsePalletAsync(string PalletSn, string State, object userState) {
            if ((this.OpenOrColsePalletOperationCompleted == null)) {
                this.OpenOrColsePalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenOrColsePalletOperationCompleted);
            }
            this.InvokeAsync("OpenOrColsePallet", new object[] {
                        PalletSn,
                        State}, this.OpenOrColsePalletOperationCompleted, userState);
        }
        
        private void OnOpenOrColsePalletOperationCompleted(object arg) {
            if ((this.OpenOrColsePalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenOrColsePalletCompleted(this, new OpenOrColsePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/OpenOrCloseBox", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpenOrCloseBox(string BoxSn, string State, string Weight, string Remark) {
            object[] results = this.Invoke("OpenOrCloseBox", new object[] {
                        BoxSn,
                        State,
                        Weight,
                        Remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OpenOrCloseBoxAsync(string BoxSn, string State, string Weight, string Remark) {
            this.OpenOrCloseBoxAsync(BoxSn, State, Weight, Remark, null);
        }
        
        /// <remarks/>
        public void OpenOrCloseBoxAsync(string BoxSn, string State, string Weight, string Remark, object userState) {
            if ((this.OpenOrCloseBoxOperationCompleted == null)) {
                this.OpenOrCloseBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenOrCloseBoxOperationCompleted);
            }
            this.InvokeAsync("OpenOrCloseBox", new object[] {
                        BoxSn,
                        State,
                        Weight,
                        Remark}, this.OpenOrCloseBoxOperationCompleted, userState);
        }
        
        private void OnOpenOrCloseBoxOperationCompleted(object arg) {
            if ((this.OpenOrCloseBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenOrCloseBoxCompleted(this, new OpenOrCloseBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckUser", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckUser(string UserCode, string UserPass) {
            object[] results = this.Invoke("CheckUser", new object[] {
                        UserCode,
                        UserPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserAsync(string UserCode, string UserPass) {
            this.CheckUserAsync(UserCode, UserPass, null);
        }
        
        /// <remarks/>
        public void CheckUserAsync(string UserCode, string UserPass, object userState) {
            if ((this.CheckUserOperationCompleted == null)) {
                this.CheckUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserOperationCompleted);
            }
            this.InvokeAsync("CheckUser", new object[] {
                        UserCode,
                        UserPass}, this.CheckUserOperationCompleted, userState);
        }
        
        private void OnCheckUserOperationCompleted(object arg) {
            if ((this.CheckUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserCompleted(this, new CheckUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetImages", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetImages(string strSN, string startTime, string endTime, string strMark) {
            object[] results = this.Invoke("GetImages", new object[] {
                        strSN,
                        startTime,
                        endTime,
                        strMark});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetImagesAsync(string strSN, string startTime, string endTime, string strMark) {
            this.GetImagesAsync(strSN, startTime, endTime, strMark, null);
        }
        
        /// <remarks/>
        public void GetImagesAsync(string strSN, string startTime, string endTime, string strMark, object userState) {
            if ((this.GetImagesOperationCompleted == null)) {
                this.GetImagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImagesOperationCompleted);
            }
            this.InvokeAsync("GetImages", new object[] {
                        strSN,
                        startTime,
                        endTime,
                        strMark}, this.GetImagesOperationCompleted, userState);
        }
        
        private void OnGetImagesOperationCompleted(object arg) {
            if ((this.GetImagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImagesCompleted(this, new GetImagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetOneImages", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetOneImages(string strSN, string fileName, string strMark) {
            object[] results = this.Invoke("GetOneImages", new object[] {
                        strSN,
                        fileName,
                        strMark});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetOneImagesAsync(string strSN, string fileName, string strMark) {
            this.GetOneImagesAsync(strSN, fileName, strMark, null);
        }
        
        /// <remarks/>
        public void GetOneImagesAsync(string strSN, string fileName, string strMark, object userState) {
            if ((this.GetOneImagesOperationCompleted == null)) {
                this.GetOneImagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOneImagesOperationCompleted);
            }
            this.InvokeAsync("GetOneImages", new object[] {
                        strSN,
                        fileName,
                        strMark}, this.GetOneImagesOperationCompleted, userState);
        }
        
        private void OnGetOneImagesOperationCompleted(object arg) {
            if ((this.GetOneImagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOneImagesCompleted(this, new GetOneImagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UploadImageFtp", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadImageFtp([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes, string fileName, string devName, string M_SN) {
            object[] results = this.Invoke("UploadImageFtp", new object[] {
                        bytes,
                        fileName,
                        devName,
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageFtpAsync(byte[] bytes, string fileName, string devName, string M_SN) {
            this.UploadImageFtpAsync(bytes, fileName, devName, M_SN, null);
        }
        
        /// <remarks/>
        public void UploadImageFtpAsync(byte[] bytes, string fileName, string devName, string M_SN, object userState) {
            if ((this.UploadImageFtpOperationCompleted == null)) {
                this.UploadImageFtpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageFtpOperationCompleted);
            }
            this.InvokeAsync("UploadImageFtp", new object[] {
                        bytes,
                        fileName,
                        devName,
                        M_SN}, this.UploadImageFtpOperationCompleted, userState);
        }
        
        private void OnUploadImageFtpOperationCompleted(object arg) {
            if ((this.UploadImageFtpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageFtpCompleted(this, new UploadImageFtpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UploadImage", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadImage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes, string fileName, string M_SN) {
            object[] results = this.Invoke("UploadImage", new object[] {
                        bytes,
                        fileName,
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageAsync(byte[] bytes, string fileName, string M_SN) {
            this.UploadImageAsync(bytes, fileName, M_SN, null);
        }
        
        /// <remarks/>
        public void UploadImageAsync(byte[] bytes, string fileName, string M_SN, object userState) {
            if ((this.UploadImageOperationCompleted == null)) {
                this.UploadImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageOperationCompleted);
            }
            this.InvokeAsync("UploadImage", new object[] {
                        bytes,
                        fileName,
                        M_SN}, this.UploadImageOperationCompleted, userState);
        }
        
        private void OnUploadImageOperationCompleted(object arg) {
            if ((this.UploadImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageCompleted(this, new UploadImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPurviewInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPurviewInfo(string userCode, string userName, string roleCode, string modelType, string org, int page, int pageCount) {
            object[] results = this.Invoke("GetPurviewInfo", new object[] {
                        userCode,
                        userName,
                        roleCode,
                        modelType,
                        org,
                        page,
                        pageCount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPurviewInfoAsync(string userCode, string userName, string roleCode, string modelType, string org, int page, int pageCount) {
            this.GetPurviewInfoAsync(userCode, userName, roleCode, modelType, org, page, pageCount, null);
        }
        
        /// <remarks/>
        public void GetPurviewInfoAsync(string userCode, string userName, string roleCode, string modelType, string org, int page, int pageCount, object userState) {
            if ((this.GetPurviewInfoOperationCompleted == null)) {
                this.GetPurviewInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPurviewInfoOperationCompleted);
            }
            this.InvokeAsync("GetPurviewInfo", new object[] {
                        userCode,
                        userName,
                        roleCode,
                        modelType,
                        org,
                        page,
                        pageCount}, this.GetPurviewInfoOperationCompleted, userState);
        }
        
        private void OnGetPurviewInfoOperationCompleted(object arg) {
            if ((this.GetPurviewInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPurviewInfoCompleted(this, new GetPurviewInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetDepartmentInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDepartmentInfo() {
            object[] results = this.Invoke("GetDepartmentInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDepartmentInfoAsync() {
            this.GetDepartmentInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetDepartmentInfoAsync(object userState) {
            if ((this.GetDepartmentInfoOperationCompleted == null)) {
                this.GetDepartmentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDepartmentInfoOperationCompleted);
            }
            this.InvokeAsync("GetDepartmentInfo", new object[0], this.GetDepartmentInfoOperationCompleted, userState);
        }
        
        private void OnGetDepartmentInfoOperationCompleted(object arg) {
            if ((this.GetDepartmentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDepartmentInfoCompleted(this, new GetDepartmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetRoleInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRoleInfo() {
            object[] results = this.Invoke("GetRoleInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleInfoAsync() {
            this.GetRoleInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetRoleInfoAsync(object userState) {
            if ((this.GetRoleInfoOperationCompleted == null)) {
                this.GetRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleInfoOperationCompleted);
            }
            this.InvokeAsync("GetRoleInfo", new object[0], this.GetRoleInfoOperationCompleted, userState);
        }
        
        private void OnGetRoleInfoOperationCompleted(object arg) {
            if ((this.GetRoleInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleInfoCompleted(this, new GetRoleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetLoginLog", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLoginLog(string userCode, string userName, string dmpCode, int page, int pageCount) {
            object[] results = this.Invoke("GetLoginLog", new object[] {
                        userCode,
                        userName,
                        dmpCode,
                        page,
                        pageCount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoginLogAsync(string userCode, string userName, string dmpCode, int page, int pageCount) {
            this.GetLoginLogAsync(userCode, userName, dmpCode, page, pageCount, null);
        }
        
        /// <remarks/>
        public void GetLoginLogAsync(string userCode, string userName, string dmpCode, int page, int pageCount, object userState) {
            if ((this.GetLoginLogOperationCompleted == null)) {
                this.GetLoginLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginLogOperationCompleted);
            }
            this.InvokeAsync("GetLoginLog", new object[] {
                        userCode,
                        userName,
                        dmpCode,
                        page,
                        pageCount}, this.GetLoginLogOperationCompleted, userState);
        }
        
        private void OnGetLoginLogOperationCompleted(object arg) {
            if ((this.GetLoginLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginLogCompleted(this, new GetLoginLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UPLOADTESTDATA", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UPLOADTESTDATA(string S_USERNO, string S_MACHINENO, int S_CHANNELNO, string S_SN, bool B_RESULT, string S_STEPNAME, string S_ERRORDESC) {
            object[] results = this.Invoke("UPLOADTESTDATA", new object[] {
                        S_USERNO,
                        S_MACHINENO,
                        S_CHANNELNO,
                        S_SN,
                        B_RESULT,
                        S_STEPNAME,
                        S_ERRORDESC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UPLOADTESTDATAAsync(string S_USERNO, string S_MACHINENO, int S_CHANNELNO, string S_SN, bool B_RESULT, string S_STEPNAME, string S_ERRORDESC) {
            this.UPLOADTESTDATAAsync(S_USERNO, S_MACHINENO, S_CHANNELNO, S_SN, B_RESULT, S_STEPNAME, S_ERRORDESC, null);
        }
        
        /// <remarks/>
        public void UPLOADTESTDATAAsync(string S_USERNO, string S_MACHINENO, int S_CHANNELNO, string S_SN, bool B_RESULT, string S_STEPNAME, string S_ERRORDESC, object userState) {
            if ((this.UPLOADTESTDATAOperationCompleted == null)) {
                this.UPLOADTESTDATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPLOADTESTDATAOperationCompleted);
            }
            this.InvokeAsync("UPLOADTESTDATA", new object[] {
                        S_USERNO,
                        S_MACHINENO,
                        S_CHANNELNO,
                        S_SN,
                        B_RESULT,
                        S_STEPNAME,
                        S_ERRORDESC}, this.UPLOADTESTDATAOperationCompleted, userState);
        }
        
        private void OnUPLOADTESTDATAOperationCompleted(object arg) {
            if ((this.UPLOADTESTDATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPLOADTESTDATACompleted(this, new UPLOADTESTDATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UPLOADBAT540TESTDATA", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UPLOADBAT540TESTDATA(string S_USERNO, string S_MACHINENO, int S_CHANNELNO, string S_SN, bool B_RESULT, string S_STEPNAME, string S_ERRORDESC) {
            object[] results = this.Invoke("UPLOADBAT540TESTDATA", new object[] {
                        S_USERNO,
                        S_MACHINENO,
                        S_CHANNELNO,
                        S_SN,
                        B_RESULT,
                        S_STEPNAME,
                        S_ERRORDESC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UPLOADBAT540TESTDATAAsync(string S_USERNO, string S_MACHINENO, int S_CHANNELNO, string S_SN, bool B_RESULT, string S_STEPNAME, string S_ERRORDESC) {
            this.UPLOADBAT540TESTDATAAsync(S_USERNO, S_MACHINENO, S_CHANNELNO, S_SN, B_RESULT, S_STEPNAME, S_ERRORDESC, null);
        }
        
        /// <remarks/>
        public void UPLOADBAT540TESTDATAAsync(string S_USERNO, string S_MACHINENO, int S_CHANNELNO, string S_SN, bool B_RESULT, string S_STEPNAME, string S_ERRORDESC, object userState) {
            if ((this.UPLOADBAT540TESTDATAOperationCompleted == null)) {
                this.UPLOADBAT540TESTDATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPLOADBAT540TESTDATAOperationCompleted);
            }
            this.InvokeAsync("UPLOADBAT540TESTDATA", new object[] {
                        S_USERNO,
                        S_MACHINENO,
                        S_CHANNELNO,
                        S_SN,
                        B_RESULT,
                        S_STEPNAME,
                        S_ERRORDESC}, this.UPLOADBAT540TESTDATAOperationCompleted, userState);
        }
        
        private void OnUPLOADBAT540TESTDATAOperationCompleted(object arg) {
            if ((this.UPLOADBAT540TESTDATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPLOADBAT540TESTDATACompleted(this, new UPLOADBAT540TESTDATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetWipPackSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWipPackSn(string packSn) {
            object[] results = this.Invoke("GetWipPackSn", new object[] {
                        packSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWipPackSnAsync(string packSn) {
            this.GetWipPackSnAsync(packSn, null);
        }
        
        /// <remarks/>
        public void GetWipPackSnAsync(string packSn, object userState) {
            if ((this.GetWipPackSnOperationCompleted == null)) {
                this.GetWipPackSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWipPackSnOperationCompleted);
            }
            this.InvokeAsync("GetWipPackSn", new object[] {
                        packSn}, this.GetWipPackSnOperationCompleted, userState);
        }
        
        private void OnGetWipPackSnOperationCompleted(object arg) {
            if ((this.GetWipPackSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWipPackSnCompleted(this, new GetWipPackSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetIfactoryWipPackSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIfactoryWipPackSn(string packSn) {
            object[] results = this.Invoke("GetIfactoryWipPackSn", new object[] {
                        packSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIfactoryWipPackSnAsync(string packSn) {
            this.GetIfactoryWipPackSnAsync(packSn, null);
        }
        
        /// <remarks/>
        public void GetIfactoryWipPackSnAsync(string packSn, object userState) {
            if ((this.GetIfactoryWipPackSnOperationCompleted == null)) {
                this.GetIfactoryWipPackSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIfactoryWipPackSnOperationCompleted);
            }
            this.InvokeAsync("GetIfactoryWipPackSn", new object[] {
                        packSn}, this.GetIfactoryWipPackSnOperationCompleted, userState);
        }
        
        private void OnGetIfactoryWipPackSnOperationCompleted(object arg) {
            if ((this.GetIfactoryWipPackSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIfactoryWipPackSnCompleted(this, new GetIfactoryWipPackSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindCellSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindCellSN(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            object[] results = this.Invoke("BindCellSN", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindCellSNAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            this.BindCellSNAsync(CellSN, PackSN, PcmSN, MO, EmpNO, CellCode, PcmCode, null);
        }
        
        /// <remarks/>
        public void BindCellSNAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, object userState) {
            if ((this.BindCellSNOperationCompleted == null)) {
                this.BindCellSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindCellSNOperationCompleted);
            }
            this.InvokeAsync("BindCellSN", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode}, this.BindCellSNOperationCompleted, userState);
        }
        
        private void OnBindCellSNOperationCompleted(object arg) {
            if ((this.BindCellSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindCellSNCompleted(this, new BindCellSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindCellMore", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindCellMore(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, int ControlNumber) {
            object[] results = this.Invoke("BindCellMore", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode,
                        ControlNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindCellMoreAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, int ControlNumber) {
            this.BindCellMoreAsync(CellSN, PackSN, PcmSN, MO, EmpNO, CellCode, PcmCode, ControlNumber, null);
        }
        
        /// <remarks/>
        public void BindCellMoreAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, int ControlNumber, object userState) {
            if ((this.BindCellMoreOperationCompleted == null)) {
                this.BindCellMoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindCellMoreOperationCompleted);
            }
            this.InvokeAsync("BindCellMore", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode,
                        ControlNumber}, this.BindCellMoreOperationCompleted, userState);
        }
        
        private void OnBindCellMoreOperationCompleted(object arg) {
            if ((this.BindCellMoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindCellMoreCompleted(this, new BindCellMoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindOneCell", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindOneCell(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            object[] results = this.Invoke("BindOneCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindOneCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            this.BindOneCellAsync(CellSN, PackSN, PcmSN, MO, EmpNO, CellCode, PcmCode, null);
        }
        
        /// <remarks/>
        public void BindOneCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, object userState) {
            if ((this.BindOneCellOperationCompleted == null)) {
                this.BindOneCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindOneCellOperationCompleted);
            }
            this.InvokeAsync("BindOneCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode}, this.BindOneCellOperationCompleted, userState);
        }
        
        private void OnBindOneCellOperationCompleted(object arg) {
            if ((this.BindOneCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindOneCellCompleted(this, new BindOneCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindTwoCell", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindTwoCell(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            object[] results = this.Invoke("BindTwoCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindTwoCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            this.BindTwoCellAsync(CellSN, PackSN, PcmSN, MO, EmpNO, CellCode, PcmCode, null);
        }
        
        /// <remarks/>
        public void BindTwoCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, object userState) {
            if ((this.BindTwoCellOperationCompleted == null)) {
                this.BindTwoCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindTwoCellOperationCompleted);
            }
            this.InvokeAsync("BindTwoCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode}, this.BindTwoCellOperationCompleted, userState);
        }
        
        private void OnBindTwoCellOperationCompleted(object arg) {
            if ((this.BindTwoCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindTwoCellCompleted(this, new BindTwoCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindThreeCell", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindThreeCell(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            object[] results = this.Invoke("BindThreeCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindThreeCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            this.BindThreeCellAsync(CellSN, PackSN, PcmSN, MO, EmpNO, CellCode, PcmCode, null);
        }
        
        /// <remarks/>
        public void BindThreeCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, object userState) {
            if ((this.BindThreeCellOperationCompleted == null)) {
                this.BindThreeCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindThreeCellOperationCompleted);
            }
            this.InvokeAsync("BindThreeCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode}, this.BindThreeCellOperationCompleted, userState);
        }
        
        private void OnBindThreeCellOperationCompleted(object arg) {
            if ((this.BindThreeCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindThreeCellCompleted(this, new BindThreeCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindFourCell", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindFourCell(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            object[] results = this.Invoke("BindFourCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindFourCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode) {
            this.BindFourCellAsync(CellSN, PackSN, PcmSN, MO, EmpNO, CellCode, PcmCode, null);
        }
        
        /// <remarks/>
        public void BindFourCellAsync(string[] CellSN, string PackSN, string PcmSN, string MO, string EmpNO, string CellCode, string PcmCode, object userState) {
            if ((this.BindFourCellOperationCompleted == null)) {
                this.BindFourCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindFourCellOperationCompleted);
            }
            this.InvokeAsync("BindFourCell", new object[] {
                        CellSN,
                        PackSN,
                        PcmSN,
                        MO,
                        EmpNO,
                        CellCode,
                        PcmCode}, this.BindFourCellOperationCompleted, userState);
        }
        
        private void OnBindFourCellOperationCompleted(object arg) {
            if ((this.BindFourCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindFourCellCompleted(this, new BindFourCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindPCMPack", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindPCMPack(string PACKSN, string PCMSN, string M_USERNO, string M_MACHINENO) {
            object[] results = this.Invoke("BindPCMPack", new object[] {
                        PACKSN,
                        PCMSN,
                        M_USERNO,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindPCMPackAsync(string PACKSN, string PCMSN, string M_USERNO, string M_MACHINENO) {
            this.BindPCMPackAsync(PACKSN, PCMSN, M_USERNO, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void BindPCMPackAsync(string PACKSN, string PCMSN, string M_USERNO, string M_MACHINENO, object userState) {
            if ((this.BindPCMPackOperationCompleted == null)) {
                this.BindPCMPackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindPCMPackOperationCompleted);
            }
            this.InvokeAsync("BindPCMPack", new object[] {
                        PACKSN,
                        PCMSN,
                        M_USERNO,
                        M_MACHINENO}, this.BindPCMPackOperationCompleted, userState);
        }
        
        private void OnBindPCMPackOperationCompleted(object arg) {
            if ((this.BindPCMPackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindPCMPackCompleted(this, new BindPCMPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindPCMCell", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindPCMCell(string PCMSN, string CELLSN, string M_USERNO, string M_MACHINENO) {
            object[] results = this.Invoke("BindPCMCell", new object[] {
                        PCMSN,
                        CELLSN,
                        M_USERNO,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindPCMCellAsync(string PCMSN, string CELLSN, string M_USERNO, string M_MACHINENO) {
            this.BindPCMCellAsync(PCMSN, CELLSN, M_USERNO, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void BindPCMCellAsync(string PCMSN, string CELLSN, string M_USERNO, string M_MACHINENO, object userState) {
            if ((this.BindPCMCellOperationCompleted == null)) {
                this.BindPCMCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindPCMCellOperationCompleted);
            }
            this.InvokeAsync("BindPCMCell", new object[] {
                        PCMSN,
                        CELLSN,
                        M_USERNO,
                        M_MACHINENO}, this.BindPCMCellOperationCompleted, userState);
        }
        
        private void OnBindPCMCellOperationCompleted(object arg) {
            if ((this.BindPCMCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindPCMCellCompleted(this, new BindPCMCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PCMPackLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PCMPackLink(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO) {
            object[] results = this.Invoke("PCMPackLink", new object[] {
                        PCMSN,
                        Pack,
                        BurnSn,
                        M_USERNO,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PCMPackLinkAsync(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO) {
            this.PCMPackLinkAsync(PCMSN, Pack, BurnSn, M_USERNO, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void PCMPackLinkAsync(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO, object userState) {
            if ((this.PCMPackLinkOperationCompleted == null)) {
                this.PCMPackLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPCMPackLinkOperationCompleted);
            }
            this.InvokeAsync("PCMPackLink", new object[] {
                        PCMSN,
                        Pack,
                        BurnSn,
                        M_USERNO,
                        M_MACHINENO}, this.PCMPackLinkOperationCompleted, userState);
        }
        
        private void OnPCMPackLinkOperationCompleted(object arg) {
            if ((this.PCMPackLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PCMPackLinkCompleted(this, new PCMPackLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PCMPackBurnLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PCMPackBurnLink(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO) {
            object[] results = this.Invoke("PCMPackBurnLink", new object[] {
                        PCMSN,
                        Pack,
                        BurnSn,
                        M_USERNO,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PCMPackBurnLinkAsync(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO) {
            this.PCMPackBurnLinkAsync(PCMSN, Pack, BurnSn, M_USERNO, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void PCMPackBurnLinkAsync(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO, object userState) {
            if ((this.PCMPackBurnLinkOperationCompleted == null)) {
                this.PCMPackBurnLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPCMPackBurnLinkOperationCompleted);
            }
            this.InvokeAsync("PCMPackBurnLink", new object[] {
                        PCMSN,
                        Pack,
                        BurnSn,
                        M_USERNO,
                        M_MACHINENO}, this.PCMPackBurnLinkOperationCompleted, userState);
        }
        
        private void OnPCMPackBurnLinkOperationCompleted(object arg) {
            if ((this.PCMPackBurnLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PCMPackBurnLinkCompleted(this, new PCMPackBurnLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCellSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCellSn(string PCM) {
            object[] results = this.Invoke("GetCellSn", new object[] {
                        PCM});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellSnAsync(string PCM) {
            this.GetCellSnAsync(PCM, null);
        }
        
        /// <remarks/>
        public void GetCellSnAsync(string PCM, object userState) {
            if ((this.GetCellSnOperationCompleted == null)) {
                this.GetCellSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellSnOperationCompleted);
            }
            this.InvokeAsync("GetCellSn", new object[] {
                        PCM}, this.GetCellSnOperationCompleted, userState);
        }
        
        private void OnGetCellSnOperationCompleted(object arg) {
            if ((this.GetCellSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellSnCompleted(this, new GetCellSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SaveLogInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveLogInfo(int[] intList, string line, string group_name) {
            object[] results = this.Invoke("SaveLogInfo", new object[] {
                        intList,
                        line,
                        group_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveLogInfoAsync(int[] intList, string line, string group_name) {
            this.SaveLogInfoAsync(intList, line, group_name, null);
        }
        
        /// <remarks/>
        public void SaveLogInfoAsync(int[] intList, string line, string group_name, object userState) {
            if ((this.SaveLogInfoOperationCompleted == null)) {
                this.SaveLogInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLogInfoOperationCompleted);
            }
            this.InvokeAsync("SaveLogInfo", new object[] {
                        intList,
                        line,
                        group_name}, this.SaveLogInfoOperationCompleted, userState);
        }
        
        private void OnSaveLogInfoOperationCompleted(object arg) {
            if ((this.SaveLogInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLogInfoCompleted(this, new SaveLogInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckCellSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckCellSN(string CellSN, string CellCode) {
            object[] results = this.Invoke("CheckCellSN", new object[] {
                        CellSN,
                        CellCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCellSNAsync(string CellSN, string CellCode) {
            this.CheckCellSNAsync(CellSN, CellCode, null);
        }
        
        /// <remarks/>
        public void CheckCellSNAsync(string CellSN, string CellCode, object userState) {
            if ((this.CheckCellSNOperationCompleted == null)) {
                this.CheckCellSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCellSNOperationCompleted);
            }
            this.InvokeAsync("CheckCellSN", new object[] {
                        CellSN,
                        CellCode}, this.CheckCellSNOperationCompleted, userState);
        }
        
        private void OnCheckCellSNOperationCompleted(object arg) {
            if ((this.CheckCellSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCellSNCompleted(this, new CheckCellSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCellTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCellTestData(string CellSN) {
            object[] results = this.Invoke("GetCellTestData", new object[] {
                        CellSN});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellTestDataAsync(string CellSN) {
            this.GetCellTestDataAsync(CellSN, null);
        }
        
        /// <remarks/>
        public void GetCellTestDataAsync(string CellSN, object userState) {
            if ((this.GetCellTestDataOperationCompleted == null)) {
                this.GetCellTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellTestDataOperationCompleted);
            }
            this.InvokeAsync("GetCellTestData", new object[] {
                        CellSN}, this.GetCellTestDataOperationCompleted, userState);
        }
        
        private void OnGetCellTestDataOperationCompleted(object arg) {
            if ((this.GetCellTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellTestDataCompleted(this, new GetCellTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UploadCellTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadCellTestData(string M_SN, string DEVICE_NO, string MO_NO, string EMP_NO, string[] TEST_DATA, string TEST_RESULT) {
            object[] results = this.Invoke("UploadCellTestData", new object[] {
                        M_SN,
                        DEVICE_NO,
                        MO_NO,
                        EMP_NO,
                        TEST_DATA,
                        TEST_RESULT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCellTestDataAsync(string M_SN, string DEVICE_NO, string MO_NO, string EMP_NO, string[] TEST_DATA, string TEST_RESULT) {
            this.UploadCellTestDataAsync(M_SN, DEVICE_NO, MO_NO, EMP_NO, TEST_DATA, TEST_RESULT, null);
        }
        
        /// <remarks/>
        public void UploadCellTestDataAsync(string M_SN, string DEVICE_NO, string MO_NO, string EMP_NO, string[] TEST_DATA, string TEST_RESULT, object userState) {
            if ((this.UploadCellTestDataOperationCompleted == null)) {
                this.UploadCellTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCellTestDataOperationCompleted);
            }
            this.InvokeAsync("UploadCellTestData", new object[] {
                        M_SN,
                        DEVICE_NO,
                        MO_NO,
                        EMP_NO,
                        TEST_DATA,
                        TEST_RESULT}, this.UploadCellTestDataOperationCompleted, userState);
        }
        
        private void OnUploadCellTestDataOperationCompleted(object arg) {
            if ((this.UploadCellTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCellTestDataCompleted(this, new UploadCellTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckPCMSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckPCMSN(string PCMSN) {
            object[] results = this.Invoke("CheckPCMSN", new object[] {
                        PCMSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPCMSNAsync(string PCMSN) {
            this.CheckPCMSNAsync(PCMSN, null);
        }
        
        /// <remarks/>
        public void CheckPCMSNAsync(string PCMSN, object userState) {
            if ((this.CheckPCMSNOperationCompleted == null)) {
                this.CheckPCMSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPCMSNOperationCompleted);
            }
            this.InvokeAsync("CheckPCMSN", new object[] {
                        PCMSN}, this.CheckPCMSNOperationCompleted, userState);
        }
        
        private void OnCheckPCMSNOperationCompleted(object arg) {
            if ((this.CheckPCMSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPCMSNCompleted(this, new CheckPCMSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindPackPCM", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindPackPCM(string PCMSN, string PACKSN, string M_USERNO, string M_MACHINENO, string MO_Number) {
            object[] results = this.Invoke("BindPackPCM", new object[] {
                        PCMSN,
                        PACKSN,
                        M_USERNO,
                        M_MACHINENO,
                        MO_Number});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindPackPCMAsync(string PCMSN, string PACKSN, string M_USERNO, string M_MACHINENO, string MO_Number) {
            this.BindPackPCMAsync(PCMSN, PACKSN, M_USERNO, M_MACHINENO, MO_Number, null);
        }
        
        /// <remarks/>
        public void BindPackPCMAsync(string PCMSN, string PACKSN, string M_USERNO, string M_MACHINENO, string MO_Number, object userState) {
            if ((this.BindPackPCMOperationCompleted == null)) {
                this.BindPackPCMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindPackPCMOperationCompleted);
            }
            this.InvokeAsync("BindPackPCM", new object[] {
                        PCMSN,
                        PACKSN,
                        M_USERNO,
                        M_MACHINENO,
                        MO_Number}, this.BindPackPCMOperationCompleted, userState);
        }
        
        private void OnBindPackPCMOperationCompleted(object arg) {
            if ((this.BindPackPCMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindPackPCMCompleted(this, new BindPackPCMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/WipCellTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WipCellTestData(string CELL_SN, string CELL_BATCH, string ITEM_VALUE, string M_MACHINENO, string M_USER, string M_RESULT, string M_ERROR) {
            object[] results = this.Invoke("WipCellTestData", new object[] {
                        CELL_SN,
                        CELL_BATCH,
                        ITEM_VALUE,
                        M_MACHINENO,
                        M_USER,
                        M_RESULT,
                        M_ERROR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WipCellTestDataAsync(string CELL_SN, string CELL_BATCH, string ITEM_VALUE, string M_MACHINENO, string M_USER, string M_RESULT, string M_ERROR) {
            this.WipCellTestDataAsync(CELL_SN, CELL_BATCH, ITEM_VALUE, M_MACHINENO, M_USER, M_RESULT, M_ERROR, null);
        }
        
        /// <remarks/>
        public void WipCellTestDataAsync(string CELL_SN, string CELL_BATCH, string ITEM_VALUE, string M_MACHINENO, string M_USER, string M_RESULT, string M_ERROR, object userState) {
            if ((this.WipCellTestDataOperationCompleted == null)) {
                this.WipCellTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWipCellTestDataOperationCompleted);
            }
            this.InvokeAsync("WipCellTestData", new object[] {
                        CELL_SN,
                        CELL_BATCH,
                        ITEM_VALUE,
                        M_MACHINENO,
                        M_USER,
                        M_RESULT,
                        M_ERROR}, this.WipCellTestDataOperationCompleted, userState);
        }
        
        private void OnWipCellTestDataOperationCompleted(object arg) {
            if ((this.WipCellTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WipCellTestDataCompleted(this, new WipCellTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTestData(string CELL_SN, string TEST_ITEM) {
            object[] results = this.Invoke("GetTestData", new object[] {
                        CELL_SN,
                        TEST_ITEM});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestDataAsync(string CELL_SN, string TEST_ITEM) {
            this.GetTestDataAsync(CELL_SN, TEST_ITEM, null);
        }
        
        /// <remarks/>
        public void GetTestDataAsync(string CELL_SN, string TEST_ITEM, object userState) {
            if ((this.GetTestDataOperationCompleted == null)) {
                this.GetTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestDataOperationCompleted);
            }
            this.InvokeAsync("GetTestData", new object[] {
                        CELL_SN,
                        TEST_ITEM}, this.GetTestDataOperationCompleted, userState);
        }
        
        private void OnGetTestDataOperationCompleted(object arg) {
            if ((this.GetTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestDataCompleted(this, new GetTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCellAgvData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCellAgvData(string CELL_BATCH, string TEST_ITEM) {
            object[] results = this.Invoke("GetCellAgvData", new object[] {
                        CELL_BATCH,
                        TEST_ITEM});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellAgvDataAsync(string CELL_BATCH, string TEST_ITEM) {
            this.GetCellAgvDataAsync(CELL_BATCH, TEST_ITEM, null);
        }
        
        /// <remarks/>
        public void GetCellAgvDataAsync(string CELL_BATCH, string TEST_ITEM, object userState) {
            if ((this.GetCellAgvDataOperationCompleted == null)) {
                this.GetCellAgvDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellAgvDataOperationCompleted);
            }
            this.InvokeAsync("GetCellAgvData", new object[] {
                        CELL_BATCH,
                        TEST_ITEM}, this.GetCellAgvDataOperationCompleted, userState);
        }
        
        private void OnGetCellAgvDataOperationCompleted(object arg) {
            if ((this.GetCellAgvDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellAgvDataCompleted(this, new GetCellAgvDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CellGroupBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CellGroupBind(string[] cell_list, int cell_number) {
            object[] results = this.Invoke("CellGroupBind", new object[] {
                        cell_list,
                        cell_number});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CellGroupBindAsync(string[] cell_list, int cell_number) {
            this.CellGroupBindAsync(cell_list, cell_number, null);
        }
        
        /// <remarks/>
        public void CellGroupBindAsync(string[] cell_list, int cell_number, object userState) {
            if ((this.CellGroupBindOperationCompleted == null)) {
                this.CellGroupBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCellGroupBindOperationCompleted);
            }
            this.InvokeAsync("CellGroupBind", new object[] {
                        cell_list,
                        cell_number}, this.CellGroupBindOperationCompleted, userState);
        }
        
        private void OnCellGroupBindOperationCompleted(object arg) {
            if ((this.CellGroupBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CellGroupBindCompleted(this, new CellGroupBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCellGroup", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCellGroup(string Cell_Sn) {
            object[] results = this.Invoke("GetCellGroup", new object[] {
                        Cell_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellGroupAsync(string Cell_Sn) {
            this.GetCellGroupAsync(Cell_Sn, null);
        }
        
        /// <remarks/>
        public void GetCellGroupAsync(string Cell_Sn, object userState) {
            if ((this.GetCellGroupOperationCompleted == null)) {
                this.GetCellGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellGroupOperationCompleted);
            }
            this.InvokeAsync("GetCellGroup", new object[] {
                        Cell_Sn}, this.GetCellGroupOperationCompleted, userState);
        }
        
        private void OnGetCellGroupOperationCompleted(object arg) {
            if ((this.GetCellGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellGroupCompleted(this, new GetCellGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckCellGroup", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckCellGroup(int cell_count, string Cell_Sn) {
            object[] results = this.Invoke("CheckCellGroup", new object[] {
                        cell_count,
                        Cell_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCellGroupAsync(int cell_count, string Cell_Sn) {
            this.CheckCellGroupAsync(cell_count, Cell_Sn, null);
        }
        
        /// <remarks/>
        public void CheckCellGroupAsync(int cell_count, string Cell_Sn, object userState) {
            if ((this.CheckCellGroupOperationCompleted == null)) {
                this.CheckCellGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCellGroupOperationCompleted);
            }
            this.InvokeAsync("CheckCellGroup", new object[] {
                        cell_count,
                        Cell_Sn}, this.CheckCellGroupOperationCompleted, userState);
        }
        
        private void OnCheckCellGroupOperationCompleted(object arg) {
            if ((this.CheckCellGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCellGroupCompleted(this, new CheckCellGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PackLinkCellGroup", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PackLinkCellGroup(string Pack_Sn, string Cell_Sn, string user_code) {
            object[] results = this.Invoke("PackLinkCellGroup", new object[] {
                        Pack_Sn,
                        Cell_Sn,
                        user_code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PackLinkCellGroupAsync(string Pack_Sn, string Cell_Sn, string user_code) {
            this.PackLinkCellGroupAsync(Pack_Sn, Cell_Sn, user_code, null);
        }
        
        /// <remarks/>
        public void PackLinkCellGroupAsync(string Pack_Sn, string Cell_Sn, string user_code, object userState) {
            if ((this.PackLinkCellGroupOperationCompleted == null)) {
                this.PackLinkCellGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPackLinkCellGroupOperationCompleted);
            }
            this.InvokeAsync("PackLinkCellGroup", new object[] {
                        Pack_Sn,
                        Cell_Sn,
                        user_code}, this.PackLinkCellGroupOperationCompleted, userState);
        }
        
        private void OnPackLinkCellGroupOperationCompleted(object arg) {
            if ((this.PackLinkCellGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PackLinkCellGroupCompleted(this, new PackLinkCellGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CellBindPack", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CellBindPack(string Pack_Sn, string Cell_Sn) {
            object[] results = this.Invoke("CellBindPack", new object[] {
                        Pack_Sn,
                        Cell_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CellBindPackAsync(string Pack_Sn, string Cell_Sn) {
            this.CellBindPackAsync(Pack_Sn, Cell_Sn, null);
        }
        
        /// <remarks/>
        public void CellBindPackAsync(string Pack_Sn, string Cell_Sn, object userState) {
            if ((this.CellBindPackOperationCompleted == null)) {
                this.CellBindPackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCellBindPackOperationCompleted);
            }
            this.InvokeAsync("CellBindPack", new object[] {
                        Pack_Sn,
                        Cell_Sn}, this.CellBindPackOperationCompleted, userState);
        }
        
        private void OnCellBindPackOperationCompleted(object arg) {
            if ((this.CellBindPackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CellBindPackCompleted(this, new CellBindPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckCellGroupBindPack", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckCellGroupBindPack(string Pack_Sn, string Cell_Sn) {
            object[] results = this.Invoke("CheckCellGroupBindPack", new object[] {
                        Pack_Sn,
                        Cell_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCellGroupBindPackAsync(string Pack_Sn, string Cell_Sn) {
            this.CheckCellGroupBindPackAsync(Pack_Sn, Cell_Sn, null);
        }
        
        /// <remarks/>
        public void CheckCellGroupBindPackAsync(string Pack_Sn, string Cell_Sn, object userState) {
            if ((this.CheckCellGroupBindPackOperationCompleted == null)) {
                this.CheckCellGroupBindPackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCellGroupBindPackOperationCompleted);
            }
            this.InvokeAsync("CheckCellGroupBindPack", new object[] {
                        Pack_Sn,
                        Cell_Sn}, this.CheckCellGroupBindPackOperationCompleted, userState);
        }
        
        private void OnCheckCellGroupBindPackOperationCompleted(object arg) {
            if ((this.CheckCellGroupBindPackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCellGroupBindPackCompleted(this, new CheckCellGroupBindPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BatchInsertInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatchInsertInfo(string M_EMPNO, string M_MACHINENO, string[] M_PRODUCT_SN, string[] M_TEST_ITEM, string[] M_TEST_VALUE, string[] M_TEST_RESULT) {
            object[] results = this.Invoke("BatchInsertInfo", new object[] {
                        M_EMPNO,
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_TEST_ITEM,
                        M_TEST_VALUE,
                        M_TEST_RESULT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchInsertInfoAsync(string M_EMPNO, string M_MACHINENO, string[] M_PRODUCT_SN, string[] M_TEST_ITEM, string[] M_TEST_VALUE, string[] M_TEST_RESULT) {
            this.BatchInsertInfoAsync(M_EMPNO, M_MACHINENO, M_PRODUCT_SN, M_TEST_ITEM, M_TEST_VALUE, M_TEST_RESULT, null);
        }
        
        /// <remarks/>
        public void BatchInsertInfoAsync(string M_EMPNO, string M_MACHINENO, string[] M_PRODUCT_SN, string[] M_TEST_ITEM, string[] M_TEST_VALUE, string[] M_TEST_RESULT, object userState) {
            if ((this.BatchInsertInfoOperationCompleted == null)) {
                this.BatchInsertInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchInsertInfoOperationCompleted);
            }
            this.InvokeAsync("BatchInsertInfo", new object[] {
                        M_EMPNO,
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_TEST_ITEM,
                        M_TEST_VALUE,
                        M_TEST_RESULT}, this.BatchInsertInfoOperationCompleted, userState);
        }
        
        private void OnBatchInsertInfoOperationCompleted(object arg) {
            if ((this.BatchInsertInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchInsertInfoCompleted(this, new BatchInsertInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckModuleCellBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckModuleCellBind(string ModuleSn, string MoNumber, string CellSn) {
            object[] results = this.Invoke("CheckModuleCellBind", new object[] {
                        ModuleSn,
                        MoNumber,
                        CellSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckModuleCellBindAsync(string ModuleSn, string MoNumber, string CellSn) {
            this.CheckModuleCellBindAsync(ModuleSn, MoNumber, CellSn, null);
        }
        
        /// <remarks/>
        public void CheckModuleCellBindAsync(string ModuleSn, string MoNumber, string CellSn, object userState) {
            if ((this.CheckModuleCellBindOperationCompleted == null)) {
                this.CheckModuleCellBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckModuleCellBindOperationCompleted);
            }
            this.InvokeAsync("CheckModuleCellBind", new object[] {
                        ModuleSn,
                        MoNumber,
                        CellSn}, this.CheckModuleCellBindOperationCompleted, userState);
        }
        
        private void OnCheckModuleCellBindOperationCompleted(object arg) {
            if ((this.CheckModuleCellBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckModuleCellBindCompleted(this, new CheckModuleCellBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckModuleGroupBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckModuleGroupBind(string ModuleSn, string MoNumber, string ModuleGroup) {
            object[] results = this.Invoke("CheckModuleGroupBind", new object[] {
                        ModuleSn,
                        MoNumber,
                        ModuleGroup});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckModuleGroupBindAsync(string ModuleSn, string MoNumber, string ModuleGroup) {
            this.CheckModuleGroupBindAsync(ModuleSn, MoNumber, ModuleGroup, null);
        }
        
        /// <remarks/>
        public void CheckModuleGroupBindAsync(string ModuleSn, string MoNumber, string ModuleGroup, object userState) {
            if ((this.CheckModuleGroupBindOperationCompleted == null)) {
                this.CheckModuleGroupBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckModuleGroupBindOperationCompleted);
            }
            this.InvokeAsync("CheckModuleGroupBind", new object[] {
                        ModuleSn,
                        MoNumber,
                        ModuleGroup}, this.CheckModuleGroupBindOperationCompleted, userState);
        }
        
        private void OnCheckModuleGroupBindOperationCompleted(object arg) {
            if ((this.CheckModuleGroupBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckModuleGroupBindCompleted(this, new CheckModuleGroupBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckPACKGroupBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckPACKGroupBind(string GroupSn, string MoNumber, string PackGroup) {
            object[] results = this.Invoke("CheckPACKGroupBind", new object[] {
                        GroupSn,
                        MoNumber,
                        PackGroup});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPACKGroupBindAsync(string GroupSn, string MoNumber, string PackGroup) {
            this.CheckPACKGroupBindAsync(GroupSn, MoNumber, PackGroup, null);
        }
        
        /// <remarks/>
        public void CheckPACKGroupBindAsync(string GroupSn, string MoNumber, string PackGroup, object userState) {
            if ((this.CheckPACKGroupBindOperationCompleted == null)) {
                this.CheckPACKGroupBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPACKGroupBindOperationCompleted);
            }
            this.InvokeAsync("CheckPACKGroupBind", new object[] {
                        GroupSn,
                        MoNumber,
                        PackGroup}, this.CheckPACKGroupBindOperationCompleted, userState);
        }
        
        private void OnCheckPACKGroupBindOperationCompleted(object arg) {
            if ((this.CheckPACKGroupBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPACKGroupBindCompleted(this, new CheckPACKGroupBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ModuleGroupBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ModuleGroupBind(string module_sn, string module_group, string user_code, string mo_number, string device_sn) {
            object[] results = this.Invoke("ModuleGroupBind", new object[] {
                        module_sn,
                        module_group,
                        user_code,
                        mo_number,
                        device_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ModuleGroupBindAsync(string module_sn, string module_group, string user_code, string mo_number, string device_sn) {
            this.ModuleGroupBindAsync(module_sn, module_group, user_code, mo_number, device_sn, null);
        }
        
        /// <remarks/>
        public void ModuleGroupBindAsync(string module_sn, string module_group, string user_code, string mo_number, string device_sn, object userState) {
            if ((this.ModuleGroupBindOperationCompleted == null)) {
                this.ModuleGroupBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModuleGroupBindOperationCompleted);
            }
            this.InvokeAsync("ModuleGroupBind", new object[] {
                        module_sn,
                        module_group,
                        user_code,
                        mo_number,
                        device_sn}, this.ModuleGroupBindOperationCompleted, userState);
        }
        
        private void OnModuleGroupBindOperationCompleted(object arg) {
            if ((this.ModuleGroupBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModuleGroupBindCompleted(this, new ModuleGroupBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PackGroupBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PackGroupBind(string group_sn, string pack_group, string user_code, string mo_number, string device_sn) {
            object[] results = this.Invoke("PackGroupBind", new object[] {
                        group_sn,
                        pack_group,
                        user_code,
                        mo_number,
                        device_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PackGroupBindAsync(string group_sn, string pack_group, string user_code, string mo_number, string device_sn) {
            this.PackGroupBindAsync(group_sn, pack_group, user_code, mo_number, device_sn, null);
        }
        
        /// <remarks/>
        public void PackGroupBindAsync(string group_sn, string pack_group, string user_code, string mo_number, string device_sn, object userState) {
            if ((this.PackGroupBindOperationCompleted == null)) {
                this.PackGroupBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPackGroupBindOperationCompleted);
            }
            this.InvokeAsync("PackGroupBind", new object[] {
                        group_sn,
                        pack_group,
                        user_code,
                        mo_number,
                        device_sn}, this.PackGroupBindOperationCompleted, userState);
        }
        
        private void OnPackGroupBindOperationCompleted(object arg) {
            if ((this.PackGroupBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PackGroupBindCompleted(this, new PackGroupBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ModuleCellBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ModuleCellBind(string module_sn, string cell_sn, string user_code, string mo_number, string device_sn) {
            object[] results = this.Invoke("ModuleCellBind", new object[] {
                        module_sn,
                        cell_sn,
                        user_code,
                        mo_number,
                        device_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ModuleCellBindAsync(string module_sn, string cell_sn, string user_code, string mo_number, string device_sn) {
            this.ModuleCellBindAsync(module_sn, cell_sn, user_code, mo_number, device_sn, null);
        }
        
        /// <remarks/>
        public void ModuleCellBindAsync(string module_sn, string cell_sn, string user_code, string mo_number, string device_sn, object userState) {
            if ((this.ModuleCellBindOperationCompleted == null)) {
                this.ModuleCellBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModuleCellBindOperationCompleted);
            }
            this.InvokeAsync("ModuleCellBind", new object[] {
                        module_sn,
                        cell_sn,
                        user_code,
                        mo_number,
                        device_sn}, this.ModuleCellBindOperationCompleted, userState);
        }
        
        private void OnModuleCellBindOperationCompleted(object arg) {
            if ((this.ModuleCellBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModuleCellBindCompleted(this, new ModuleCellBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ExecuteNonQuery", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteNonQuery(string sql) {
            object[] results = this.Invoke("ExecuteNonQuery", new object[] {
                        sql});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string sql) {
            this.ExecuteNonQueryAsync(sql, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string sql, object userState) {
            if ((this.ExecuteNonQueryOperationCompleted == null)) {
                this.ExecuteNonQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQuery", new object[] {
                        sql}, this.ExecuteNonQueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonQueryOperationCompleted(object arg) {
            if ((this.ExecuteNonQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQueryCompleted(this, new ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ExecuteNonQueryConn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteNonQueryConn(string sql, string Conn) {
            object[] results = this.Invoke("ExecuteNonQueryConn", new object[] {
                        sql,
                        Conn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQueryConnAsync(string sql, string Conn) {
            this.ExecuteNonQueryConnAsync(sql, Conn, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQueryConnAsync(string sql, string Conn, object userState) {
            if ((this.ExecuteNonQueryConnOperationCompleted == null)) {
                this.ExecuteNonQueryConnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryConnOperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQueryConn", new object[] {
                        sql,
                        Conn}, this.ExecuteNonQueryConnOperationCompleted, userState);
        }
        
        private void OnExecuteNonQueryConnOperationCompleted(object arg) {
            if ((this.ExecuteNonQueryConnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQueryConnCompleted(this, new ExecuteNonQueryConnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/LargeSmallPanelLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LargeSmallPanelLink(string largePanel, string smallPall, string userCode) {
            object[] results = this.Invoke("LargeSmallPanelLink", new object[] {
                        largePanel,
                        smallPall,
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LargeSmallPanelLinkAsync(string largePanel, string smallPall, string userCode) {
            this.LargeSmallPanelLinkAsync(largePanel, smallPall, userCode, null);
        }
        
        /// <remarks/>
        public void LargeSmallPanelLinkAsync(string largePanel, string smallPall, string userCode, object userState) {
            if ((this.LargeSmallPanelLinkOperationCompleted == null)) {
                this.LargeSmallPanelLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLargeSmallPanelLinkOperationCompleted);
            }
            this.InvokeAsync("LargeSmallPanelLink", new object[] {
                        largePanel,
                        smallPall,
                        userCode}, this.LargeSmallPanelLinkOperationCompleted, userState);
        }
        
        private void OnLargeSmallPanelLinkOperationCompleted(object arg) {
            if ((this.LargeSmallPanelLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LargeSmallPanelLinkCompleted(this, new LargeSmallPanelLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSmallPanelAisle", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSmallPanelAisle(string largePanel) {
            object[] results = this.Invoke("GetSmallPanelAisle", new object[] {
                        largePanel});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSmallPanelAisleAsync(string largePanel) {
            this.GetSmallPanelAisleAsync(largePanel, null);
        }
        
        /// <remarks/>
        public void GetSmallPanelAisleAsync(string largePanel, object userState) {
            if ((this.GetSmallPanelAisleOperationCompleted == null)) {
                this.GetSmallPanelAisleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmallPanelAisleOperationCompleted);
            }
            this.InvokeAsync("GetSmallPanelAisle", new object[] {
                        largePanel}, this.GetSmallPanelAisleOperationCompleted, userState);
        }
        
        private void OnGetSmallPanelAisleOperationCompleted(object arg) {
            if ((this.GetSmallPanelAisleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSmallPanelAisleCompleted(this, new GetSmallPanelAisleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetItemRule", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemRule(string ItemCode) {
            object[] results = this.Invoke("GetItemRule", new object[] {
                        ItemCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemRuleAsync(string ItemCode) {
            this.GetItemRuleAsync(ItemCode, null);
        }
        
        /// <remarks/>
        public void GetItemRuleAsync(string ItemCode, object userState) {
            if ((this.GetItemRuleOperationCompleted == null)) {
                this.GetItemRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemRuleOperationCompleted);
            }
            this.InvokeAsync("GetItemRule", new object[] {
                        ItemCode}, this.GetItemRuleOperationCompleted, userState);
        }
        
        private void OnGetItemRuleOperationCompleted(object arg) {
            if ((this.GetItemRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemRuleCompleted(this, new GetItemRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetTestDateTime", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTestDateTime(string device, string product_sn) {
            object[] results = this.Invoke("GetTestDateTime", new object[] {
                        device,
                        product_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestDateTimeAsync(string device, string product_sn) {
            this.GetTestDateTimeAsync(device, product_sn, null);
        }
        
        /// <remarks/>
        public void GetTestDateTimeAsync(string device, string product_sn, object userState) {
            if ((this.GetTestDateTimeOperationCompleted == null)) {
                this.GetTestDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestDateTimeOperationCompleted);
            }
            this.InvokeAsync("GetTestDateTime", new object[] {
                        device,
                        product_sn}, this.GetTestDateTimeOperationCompleted, userState);
        }
        
        private void OnGetTestDateTimeOperationCompleted(object arg) {
            if ((this.GetTestDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestDateTimeCompleted(this, new GetTestDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckTestResult", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckTestResult(string productSn, string deviceSN) {
            object[] results = this.Invoke("CheckTestResult", new object[] {
                        productSn,
                        deviceSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTestResultAsync(string productSn, string deviceSN) {
            this.CheckTestResultAsync(productSn, deviceSN, null);
        }
        
        /// <remarks/>
        public void CheckTestResultAsync(string productSn, string deviceSN, object userState) {
            if ((this.CheckTestResultOperationCompleted == null)) {
                this.CheckTestResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTestResultOperationCompleted);
            }
            this.InvokeAsync("CheckTestResult", new object[] {
                        productSn,
                        deviceSN}, this.CheckTestResultOperationCompleted, userState);
        }
        
        private void OnCheckTestResultOperationCompleted(object arg) {
            if ((this.CheckTestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTestResultCompleted(this, new CheckTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckTestResOK", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckTestResOK(string productSn, string deviceSN) {
            object[] results = this.Invoke("CheckTestResOK", new object[] {
                        productSn,
                        deviceSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTestResOKAsync(string productSn, string deviceSN) {
            this.CheckTestResOKAsync(productSn, deviceSN, null);
        }
        
        /// <remarks/>
        public void CheckTestResOKAsync(string productSn, string deviceSN, object userState) {
            if ((this.CheckTestResOKOperationCompleted == null)) {
                this.CheckTestResOKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTestResOKOperationCompleted);
            }
            this.InvokeAsync("CheckTestResOK", new object[] {
                        productSn,
                        deviceSN}, this.CheckTestResOKOperationCompleted, userState);
        }
        
        private void OnCheckTestResOKOperationCompleted(object arg) {
            if ((this.CheckTestResOKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTestResOKCompleted(this, new CheckTestResOKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductItemValue", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductItemValue(string productSn, string itemName) {
            object[] results = this.Invoke("GetProductItemValue", new object[] {
                        productSn,
                        itemName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductItemValueAsync(string productSn, string itemName) {
            this.GetProductItemValueAsync(productSn, itemName, null);
        }
        
        /// <remarks/>
        public void GetProductItemValueAsync(string productSn, string itemName, object userState) {
            if ((this.GetProductItemValueOperationCompleted == null)) {
                this.GetProductItemValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductItemValueOperationCompleted);
            }
            this.InvokeAsync("GetProductItemValue", new object[] {
                        productSn,
                        itemName}, this.GetProductItemValueOperationCompleted, userState);
        }
        
        private void OnGetProductItemValueOperationCompleted(object arg) {
            if ((this.GetProductItemValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductItemValueCompleted(this, new GetProductItemValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetTestOK", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTestOK(string areaCode, string groupName, int productNum, string TestRes) {
            object[] results = this.Invoke("GetTestOK", new object[] {
                        areaCode,
                        groupName,
                        productNum,
                        TestRes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestOKAsync(string areaCode, string groupName, int productNum, string TestRes) {
            this.GetTestOKAsync(areaCode, groupName, productNum, TestRes, null);
        }
        
        /// <remarks/>
        public void GetTestOKAsync(string areaCode, string groupName, int productNum, string TestRes, object userState) {
            if ((this.GetTestOKOperationCompleted == null)) {
                this.GetTestOKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestOKOperationCompleted);
            }
            this.InvokeAsync("GetTestOK", new object[] {
                        areaCode,
                        groupName,
                        productNum,
                        TestRes}, this.GetTestOKOperationCompleted, userState);
        }
        
        private void OnGetTestOKOperationCompleted(object arg) {
            if ((this.GetTestOKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestOKCompleted(this, new GetTestOKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CellGroupLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CellGroupLink(string cell_list) {
            object[] results = this.Invoke("CellGroupLink", new object[] {
                        cell_list});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CellGroupLinkAsync(string cell_list) {
            this.CellGroupLinkAsync(cell_list, null);
        }
        
        /// <remarks/>
        public void CellGroupLinkAsync(string cell_list, object userState) {
            if ((this.CellGroupLinkOperationCompleted == null)) {
                this.CellGroupLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCellGroupLinkOperationCompleted);
            }
            this.InvokeAsync("CellGroupLink", new object[] {
                        cell_list}, this.CellGroupLinkOperationCompleted, userState);
        }
        
        private void OnCellGroupLinkOperationCompleted(object arg) {
            if ((this.CellGroupLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CellGroupLinkCompleted(this, new CellGroupLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/FittingLinkCheck", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FittingLinkCheck(string fitting_sn, string fittingType, string position, string extended2) {
            object[] results = this.Invoke("FittingLinkCheck", new object[] {
                        fitting_sn,
                        fittingType,
                        position,
                        extended2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FittingLinkCheckAsync(string fitting_sn, string fittingType, string position, string extended2) {
            this.FittingLinkCheckAsync(fitting_sn, fittingType, position, extended2, null);
        }
        
        /// <remarks/>
        public void FittingLinkCheckAsync(string fitting_sn, string fittingType, string position, string extended2, object userState) {
            if ((this.FittingLinkCheckOperationCompleted == null)) {
                this.FittingLinkCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFittingLinkCheckOperationCompleted);
            }
            this.InvokeAsync("FittingLinkCheck", new object[] {
                        fitting_sn,
                        fittingType,
                        position,
                        extended2}, this.FittingLinkCheckOperationCompleted, userState);
        }
        
        private void OnFittingLinkCheckOperationCompleted(object arg) {
            if ((this.FittingLinkCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FittingLinkCheckCompleted(this, new FittingLinkCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CellGroupLinkCheck", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CellGroupLinkCheck(string cell_sn) {
            object[] results = this.Invoke("CellGroupLinkCheck", new object[] {
                        cell_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CellGroupLinkCheckAsync(string cell_sn) {
            this.CellGroupLinkCheckAsync(cell_sn, null);
        }
        
        /// <remarks/>
        public void CellGroupLinkCheckAsync(string cell_sn, object userState) {
            if ((this.CellGroupLinkCheckOperationCompleted == null)) {
                this.CellGroupLinkCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCellGroupLinkCheckOperationCompleted);
            }
            this.InvokeAsync("CellGroupLinkCheck", new object[] {
                        cell_sn}, this.CellGroupLinkCheckOperationCompleted, userState);
        }
        
        private void OnCellGroupLinkCheckOperationCompleted(object arg) {
            if ((this.CellGroupLinkCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CellGroupLinkCheckCompleted(this, new CellGroupLinkCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSupplierDataInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSupplierDataInfo(string cell_sn) {
            object[] results = this.Invoke("GetSupplierDataInfo", new object[] {
                        cell_sn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupplierDataInfoAsync(string cell_sn) {
            this.GetSupplierDataInfoAsync(cell_sn, null);
        }
        
        /// <remarks/>
        public void GetSupplierDataInfoAsync(string cell_sn, object userState) {
            if ((this.GetSupplierDataInfoOperationCompleted == null)) {
                this.GetSupplierDataInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupplierDataInfoOperationCompleted);
            }
            this.InvokeAsync("GetSupplierDataInfo", new object[] {
                        cell_sn}, this.GetSupplierDataInfoOperationCompleted, userState);
        }
        
        private void OnGetSupplierDataInfoOperationCompleted(object arg) {
            if ((this.GetSupplierDataInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupplierDataInfoCompleted(this, new GetSupplierDataInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBatteryCellLinkInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetBatteryCellLinkInfo(string cell_sn) {
            object[] results = this.Invoke("GetBatteryCellLinkInfo", new object[] {
                        cell_sn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetBatteryCellLinkInfoAsync(string cell_sn) {
            this.GetBatteryCellLinkInfoAsync(cell_sn, null);
        }
        
        /// <remarks/>
        public void GetBatteryCellLinkInfoAsync(string cell_sn, object userState) {
            if ((this.GetBatteryCellLinkInfoOperationCompleted == null)) {
                this.GetBatteryCellLinkInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBatteryCellLinkInfoOperationCompleted);
            }
            this.InvokeAsync("GetBatteryCellLinkInfo", new object[] {
                        cell_sn}, this.GetBatteryCellLinkInfoOperationCompleted, userState);
        }
        
        private void OnGetBatteryCellLinkInfoOperationCompleted(object arg) {
            if ((this.GetBatteryCellLinkInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBatteryCellLinkInfoCompleted(this, new GetBatteryCellLinkInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/EBSMoProject", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EBSMoProject(System.Data.DataTable moProject, string messys) {
            object[] results = this.Invoke("EBSMoProject", new object[] {
                        moProject,
                        messys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EBSMoProjectAsync(System.Data.DataTable moProject, string messys) {
            this.EBSMoProjectAsync(moProject, messys, null);
        }
        
        /// <remarks/>
        public void EBSMoProjectAsync(System.Data.DataTable moProject, string messys, object userState) {
            if ((this.EBSMoProjectOperationCompleted == null)) {
                this.EBSMoProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEBSMoProjectOperationCompleted);
            }
            this.InvokeAsync("EBSMoProject", new object[] {
                        moProject,
                        messys}, this.EBSMoProjectOperationCompleted, userState);
        }
        
        private void OnEBSMoProjectOperationCompleted(object arg) {
            if ((this.EBSMoProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EBSMoProjectCompleted(this, new EBSMoProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/EBSMoNumberToMES", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EBSMoNumberToMES(System.Data.DataTable monumber, string messys) {
            object[] results = this.Invoke("EBSMoNumberToMES", new object[] {
                        monumber,
                        messys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EBSMoNumberToMESAsync(System.Data.DataTable monumber, string messys) {
            this.EBSMoNumberToMESAsync(monumber, messys, null);
        }
        
        /// <remarks/>
        public void EBSMoNumberToMESAsync(System.Data.DataTable monumber, string messys, object userState) {
            if ((this.EBSMoNumberToMESOperationCompleted == null)) {
                this.EBSMoNumberToMESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEBSMoNumberToMESOperationCompleted);
            }
            this.InvokeAsync("EBSMoNumberToMES", new object[] {
                        monumber,
                        messys}, this.EBSMoNumberToMESOperationCompleted, userState);
        }
        
        private void OnEBSMoNumberToMESOperationCompleted(object arg) {
            if ((this.EBSMoNumberToMESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EBSMoNumberToMESCompleted(this, new EBSMoNumberToMESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductTOCellSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductTOCellSn(string product) {
            object[] results = this.Invoke("GetProductTOCellSn", new object[] {
                        product});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductTOCellSnAsync(string product) {
            this.GetProductTOCellSnAsync(product, null);
        }
        
        /// <remarks/>
        public void GetProductTOCellSnAsync(string product, object userState) {
            if ((this.GetProductTOCellSnOperationCompleted == null)) {
                this.GetProductTOCellSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductTOCellSnOperationCompleted);
            }
            this.InvokeAsync("GetProductTOCellSn", new object[] {
                        product}, this.GetProductTOCellSnOperationCompleted, userState);
        }
        
        private void OnGetProductTOCellSnOperationCompleted(object arg) {
            if ((this.GetProductTOCellSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductTOCellSnCompleted(this, new GetProductTOCellSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetMotoProductTOUID", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMotoProductTOUID(string product) {
            object[] results = this.Invoke("GetMotoProductTOUID", new object[] {
                        product});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMotoProductTOUIDAsync(string product) {
            this.GetMotoProductTOUIDAsync(product, null);
        }
        
        /// <remarks/>
        public void GetMotoProductTOUIDAsync(string product, object userState) {
            if ((this.GetMotoProductTOUIDOperationCompleted == null)) {
                this.GetMotoProductTOUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMotoProductTOUIDOperationCompleted);
            }
            this.InvokeAsync("GetMotoProductTOUID", new object[] {
                        product}, this.GetMotoProductTOUIDOperationCompleted, userState);
        }
        
        private void OnGetMotoProductTOUIDOperationCompleted(object arg) {
            if ((this.GetMotoProductTOUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMotoProductTOUIDCompleted(this, new GetMotoProductTOUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetKeyToProduct", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyToProduct(string productKey, string itemCode) {
            object[] results = this.Invoke("GetKeyToProduct", new object[] {
                        productKey,
                        itemCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyToProductAsync(string productKey, string itemCode) {
            this.GetKeyToProductAsync(productKey, itemCode, null);
        }
        
        /// <remarks/>
        public void GetKeyToProductAsync(string productKey, string itemCode, object userState) {
            if ((this.GetKeyToProductOperationCompleted == null)) {
                this.GetKeyToProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyToProductOperationCompleted);
            }
            this.InvokeAsync("GetKeyToProduct", new object[] {
                        productKey,
                        itemCode}, this.GetKeyToProductOperationCompleted, userState);
        }
        
        private void OnGetKeyToProductOperationCompleted(object arg) {
            if ((this.GetKeyToProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyToProductCompleted(this, new GetKeyToProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckProductMoNumber", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckProductMoNumber(string product, string moNumber) {
            object[] results = this.Invoke("CheckProductMoNumber", new object[] {
                        product,
                        moNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckProductMoNumberAsync(string product, string moNumber) {
            this.CheckProductMoNumberAsync(product, moNumber, null);
        }
        
        /// <remarks/>
        public void CheckProductMoNumberAsync(string product, string moNumber, object userState) {
            if ((this.CheckProductMoNumberOperationCompleted == null)) {
                this.CheckProductMoNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProductMoNumberOperationCompleted);
            }
            this.InvokeAsync("CheckProductMoNumber", new object[] {
                        product,
                        moNumber}, this.CheckProductMoNumberOperationCompleted, userState);
        }
        
        private void OnCheckProductMoNumberOperationCompleted(object arg) {
            if ((this.CheckProductMoNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProductMoNumberCompleted(this, new CheckProductMoNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/LockProduct", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LockProduct(string product, string moNumber, string userCode, string errorItem) {
            object[] results = this.Invoke("LockProduct", new object[] {
                        product,
                        moNumber,
                        userCode,
                        errorItem});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LockProductAsync(string product, string moNumber, string userCode, string errorItem) {
            this.LockProductAsync(product, moNumber, userCode, errorItem, null);
        }
        
        /// <remarks/>
        public void LockProductAsync(string product, string moNumber, string userCode, string errorItem, object userState) {
            if ((this.LockProductOperationCompleted == null)) {
                this.LockProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockProductOperationCompleted);
            }
            this.InvokeAsync("LockProduct", new object[] {
                        product,
                        moNumber,
                        userCode,
                        errorItem}, this.LockProductOperationCompleted, userState);
        }
        
        private void OnLockProductOperationCompleted(object arg) {
            if ((this.LockProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockProductCompleted(this, new LockProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PCMPackBurnLinkRule", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PCMPackBurnLinkRule(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO, string ItemCode) {
            object[] results = this.Invoke("PCMPackBurnLinkRule", new object[] {
                        PCMSN,
                        Pack,
                        BurnSn,
                        M_USERNO,
                        M_MACHINENO,
                        ItemCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PCMPackBurnLinkRuleAsync(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO, string ItemCode) {
            this.PCMPackBurnLinkRuleAsync(PCMSN, Pack, BurnSn, M_USERNO, M_MACHINENO, ItemCode, null);
        }
        
        /// <remarks/>
        public void PCMPackBurnLinkRuleAsync(string PCMSN, string Pack, string BurnSn, string M_USERNO, string M_MACHINENO, string ItemCode, object userState) {
            if ((this.PCMPackBurnLinkRuleOperationCompleted == null)) {
                this.PCMPackBurnLinkRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPCMPackBurnLinkRuleOperationCompleted);
            }
            this.InvokeAsync("PCMPackBurnLinkRule", new object[] {
                        PCMSN,
                        Pack,
                        BurnSn,
                        M_USERNO,
                        M_MACHINENO,
                        ItemCode}, this.PCMPackBurnLinkRuleOperationCompleted, userState);
        }
        
        private void OnPCMPackBurnLinkRuleOperationCompleted(object arg) {
            if ((this.PCMPackBurnLinkRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PCMPackBurnLinkRuleCompleted(this, new PCMPackBurnLinkRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCarrierToProductType", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCarrierToProductType(string Carrier_Sn) {
            object[] results = this.Invoke("GetCarrierToProductType", new object[] {
                        Carrier_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarrierToProductTypeAsync(string Carrier_Sn) {
            this.GetCarrierToProductTypeAsync(Carrier_Sn, null);
        }
        
        /// <remarks/>
        public void GetCarrierToProductTypeAsync(string Carrier_Sn, object userState) {
            if ((this.GetCarrierToProductTypeOperationCompleted == null)) {
                this.GetCarrierToProductTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarrierToProductTypeOperationCompleted);
            }
            this.InvokeAsync("GetCarrierToProductType", new object[] {
                        Carrier_Sn}, this.GetCarrierToProductTypeOperationCompleted, userState);
        }
        
        private void OnGetCarrierToProductTypeOperationCompleted(object arg) {
            if ((this.GetCarrierToProductTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarrierToProductTypeCompleted(this, new GetCarrierToProductTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductTestData(string device_sn, string product_sn, string[] test_item) {
            object[] results = this.Invoke("GetProductTestData", new object[] {
                        device_sn,
                        product_sn,
                        test_item});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductTestDataAsync(string device_sn, string product_sn, string[] test_item) {
            this.GetProductTestDataAsync(device_sn, product_sn, test_item, null);
        }
        
        /// <remarks/>
        public void GetProductTestDataAsync(string device_sn, string product_sn, string[] test_item, object userState) {
            if ((this.GetProductTestDataOperationCompleted == null)) {
                this.GetProductTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductTestDataOperationCompleted);
            }
            this.InvokeAsync("GetProductTestData", new object[] {
                        device_sn,
                        product_sn,
                        test_item}, this.GetProductTestDataOperationCompleted, userState);
        }
        
        private void OnGetProductTestDataOperationCompleted(object arg) {
            if ((this.GetProductTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductTestDataCompleted(this, new GetProductTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductTestDataList", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductTestDataList(string product_sn, string[] test_item) {
            object[] results = this.Invoke("GetProductTestDataList", new object[] {
                        product_sn,
                        test_item});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductTestDataListAsync(string product_sn, string[] test_item) {
            this.GetProductTestDataListAsync(product_sn, test_item, null);
        }
        
        /// <remarks/>
        public void GetProductTestDataListAsync(string product_sn, string[] test_item, object userState) {
            if ((this.GetProductTestDataListOperationCompleted == null)) {
                this.GetProductTestDataListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductTestDataListOperationCompleted);
            }
            this.InvokeAsync("GetProductTestDataList", new object[] {
                        product_sn,
                        test_item}, this.GetProductTestDataListOperationCompleted, userState);
        }
        
        private void OnGetProductTestDataListOperationCompleted(object arg) {
            if ((this.GetProductTestDataListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductTestDataListCompleted(this, new GetProductTestDataListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCarrierToProduct", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCarrierToProduct(string Carrier_Sn) {
            object[] results = this.Invoke("GetCarrierToProduct", new object[] {
                        Carrier_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarrierToProductAsync(string Carrier_Sn) {
            this.GetCarrierToProductAsync(Carrier_Sn, null);
        }
        
        /// <remarks/>
        public void GetCarrierToProductAsync(string Carrier_Sn, object userState) {
            if ((this.GetCarrierToProductOperationCompleted == null)) {
                this.GetCarrierToProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarrierToProductOperationCompleted);
            }
            this.InvokeAsync("GetCarrierToProduct", new object[] {
                        Carrier_Sn}, this.GetCarrierToProductOperationCompleted, userState);
        }
        
        private void OnGetCarrierToProductOperationCompleted(object arg) {
            if ((this.GetCarrierToProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarrierToProductCompleted(this, new GetCarrierToProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindCarrierProduct", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindCarrierProduct(string Carrier_Sn, string Product_Sn, string User_Code, string Device_Sn) {
            object[] results = this.Invoke("BindCarrierProduct", new object[] {
                        Carrier_Sn,
                        Product_Sn,
                        User_Code,
                        Device_Sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindCarrierProductAsync(string Carrier_Sn, string Product_Sn, string User_Code, string Device_Sn) {
            this.BindCarrierProductAsync(Carrier_Sn, Product_Sn, User_Code, Device_Sn, null);
        }
        
        /// <remarks/>
        public void BindCarrierProductAsync(string Carrier_Sn, string Product_Sn, string User_Code, string Device_Sn, object userState) {
            if ((this.BindCarrierProductOperationCompleted == null)) {
                this.BindCarrierProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindCarrierProductOperationCompleted);
            }
            this.InvokeAsync("BindCarrierProduct", new object[] {
                        Carrier_Sn,
                        Product_Sn,
                        User_Code,
                        Device_Sn}, this.BindCarrierProductOperationCompleted, userState);
        }
        
        private void OnBindCarrierProductOperationCompleted(object arg) {
            if ((this.BindCarrierProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindCarrierProductCompleted(this, new BindCarrierProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ProductFittingLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductFittingLink(string productSn, string fittingGroup, string positionGroup, string linkType, string userCode, string deviceCode) {
            object[] results = this.Invoke("ProductFittingLink", new object[] {
                        productSn,
                        fittingGroup,
                        positionGroup,
                        linkType,
                        userCode,
                        deviceCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductFittingLinkAsync(string productSn, string fittingGroup, string positionGroup, string linkType, string userCode, string deviceCode) {
            this.ProductFittingLinkAsync(productSn, fittingGroup, positionGroup, linkType, userCode, deviceCode, null);
        }
        
        /// <remarks/>
        public void ProductFittingLinkAsync(string productSn, string fittingGroup, string positionGroup, string linkType, string userCode, string deviceCode, object userState) {
            if ((this.ProductFittingLinkOperationCompleted == null)) {
                this.ProductFittingLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductFittingLinkOperationCompleted);
            }
            this.InvokeAsync("ProductFittingLink", new object[] {
                        productSn,
                        fittingGroup,
                        positionGroup,
                        linkType,
                        userCode,
                        deviceCode}, this.ProductFittingLinkOperationCompleted, userState);
        }
        
        private void OnProductFittingLinkOperationCompleted(object arg) {
            if ((this.ProductFittingLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductFittingLinkCompleted(this, new ProductFittingLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetModuleNumber", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModuleNumber() {
            object[] results = this.Invoke("GetModuleNumber", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModuleNumberAsync() {
            this.GetModuleNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetModuleNumberAsync(object userState) {
            if ((this.GetModuleNumberOperationCompleted == null)) {
                this.GetModuleNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModuleNumberOperationCompleted);
            }
            this.InvokeAsync("GetModuleNumber", new object[0], this.GetModuleNumberOperationCompleted, userState);
        }
        
        private void OnGetModuleNumberOperationCompleted(object arg) {
            if ((this.GetModuleNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModuleNumberCompleted(this, new GetModuleNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeviecStatus", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviecStatus(string deviecCode, [System.Xml.Serialization.XmlElementAttribute("deviecStatus")] string deviecStatus1, string deviecErrorInfo, string userCode) {
            object[] results = this.Invoke("DeviecStatus", new object[] {
                        deviecCode,
                        deviecStatus1,
                        deviecErrorInfo,
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviecStatusAsync(string deviecCode, string deviecStatus1, string deviecErrorInfo, string userCode) {
            this.DeviecStatusAsync(deviecCode, deviecStatus1, deviecErrorInfo, userCode, null);
        }
        
        /// <remarks/>
        public void DeviecStatusAsync(string deviecCode, string deviecStatus1, string deviecErrorInfo, string userCode, object userState) {
            if ((this.DeviecStatusOperationCompleted == null)) {
                this.DeviecStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviecStatusOperationCompleted);
            }
            this.InvokeAsync("DeviecStatus", new object[] {
                        deviecCode,
                        deviecStatus1,
                        deviecErrorInfo,
                        userCode}, this.DeviecStatusOperationCompleted, userState);
        }
        
        private void OnDeviecStatusOperationCompleted(object arg) {
            if ((this.DeviecStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviecStatusCompleted(this, new DeviecStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeviceStatus", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviceStatus(string deviceCode, [System.Xml.Serialization.XmlElementAttribute("deviceStatus")] string deviceStatus1, string deviceErrorInfo, string userCode) {
            object[] results = this.Invoke("DeviceStatus", new object[] {
                        deviceCode,
                        deviceStatus1,
                        deviceErrorInfo,
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceStatusAsync(string deviceCode, string deviceStatus1, string deviceErrorInfo, string userCode) {
            this.DeviceStatusAsync(deviceCode, deviceStatus1, deviceErrorInfo, userCode, null);
        }
        
        /// <remarks/>
        public void DeviceStatusAsync(string deviceCode, string deviceStatus1, string deviceErrorInfo, string userCode, object userState) {
            if ((this.DeviceStatusOperationCompleted == null)) {
                this.DeviceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceStatusOperationCompleted);
            }
            this.InvokeAsync("DeviceStatus", new object[] {
                        deviceCode,
                        deviceStatus1,
                        deviceErrorInfo,
                        userCode}, this.DeviceStatusOperationCompleted, userState);
        }
        
        private void OnDeviceStatusOperationCompleted(object arg) {
            if ((this.DeviceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceStatusCompleted(this, new DeviceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/HWInterfaceTest", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HWInterfaceTest(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            object[] results = this.Invoke("HWInterfaceTest", new object[] {
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HWInterfaceTestAsync(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            this.HWInterfaceTestAsync(M_MACHINENO, M_PRODUCT_SN, M_MO, M_EMP, M_KP_ITEMSN_ALL, M_ITEMVALUE, M_RESULT, M_ERROR, null);
        }
        
        /// <remarks/>
        public void HWInterfaceTestAsync(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR, object userState) {
            if ((this.HWInterfaceTestOperationCompleted == null)) {
                this.HWInterfaceTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHWInterfaceTestOperationCompleted);
            }
            this.InvokeAsync("HWInterfaceTest", new object[] {
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR}, this.HWInterfaceTestOperationCompleted, userState);
        }
        
        private void OnHWInterfaceTestOperationCompleted(object arg) {
            if ((this.HWInterfaceTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HWInterfaceTestCompleted(this, new HWInterfaceTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/HWInterfaceConversion", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HWInterfaceConversion(string M_MACHINENO, string M_ODL_PRODUCT_SN, string M_NEW_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            object[] results = this.Invoke("HWInterfaceConversion", new object[] {
                        M_MACHINENO,
                        M_ODL_PRODUCT_SN,
                        M_NEW_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HWInterfaceConversionAsync(string M_MACHINENO, string M_ODL_PRODUCT_SN, string M_NEW_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            this.HWInterfaceConversionAsync(M_MACHINENO, M_ODL_PRODUCT_SN, M_NEW_PRODUCT_SN, M_MO, M_EMP, M_KP_ITEMSN_ALL, M_ITEMVALUE, M_RESULT, M_ERROR, null);
        }
        
        /// <remarks/>
        public void HWInterfaceConversionAsync(string M_MACHINENO, string M_ODL_PRODUCT_SN, string M_NEW_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR, object userState) {
            if ((this.HWInterfaceConversionOperationCompleted == null)) {
                this.HWInterfaceConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHWInterfaceConversionOperationCompleted);
            }
            this.InvokeAsync("HWInterfaceConversion", new object[] {
                        M_MACHINENO,
                        M_ODL_PRODUCT_SN,
                        M_NEW_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR}, this.HWInterfaceConversionOperationCompleted, userState);
        }
        
        private void OnHWInterfaceConversionOperationCompleted(object arg) {
            if ((this.HWInterfaceConversionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HWInterfaceConversionCompleted(this, new HWInterfaceConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckPoNumber", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckPoNumber(string poNumber) {
            object[] results = this.Invoke("CheckPoNumber", new object[] {
                        poNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPoNumberAsync(string poNumber) {
            this.CheckPoNumberAsync(poNumber, null);
        }
        
        /// <remarks/>
        public void CheckPoNumberAsync(string poNumber, object userState) {
            if ((this.CheckPoNumberOperationCompleted == null)) {
                this.CheckPoNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPoNumberOperationCompleted);
            }
            this.InvokeAsync("CheckPoNumber", new object[] {
                        poNumber}, this.CheckPoNumberOperationCompleted, userState);
        }
        
        private void OnCheckPoNumberOperationCompleted(object arg) {
            if ((this.CheckPoNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPoNumberCompleted(this, new CheckPoNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckAddressCode", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckAddressCode(string poNumber, string addressCode) {
            object[] results = this.Invoke("CheckAddressCode", new object[] {
                        poNumber,
                        addressCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAddressCodeAsync(string poNumber, string addressCode) {
            this.CheckAddressCodeAsync(poNumber, addressCode, null);
        }
        
        /// <remarks/>
        public void CheckAddressCodeAsync(string poNumber, string addressCode, object userState) {
            if ((this.CheckAddressCodeOperationCompleted == null)) {
                this.CheckAddressCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAddressCodeOperationCompleted);
            }
            this.InvokeAsync("CheckAddressCode", new object[] {
                        poNumber,
                        addressCode}, this.CheckAddressCodeOperationCompleted, userState);
        }
        
        private void OnCheckAddressCodeOperationCompleted(object arg) {
            if ((this.CheckAddressCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAddressCodeCompleted(this, new CheckAddressCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PoPalletLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PoPalletLink(string poNumber, string addressCode, string pallet_sn, string user_code) {
            object[] results = this.Invoke("PoPalletLink", new object[] {
                        poNumber,
                        addressCode,
                        pallet_sn,
                        user_code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PoPalletLinkAsync(string poNumber, string addressCode, string pallet_sn, string user_code) {
            this.PoPalletLinkAsync(poNumber, addressCode, pallet_sn, user_code, null);
        }
        
        /// <remarks/>
        public void PoPalletLinkAsync(string poNumber, string addressCode, string pallet_sn, string user_code, object userState) {
            if ((this.PoPalletLinkOperationCompleted == null)) {
                this.PoPalletLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPoPalletLinkOperationCompleted);
            }
            this.InvokeAsync("PoPalletLink", new object[] {
                        poNumber,
                        addressCode,
                        pallet_sn,
                        user_code}, this.PoPalletLinkOperationCompleted, userState);
        }
        
        private void OnPoPalletLinkOperationCompleted(object arg) {
            if ((this.PoPalletLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PoPalletLinkCompleted(this, new PoPalletLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MachineFittingLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MachineFittingLink(string M_PRODUCT_SN, string M_MACHINENO, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            object[] results = this.Invoke("MachineFittingLink", new object[] {
                        M_PRODUCT_SN,
                        M_MACHINENO,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MachineFittingLinkAsync(string M_PRODUCT_SN, string M_MACHINENO, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR) {
            this.MachineFittingLinkAsync(M_PRODUCT_SN, M_MACHINENO, M_MO, M_EMP, M_KP_ITEMSN_ALL, M_ITEMVALUE, M_RESULT, M_ERROR, null);
        }
        
        /// <remarks/>
        public void MachineFittingLinkAsync(string M_PRODUCT_SN, string M_MACHINENO, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, string M_ITEMVALUE, string M_RESULT, string M_ERROR, object userState) {
            if ((this.MachineFittingLinkOperationCompleted == null)) {
                this.MachineFittingLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMachineFittingLinkOperationCompleted);
            }
            this.InvokeAsync("MachineFittingLink", new object[] {
                        M_PRODUCT_SN,
                        M_MACHINENO,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL,
                        M_ITEMVALUE,
                        M_RESULT,
                        M_ERROR}, this.MachineFittingLinkOperationCompleted, userState);
        }
        
        private void OnMachineFittingLinkOperationCompleted(object arg) {
            if ((this.MachineFittingLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MachineFittingLinkCompleted(this, new MachineFittingLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetMacId", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMacId(string product_sn) {
            object[] results = this.Invoke("GetMacId", new object[] {
                        product_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMacIdAsync(string product_sn) {
            this.GetMacIdAsync(product_sn, null);
        }
        
        /// <remarks/>
        public void GetMacIdAsync(string product_sn, object userState) {
            if ((this.GetMacIdOperationCompleted == null)) {
                this.GetMacIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMacIdOperationCompleted);
            }
            this.InvokeAsync("GetMacId", new object[] {
                        product_sn}, this.GetMacIdOperationCompleted, userState);
        }
        
        private void OnGetMacIdOperationCompleted(object arg) {
            if ((this.GetMacIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMacIdCompleted(this, new GetMacIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BarcodeConversion", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BarcodeConversion(string M_PRODUCT_SN, string M_CUSTOMER_SN, string M_MO) {
            object[] results = this.Invoke("BarcodeConversion", new object[] {
                        M_PRODUCT_SN,
                        M_CUSTOMER_SN,
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BarcodeConversionAsync(string M_PRODUCT_SN, string M_CUSTOMER_SN, string M_MO) {
            this.BarcodeConversionAsync(M_PRODUCT_SN, M_CUSTOMER_SN, M_MO, null);
        }
        
        /// <remarks/>
        public void BarcodeConversionAsync(string M_PRODUCT_SN, string M_CUSTOMER_SN, string M_MO, object userState) {
            if ((this.BarcodeConversionOperationCompleted == null)) {
                this.BarcodeConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBarcodeConversionOperationCompleted);
            }
            this.InvokeAsync("BarcodeConversion", new object[] {
                        M_PRODUCT_SN,
                        M_CUSTOMER_SN,
                        M_MO}, this.BarcodeConversionOperationCompleted, userState);
        }
        
        private void OnBarcodeConversionOperationCompleted(object arg) {
            if ((this.BarcodeConversionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BarcodeConversionCompleted(this, new BarcodeConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductNewSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductNewSn(string ProductOldSn) {
            object[] results = this.Invoke("GetProductNewSn", new object[] {
                        ProductOldSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductNewSnAsync(string ProductOldSn) {
            this.GetProductNewSnAsync(ProductOldSn, null);
        }
        
        /// <remarks/>
        public void GetProductNewSnAsync(string ProductOldSn, object userState) {
            if ((this.GetProductNewSnOperationCompleted == null)) {
                this.GetProductNewSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductNewSnOperationCompleted);
            }
            this.InvokeAsync("GetProductNewSn", new object[] {
                        ProductOldSn}, this.GetProductNewSnOperationCompleted, userState);
        }
        
        private void OnGetProductNewSnOperationCompleted(object arg) {
            if ((this.GetProductNewSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductNewSnCompleted(this, new GetProductNewSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductOldSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductOldSn(string ProductNewSn) {
            object[] results = this.Invoke("GetProductOldSn", new object[] {
                        ProductNewSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductOldSnAsync(string ProductNewSn) {
            this.GetProductOldSnAsync(ProductNewSn, null);
        }
        
        /// <remarks/>
        public void GetProductOldSnAsync(string ProductNewSn, object userState) {
            if ((this.GetProductOldSnOperationCompleted == null)) {
                this.GetProductOldSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductOldSnOperationCompleted);
            }
            this.InvokeAsync("GetProductOldSn", new object[] {
                        ProductNewSn}, this.GetProductOldSnOperationCompleted, userState);
        }
        
        private void OnGetProductOldSnOperationCompleted(object arg) {
            if ((this.GetProductOldSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductOldSnCompleted(this, new GetProductOldSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPrioductDIDInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetPrioductDIDInfo(string ProductSn) {
            object[] results = this.Invoke("GetPrioductDIDInfo", new object[] {
                        ProductSn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrioductDIDInfoAsync(string ProductSn) {
            this.GetPrioductDIDInfoAsync(ProductSn, null);
        }
        
        /// <remarks/>
        public void GetPrioductDIDInfoAsync(string ProductSn, object userState) {
            if ((this.GetPrioductDIDInfoOperationCompleted == null)) {
                this.GetPrioductDIDInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrioductDIDInfoOperationCompleted);
            }
            this.InvokeAsync("GetPrioductDIDInfo", new object[] {
                        ProductSn}, this.GetPrioductDIDInfoOperationCompleted, userState);
        }
        
        private void OnGetPrioductDIDInfoOperationCompleted(object arg) {
            if ((this.GetPrioductDIDInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrioductDIDInfoCompleted(this, new GetPrioductDIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ProductThroughStation", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductThroughStation(string M_PRODUCT_SN, string M_MO, string M_EMP, string M_WORK_STATIONID, string M_WORKSTATION_SN, string M_WORKSTATION_NAME, string M_HISTORY_CMD_ID, string M_KEYP_QTY, string M_TECHNICSID, string M_GROUUP_CODE, string M_ROUTE_GROUPID, string DEFAULTINPUT, string FLOWCODE) {
            object[] results = this.Invoke("ProductThroughStation", new object[] {
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_WORK_STATIONID,
                        M_WORKSTATION_SN,
                        M_WORKSTATION_NAME,
                        M_HISTORY_CMD_ID,
                        M_KEYP_QTY,
                        M_TECHNICSID,
                        M_GROUUP_CODE,
                        M_ROUTE_GROUPID,
                        DEFAULTINPUT,
                        FLOWCODE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductThroughStationAsync(string M_PRODUCT_SN, string M_MO, string M_EMP, string M_WORK_STATIONID, string M_WORKSTATION_SN, string M_WORKSTATION_NAME, string M_HISTORY_CMD_ID, string M_KEYP_QTY, string M_TECHNICSID, string M_GROUUP_CODE, string M_ROUTE_GROUPID, string DEFAULTINPUT, string FLOWCODE) {
            this.ProductThroughStationAsync(M_PRODUCT_SN, M_MO, M_EMP, M_WORK_STATIONID, M_WORKSTATION_SN, M_WORKSTATION_NAME, M_HISTORY_CMD_ID, M_KEYP_QTY, M_TECHNICSID, M_GROUUP_CODE, M_ROUTE_GROUPID, DEFAULTINPUT, FLOWCODE, null);
        }
        
        /// <remarks/>
        public void ProductThroughStationAsync(string M_PRODUCT_SN, string M_MO, string M_EMP, string M_WORK_STATIONID, string M_WORKSTATION_SN, string M_WORKSTATION_NAME, string M_HISTORY_CMD_ID, string M_KEYP_QTY, string M_TECHNICSID, string M_GROUUP_CODE, string M_ROUTE_GROUPID, string DEFAULTINPUT, string FLOWCODE, object userState) {
            if ((this.ProductThroughStationOperationCompleted == null)) {
                this.ProductThroughStationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductThroughStationOperationCompleted);
            }
            this.InvokeAsync("ProductThroughStation", new object[] {
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_WORK_STATIONID,
                        M_WORKSTATION_SN,
                        M_WORKSTATION_NAME,
                        M_HISTORY_CMD_ID,
                        M_KEYP_QTY,
                        M_TECHNICSID,
                        M_GROUUP_CODE,
                        M_ROUTE_GROUPID,
                        DEFAULTINPUT,
                        FLOWCODE}, this.ProductThroughStationOperationCompleted, userState);
        }
        
        private void OnProductThroughStationOperationCompleted(object arg) {
            if ((this.ProductThroughStationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductThroughStationCompleted(this, new ProductThroughStationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckRouteFirst", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("M_VALUE")]
        public string CheckRouteFirst(string MO_NUMBER, string workStationSN, string SN, out string RES) {
            object[] results = this.Invoke("CheckRouteFirst", new object[] {
                        MO_NUMBER,
                        workStationSN,
                        SN});
            RES = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRouteFirstAsync(string MO_NUMBER, string workStationSN, string SN) {
            this.CheckRouteFirstAsync(MO_NUMBER, workStationSN, SN, null);
        }
        
        /// <remarks/>
        public void CheckRouteFirstAsync(string MO_NUMBER, string workStationSN, string SN, object userState) {
            if ((this.CheckRouteFirstOperationCompleted == null)) {
                this.CheckRouteFirstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRouteFirstOperationCompleted);
            }
            this.InvokeAsync("CheckRouteFirst", new object[] {
                        MO_NUMBER,
                        workStationSN,
                        SN}, this.CheckRouteFirstOperationCompleted, userState);
        }
        
        private void OnCheckRouteFirstOperationCompleted(object arg) {
            if ((this.CheckRouteFirstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRouteFirstCompleted(this, new CheckRouteFirstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeleteProductMessage", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("errorCode")]
        public string DeleteProductMessage(string SN, string BoxSN, string MoNumber, string Worker, System.DateTime CreateTime, out string errorText) {
            object[] results = this.Invoke("DeleteProductMessage", new object[] {
                        SN,
                        BoxSN,
                        MoNumber,
                        Worker,
                        CreateTime});
            errorText = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProductMessageAsync(string SN, string BoxSN, string MoNumber, string Worker, System.DateTime CreateTime) {
            this.DeleteProductMessageAsync(SN, BoxSN, MoNumber, Worker, CreateTime, null);
        }
        
        /// <remarks/>
        public void DeleteProductMessageAsync(string SN, string BoxSN, string MoNumber, string Worker, System.DateTime CreateTime, object userState) {
            if ((this.DeleteProductMessageOperationCompleted == null)) {
                this.DeleteProductMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProductMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteProductMessage", new object[] {
                        SN,
                        BoxSN,
                        MoNumber,
                        Worker,
                        CreateTime}, this.DeleteProductMessageOperationCompleted, userState);
        }
        
        private void OnDeleteProductMessageOperationCompleted(object arg) {
            if ((this.DeleteProductMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProductMessageCompleted(this, new DeleteProductMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SMTWeldInput", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SMTWeldInput(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, string M_MO, string M_PCB, string M_Solder, string M_Stencil, string M_Boards_Number, string M_Bad_Boards_Number) {
            object[] results = this.Invoke("SMTWeldInput", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE,
                        M_MO,
                        M_PCB,
                        M_Solder,
                        M_Stencil,
                        M_Boards_Number,
                        M_Bad_Boards_Number});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SMTWeldInputAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, string M_MO, string M_PCB, string M_Solder, string M_Stencil, string M_Boards_Number, string M_Bad_Boards_Number) {
            this.SMTWeldInputAsync(M_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ERROR, M_ITEMVALUE, M_MO, M_PCB, M_Solder, M_Stencil, M_Boards_Number, M_Bad_Boards_Number, null);
        }
        
        /// <remarks/>
        public void SMTWeldInputAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, string M_MO, string M_PCB, string M_Solder, string M_Stencil, string M_Boards_Number, string M_Bad_Boards_Number, object userState) {
            if ((this.SMTWeldInputOperationCompleted == null)) {
                this.SMTWeldInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSMTWeldInputOperationCompleted);
            }
            this.InvokeAsync("SMTWeldInput", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE,
                        M_MO,
                        M_PCB,
                        M_Solder,
                        M_Stencil,
                        M_Boards_Number,
                        M_Bad_Boards_Number}, this.SMTWeldInputOperationCompleted, userState);
        }
        
        private void OnSMTWeldInputOperationCompleted(object arg) {
            if ((this.SMTWeldInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SMTWeldInputCompleted(this, new SMTWeldInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MES_KEYPSN_SAVE", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MES_KEYPSN_SAVE(string M_PRODUCT_SN, string M_MO, string M_EMP, string M_WORK_STATIONID, string M_WORKSTATION_SN, string M_WORKSTATION_NAME, string M_ROUTE_GROUPID, string M_KP_LOTSN_ALL) {
            object[] results = this.Invoke("MES_KEYPSN_SAVE", new object[] {
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_WORK_STATIONID,
                        M_WORKSTATION_SN,
                        M_WORKSTATION_NAME,
                        M_ROUTE_GROUPID,
                        M_KP_LOTSN_ALL});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MES_KEYPSN_SAVEAsync(string M_PRODUCT_SN, string M_MO, string M_EMP, string M_WORK_STATIONID, string M_WORKSTATION_SN, string M_WORKSTATION_NAME, string M_ROUTE_GROUPID, string M_KP_LOTSN_ALL) {
            this.MES_KEYPSN_SAVEAsync(M_PRODUCT_SN, M_MO, M_EMP, M_WORK_STATIONID, M_WORKSTATION_SN, M_WORKSTATION_NAME, M_ROUTE_GROUPID, M_KP_LOTSN_ALL, null);
        }
        
        /// <remarks/>
        public void MES_KEYPSN_SAVEAsync(string M_PRODUCT_SN, string M_MO, string M_EMP, string M_WORK_STATIONID, string M_WORKSTATION_SN, string M_WORKSTATION_NAME, string M_ROUTE_GROUPID, string M_KP_LOTSN_ALL, object userState) {
            if ((this.MES_KEYPSN_SAVEOperationCompleted == null)) {
                this.MES_KEYPSN_SAVEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMES_KEYPSN_SAVEOperationCompleted);
            }
            this.InvokeAsync("MES_KEYPSN_SAVE", new object[] {
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_WORK_STATIONID,
                        M_WORKSTATION_SN,
                        M_WORKSTATION_NAME,
                        M_ROUTE_GROUPID,
                        M_KP_LOTSN_ALL}, this.MES_KEYPSN_SAVEOperationCompleted, userState);
        }
        
        private void OnMES_KEYPSN_SAVEOperationCompleted(object arg) {
            if ((this.MES_KEYPSN_SAVECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MES_KEYPSN_SAVECompleted(this, new MES_KEYPSN_SAVECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MES_PACK_BATTERYLINK_RULE", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MES_PACK_BATTERYLINK_RULE(string M_MO, string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO, string M_SINGLE_RULE) {
            object[] results = this.Invoke("MES_PACK_BATTERYLINK_RULE", new object[] {
                        M_MO,
                        M_BATTERY_SN,
                        M_BATTERIES_SN,
                        M_EMP_NO,
                        M_SINGLE_RULE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MES_PACK_BATTERYLINK_RULEAsync(string M_MO, string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO, string M_SINGLE_RULE) {
            this.MES_PACK_BATTERYLINK_RULEAsync(M_MO, M_BATTERY_SN, M_BATTERIES_SN, M_EMP_NO, M_SINGLE_RULE, null);
        }
        
        /// <remarks/>
        public void MES_PACK_BATTERYLINK_RULEAsync(string M_MO, string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO, string M_SINGLE_RULE, object userState) {
            if ((this.MES_PACK_BATTERYLINK_RULEOperationCompleted == null)) {
                this.MES_PACK_BATTERYLINK_RULEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMES_PACK_BATTERYLINK_RULEOperationCompleted);
            }
            this.InvokeAsync("MES_PACK_BATTERYLINK_RULE", new object[] {
                        M_MO,
                        M_BATTERY_SN,
                        M_BATTERIES_SN,
                        M_EMP_NO,
                        M_SINGLE_RULE}, this.MES_PACK_BATTERYLINK_RULEOperationCompleted, userState);
        }
        
        private void OnMES_PACK_BATTERYLINK_RULEOperationCompleted(object arg) {
            if ((this.MES_PACK_BATTERYLINK_RULECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MES_PACK_BATTERYLINK_RULECompleted(this, new MES_PACK_BATTERYLINK_RULECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckRoutePacking", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckRoutePacking(string SN, string MO_NUMBER, string workStationSN) {
            object[] results = this.Invoke("CheckRoutePacking", new object[] {
                        SN,
                        MO_NUMBER,
                        workStationSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRoutePackingAsync(string SN, string MO_NUMBER, string workStationSN) {
            this.CheckRoutePackingAsync(SN, MO_NUMBER, workStationSN, null);
        }
        
        /// <remarks/>
        public void CheckRoutePackingAsync(string SN, string MO_NUMBER, string workStationSN, object userState) {
            if ((this.CheckRoutePackingOperationCompleted == null)) {
                this.CheckRoutePackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRoutePackingOperationCompleted);
            }
            this.InvokeAsync("CheckRoutePacking", new object[] {
                        SN,
                        MO_NUMBER,
                        workStationSN}, this.CheckRoutePackingOperationCompleted, userState);
        }
        
        private void OnCheckRoutePackingOperationCompleted(object arg) {
            if ((this.CheckRoutePackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRoutePackingCompleted(this, new CheckRoutePackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PackingCheckCellType", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PackingCheckCellType(string sn, string box_sn, string pallet_sn) {
            object[] results = this.Invoke("PackingCheckCellType", new object[] {
                        sn,
                        box_sn,
                        pallet_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PackingCheckCellTypeAsync(string sn, string box_sn, string pallet_sn) {
            this.PackingCheckCellTypeAsync(sn, box_sn, pallet_sn, null);
        }
        
        /// <remarks/>
        public void PackingCheckCellTypeAsync(string sn, string box_sn, string pallet_sn, object userState) {
            if ((this.PackingCheckCellTypeOperationCompleted == null)) {
                this.PackingCheckCellTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPackingCheckCellTypeOperationCompleted);
            }
            this.InvokeAsync("PackingCheckCellType", new object[] {
                        sn,
                        box_sn,
                        pallet_sn}, this.PackingCheckCellTypeOperationCompleted, userState);
        }
        
        private void OnPackingCheckCellTypeOperationCompleted(object arg) {
            if ((this.PackingCheckCellTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PackingCheckCellTypeCompleted(this, new PackingCheckCellTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BarcodeConversionNEW", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BarcodeConversionNEW(string M_KEYP_SN, string M_CUSTOMER_SN, string M_MO, string M_EMP, string DEVICE_SN) {
            object[] results = this.Invoke("BarcodeConversionNEW", new object[] {
                        M_KEYP_SN,
                        M_CUSTOMER_SN,
                        M_MO,
                        M_EMP,
                        DEVICE_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BarcodeConversionNEWAsync(string M_KEYP_SN, string M_CUSTOMER_SN, string M_MO, string M_EMP, string DEVICE_SN) {
            this.BarcodeConversionNEWAsync(M_KEYP_SN, M_CUSTOMER_SN, M_MO, M_EMP, DEVICE_SN, null);
        }
        
        /// <remarks/>
        public void BarcodeConversionNEWAsync(string M_KEYP_SN, string M_CUSTOMER_SN, string M_MO, string M_EMP, string DEVICE_SN, object userState) {
            if ((this.BarcodeConversionNEWOperationCompleted == null)) {
                this.BarcodeConversionNEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBarcodeConversionNEWOperationCompleted);
            }
            this.InvokeAsync("BarcodeConversionNEW", new object[] {
                        M_KEYP_SN,
                        M_CUSTOMER_SN,
                        M_MO,
                        M_EMP,
                        DEVICE_SN}, this.BarcodeConversionNEWOperationCompleted, userState);
        }
        
        private void OnBarcodeConversionNEWOperationCompleted(object arg) {
            if ((this.BarcodeConversionNEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BarcodeConversionNEWCompleted(this, new BarcodeConversionNEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/EVBModelSorting", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EVBModelSorting(string ModelInfo, string user) {
            object[] results = this.Invoke("EVBModelSorting", new object[] {
                        ModelInfo,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EVBModelSortingAsync(string ModelInfo, string user) {
            this.EVBModelSortingAsync(ModelInfo, user, null);
        }
        
        /// <remarks/>
        public void EVBModelSortingAsync(string ModelInfo, string user, object userState) {
            if ((this.EVBModelSortingOperationCompleted == null)) {
                this.EVBModelSortingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEVBModelSortingOperationCompleted);
            }
            this.InvokeAsync("EVBModelSorting", new object[] {
                        ModelInfo,
                        user}, this.EVBModelSortingOperationCompleted, userState);
        }
        
        private void OnEVBModelSortingOperationCompleted(object arg) {
            if ((this.EVBModelSortingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EVBModelSortingCompleted(this, new EVBModelSortingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/EVBModelReplace", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EVBModelReplace(string OdlModelInfo, string NewModelInfo, string user) {
            object[] results = this.Invoke("EVBModelReplace", new object[] {
                        OdlModelInfo,
                        NewModelInfo,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EVBModelReplaceAsync(string OdlModelInfo, string NewModelInfo, string user) {
            this.EVBModelReplaceAsync(OdlModelInfo, NewModelInfo, user, null);
        }
        
        /// <remarks/>
        public void EVBModelReplaceAsync(string OdlModelInfo, string NewModelInfo, string user, object userState) {
            if ((this.EVBModelReplaceOperationCompleted == null)) {
                this.EVBModelReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEVBModelReplaceOperationCompleted);
            }
            this.InvokeAsync("EVBModelReplace", new object[] {
                        OdlModelInfo,
                        NewModelInfo,
                        user}, this.EVBModelReplaceOperationCompleted, userState);
        }
        
        private void OnEVBModelReplaceOperationCompleted(object arg) {
            if ((this.EVBModelReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EVBModelReplaceCompleted(this, new EVBModelReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/EVBGetModelInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EVBGetModelInfo(string ModelSn) {
            object[] results = this.Invoke("EVBGetModelInfo", new object[] {
                        ModelSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EVBGetModelInfoAsync(string ModelSn) {
            this.EVBGetModelInfoAsync(ModelSn, null);
        }
        
        /// <remarks/>
        public void EVBGetModelInfoAsync(string ModelSn, object userState) {
            if ((this.EVBGetModelInfoOperationCompleted == null)) {
                this.EVBGetModelInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEVBGetModelInfoOperationCompleted);
            }
            this.InvokeAsync("EVBGetModelInfo", new object[] {
                        ModelSn}, this.EVBGetModelInfoOperationCompleted, userState);
        }
        
        private void OnEVBGetModelInfoOperationCompleted(object arg) {
            if ((this.EVBGetModelInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EVBGetModelInfoCompleted(this, new EVBGetModelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckItemRuleProduct", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckItemRuleProduct(string M_SN, string ItemCode, string product_sn) {
            object[] results = this.Invoke("CheckItemRuleProduct", new object[] {
                        M_SN,
                        ItemCode,
                        product_sn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckItemRuleProductAsync(string M_SN, string ItemCode, string product_sn) {
            this.CheckItemRuleProductAsync(M_SN, ItemCode, product_sn, null);
        }
        
        /// <remarks/>
        public void CheckItemRuleProductAsync(string M_SN, string ItemCode, string product_sn, object userState) {
            if ((this.CheckItemRuleProductOperationCompleted == null)) {
                this.CheckItemRuleProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckItemRuleProductOperationCompleted);
            }
            this.InvokeAsync("CheckItemRuleProduct", new object[] {
                        M_SN,
                        ItemCode,
                        product_sn}, this.CheckItemRuleProductOperationCompleted, userState);
        }
        
        private void OnCheckItemRuleProductOperationCompleted(object arg) {
            if ((this.CheckItemRuleProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckItemRuleProductCompleted(this, new CheckItemRuleProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckItemRule", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckItemRule(string M_SN, string ItemCode) {
            object[] results = this.Invoke("CheckItemRule", new object[] {
                        M_SN,
                        ItemCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckItemRuleAsync(string M_SN, string ItemCode) {
            this.CheckItemRuleAsync(M_SN, ItemCode, null);
        }
        
        /// <remarks/>
        public void CheckItemRuleAsync(string M_SN, string ItemCode, object userState) {
            if ((this.CheckItemRuleOperationCompleted == null)) {
                this.CheckItemRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckItemRuleOperationCompleted);
            }
            this.InvokeAsync("CheckItemRule", new object[] {
                        M_SN,
                        ItemCode}, this.CheckItemRuleOperationCompleted, userState);
        }
        
        private void OnCheckItemRuleOperationCompleted(object arg) {
            if ((this.CheckItemRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckItemRuleCompleted(this, new CheckItemRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ItemAsnWMSToMES", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ItemAsnWMSToMES(string strASN) {
            object[] results = this.Invoke("ItemAsnWMSToMES", new object[] {
                        strASN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ItemAsnWMSToMESAsync(string strASN) {
            this.ItemAsnWMSToMESAsync(strASN, null);
        }
        
        /// <remarks/>
        public void ItemAsnWMSToMESAsync(string strASN, object userState) {
            if ((this.ItemAsnWMSToMESOperationCompleted == null)) {
                this.ItemAsnWMSToMESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnItemAsnWMSToMESOperationCompleted);
            }
            this.InvokeAsync("ItemAsnWMSToMES", new object[] {
                        strASN}, this.ItemAsnWMSToMESOperationCompleted, userState);
        }
        
        private void OnItemAsnWMSToMESOperationCompleted(object arg) {
            if ((this.ItemAsnWMSToMESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ItemAsnWMSToMESCompleted(this, new ItemAsnWMSToMESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/getCycleRecordNumber", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCycleRecordNumber(string serial_number) {
            object[] results = this.Invoke("getCycleRecordNumber", new object[] {
                        serial_number});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCycleRecordNumberAsync(string serial_number) {
            this.getCycleRecordNumberAsync(serial_number, null);
        }
        
        /// <remarks/>
        public void getCycleRecordNumberAsync(string serial_number, object userState) {
            if ((this.getCycleRecordNumberOperationCompleted == null)) {
                this.getCycleRecordNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCycleRecordNumberOperationCompleted);
            }
            this.InvokeAsync("getCycleRecordNumber", new object[] {
                        serial_number}, this.getCycleRecordNumberOperationCompleted, userState);
        }
        
        private void OngetCycleRecordNumberOperationCompleted(object arg) {
            if ((this.getCycleRecordNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCycleRecordNumberCompleted(this, new getCycleRecordNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/cycleLevelsData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cycleLevelsData([System.Xml.Serialization.XmlElementAttribute("cycleLevelsData")] string cycleLevelsData1) {
            object[] results = this.Invoke("cycleLevelsData", new object[] {
                        cycleLevelsData1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cycleLevelsDataAsync(string cycleLevelsData1) {
            this.cycleLevelsDataAsync(cycleLevelsData1, null);
        }
        
        /// <remarks/>
        public void cycleLevelsDataAsync(string cycleLevelsData1, object userState) {
            if ((this.cycleLevelsDataOperationCompleted == null)) {
                this.cycleLevelsDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OncycleLevelsDataOperationCompleted);
            }
            this.InvokeAsync("cycleLevelsData", new object[] {
                        cycleLevelsData1}, this.cycleLevelsDataOperationCompleted, userState);
        }
        
        private void OncycleLevelsDataOperationCompleted(object arg) {
            if ((this.cycleLevelsDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cycleLevelsDataCompleted(this, new cycleLevelsDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/cycleGasGaugeData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cycleGasGaugeData([System.Xml.Serialization.XmlElementAttribute("cycleGasGaugeData")] string cycleGasGaugeData1) {
            object[] results = this.Invoke("cycleGasGaugeData", new object[] {
                        cycleGasGaugeData1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cycleGasGaugeDataAsync(string cycleGasGaugeData1) {
            this.cycleGasGaugeDataAsync(cycleGasGaugeData1, null);
        }
        
        /// <remarks/>
        public void cycleGasGaugeDataAsync(string cycleGasGaugeData1, object userState) {
            if ((this.cycleGasGaugeDataOperationCompleted == null)) {
                this.cycleGasGaugeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OncycleGasGaugeDataOperationCompleted);
            }
            this.InvokeAsync("cycleGasGaugeData", new object[] {
                        cycleGasGaugeData1}, this.cycleGasGaugeDataOperationCompleted, userState);
        }
        
        private void OncycleGasGaugeDataOperationCompleted(object arg) {
            if ((this.cycleGasGaugeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cycleGasGaugeDataCompleted(this, new cycleGasGaugeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/recordLayerData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string recordLayerData(string recordLayerData1) {
            object[] results = this.Invoke("recordLayerData", new object[] {
                        recordLayerData1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void recordLayerDataAsync(string recordLayerData1) {
            this.recordLayerDataAsync(recordLayerData1, null);
        }
        
        /// <remarks/>
        public void recordLayerDataAsync(string recordLayerData1, object userState) {
            if ((this.recordLayerDataOperationCompleted == null)) {
                this.recordLayerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecordLayerDataOperationCompleted);
            }
            this.InvokeAsync("recordLayerData", new object[] {
                        recordLayerData1}, this.recordLayerDataOperationCompleted, userState);
        }
        
        private void OnrecordLayerDataOperationCompleted(object arg) {
            if ((this.recordLayerDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recordLayerDataCompleted(this, new recordLayerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/cycleDataAll", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cycleDataAll([System.Xml.Serialization.XmlElementAttribute("cycleDataAll")] string cycleDataAll1) {
            object[] results = this.Invoke("cycleDataAll", new object[] {
                        cycleDataAll1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cycleDataAllAsync(string cycleDataAll1) {
            this.cycleDataAllAsync(cycleDataAll1, null);
        }
        
        /// <remarks/>
        public void cycleDataAllAsync(string cycleDataAll1, object userState) {
            if ((this.cycleDataAllOperationCompleted == null)) {
                this.cycleDataAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OncycleDataAllOperationCompleted);
            }
            this.InvokeAsync("cycleDataAll", new object[] {
                        cycleDataAll1}, this.cycleDataAllOperationCompleted, userState);
        }
        
        private void OncycleDataAllOperationCompleted(object arg) {
            if ((this.cycleDataAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cycleDataAllCompleted(this, new cycleDataAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckAddressLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckAddressLink(string checkAddress) {
            object[] results = this.Invoke("CheckAddressLink", new object[] {
                        checkAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAddressLinkAsync(string checkAddress) {
            this.CheckAddressLinkAsync(checkAddress, null);
        }
        
        /// <remarks/>
        public void CheckAddressLinkAsync(string checkAddress, object userState) {
            if ((this.CheckAddressLinkOperationCompleted == null)) {
                this.CheckAddressLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAddressLinkOperationCompleted);
            }
            this.InvokeAsync("CheckAddressLink", new object[] {
                        checkAddress}, this.CheckAddressLinkOperationCompleted, userState);
        }
        
        private void OnCheckAddressLinkOperationCompleted(object arg) {
            if ((this.CheckAddressLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAddressLinkCompleted(this, new CheckAddressLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetStencilInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStencilInfo(string FIX_SN, string FIX_ITEM_CODE, string SUPPLIER_CODE, string FIX_STORAGE_TIME, string FIX_STORAGE_MAN, string FIX_STATUS, string FIX_AREA_SN, string FIX_GWTYPE, string FIX_MT_LASTDATE, string FIX_USERING_QTY, string FIX_MAX_USERING_QTY) {
            object[] results = this.Invoke("GetStencilInfo", new object[] {
                        FIX_SN,
                        FIX_ITEM_CODE,
                        SUPPLIER_CODE,
                        FIX_STORAGE_TIME,
                        FIX_STORAGE_MAN,
                        FIX_STATUS,
                        FIX_AREA_SN,
                        FIX_GWTYPE,
                        FIX_MT_LASTDATE,
                        FIX_USERING_QTY,
                        FIX_MAX_USERING_QTY});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStencilInfoAsync(string FIX_SN, string FIX_ITEM_CODE, string SUPPLIER_CODE, string FIX_STORAGE_TIME, string FIX_STORAGE_MAN, string FIX_STATUS, string FIX_AREA_SN, string FIX_GWTYPE, string FIX_MT_LASTDATE, string FIX_USERING_QTY, string FIX_MAX_USERING_QTY) {
            this.GetStencilInfoAsync(FIX_SN, FIX_ITEM_CODE, SUPPLIER_CODE, FIX_STORAGE_TIME, FIX_STORAGE_MAN, FIX_STATUS, FIX_AREA_SN, FIX_GWTYPE, FIX_MT_LASTDATE, FIX_USERING_QTY, FIX_MAX_USERING_QTY, null);
        }
        
        /// <remarks/>
        public void GetStencilInfoAsync(string FIX_SN, string FIX_ITEM_CODE, string SUPPLIER_CODE, string FIX_STORAGE_TIME, string FIX_STORAGE_MAN, string FIX_STATUS, string FIX_AREA_SN, string FIX_GWTYPE, string FIX_MT_LASTDATE, string FIX_USERING_QTY, string FIX_MAX_USERING_QTY, object userState) {
            if ((this.GetStencilInfoOperationCompleted == null)) {
                this.GetStencilInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStencilInfoOperationCompleted);
            }
            this.InvokeAsync("GetStencilInfo", new object[] {
                        FIX_SN,
                        FIX_ITEM_CODE,
                        SUPPLIER_CODE,
                        FIX_STORAGE_TIME,
                        FIX_STORAGE_MAN,
                        FIX_STATUS,
                        FIX_AREA_SN,
                        FIX_GWTYPE,
                        FIX_MT_LASTDATE,
                        FIX_USERING_QTY,
                        FIX_MAX_USERING_QTY}, this.GetStencilInfoOperationCompleted, userState);
        }
        
        private void OnGetStencilInfoOperationCompleted(object arg) {
            if ((this.GetStencilInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStencilInfoCompleted(this, new GetStencilInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckAddressAndPalletLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckAddressAndPalletLink(string checkAddress, string palletNumber, string LICENSEPLATENUMBER, string CHECK_USER) {
            object[] results = this.Invoke("CheckAddressAndPalletLink", new object[] {
                        checkAddress,
                        palletNumber,
                        LICENSEPLATENUMBER,
                        CHECK_USER});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAddressAndPalletLinkAsync(string checkAddress, string palletNumber, string LICENSEPLATENUMBER, string CHECK_USER) {
            this.CheckAddressAndPalletLinkAsync(checkAddress, palletNumber, LICENSEPLATENUMBER, CHECK_USER, null);
        }
        
        /// <remarks/>
        public void CheckAddressAndPalletLinkAsync(string checkAddress, string palletNumber, string LICENSEPLATENUMBER, string CHECK_USER, object userState) {
            if ((this.CheckAddressAndPalletLinkOperationCompleted == null)) {
                this.CheckAddressAndPalletLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAddressAndPalletLinkOperationCompleted);
            }
            this.InvokeAsync("CheckAddressAndPalletLink", new object[] {
                        checkAddress,
                        palletNumber,
                        LICENSEPLATENUMBER,
                        CHECK_USER}, this.CheckAddressAndPalletLinkOperationCompleted, userState);
        }
        
        private void OnCheckAddressAndPalletLinkOperationCompleted(object arg) {
            if ((this.CheckAddressAndPalletLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAddressAndPalletLinkCompleted(this, new CheckAddressAndPalletLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PrintProductUpload", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintProductUpload(string product_sn, string item_code, string mo_number, string user_code, string m_machineno) {
            object[] results = this.Invoke("PrintProductUpload", new object[] {
                        product_sn,
                        item_code,
                        mo_number,
                        user_code,
                        m_machineno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintProductUploadAsync(string product_sn, string item_code, string mo_number, string user_code, string m_machineno) {
            this.PrintProductUploadAsync(product_sn, item_code, mo_number, user_code, m_machineno, null);
        }
        
        /// <remarks/>
        public void PrintProductUploadAsync(string product_sn, string item_code, string mo_number, string user_code, string m_machineno, object userState) {
            if ((this.PrintProductUploadOperationCompleted == null)) {
                this.PrintProductUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintProductUploadOperationCompleted);
            }
            this.InvokeAsync("PrintProductUpload", new object[] {
                        product_sn,
                        item_code,
                        mo_number,
                        user_code,
                        m_machineno}, this.PrintProductUploadOperationCompleted, userState);
        }
        
        private void OnPrintProductUploadOperationCompleted(object arg) {
            if ((this.PrintProductUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintProductUploadCompleted(this, new PrintProductUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PrintCheckProduct", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintCheckProduct(string product_sn, string item_code, string mo_number, string user_code, string m_machineno) {
            object[] results = this.Invoke("PrintCheckProduct", new object[] {
                        product_sn,
                        item_code,
                        mo_number,
                        user_code,
                        m_machineno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintCheckProductAsync(string product_sn, string item_code, string mo_number, string user_code, string m_machineno) {
            this.PrintCheckProductAsync(product_sn, item_code, mo_number, user_code, m_machineno, null);
        }
        
        /// <remarks/>
        public void PrintCheckProductAsync(string product_sn, string item_code, string mo_number, string user_code, string m_machineno, object userState) {
            if ((this.PrintCheckProductOperationCompleted == null)) {
                this.PrintCheckProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintCheckProductOperationCompleted);
            }
            this.InvokeAsync("PrintCheckProduct", new object[] {
                        product_sn,
                        item_code,
                        mo_number,
                        user_code,
                        m_machineno}, this.PrintCheckProductOperationCompleted, userState);
        }
        
        private void OnPrintCheckProductOperationCompleted(object arg) {
            if ((this.PrintCheckProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintCheckProductCompleted(this, new PrintCheckProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSupplierInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSupplierInfo(string strSN) {
            object[] results = this.Invoke("GetSupplierInfo", new object[] {
                        strSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupplierInfoAsync(string strSN) {
            this.GetSupplierInfoAsync(strSN, null);
        }
        
        /// <remarks/>
        public void GetSupplierInfoAsync(string strSN, object userState) {
            if ((this.GetSupplierInfoOperationCompleted == null)) {
                this.GetSupplierInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupplierInfoOperationCompleted);
            }
            this.InvokeAsync("GetSupplierInfo", new object[] {
                        strSN}, this.GetSupplierInfoOperationCompleted, userState);
        }
        
        private void OnGetSupplierInfoOperationCompleted(object arg) {
            if ((this.GetSupplierInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupplierInfoCompleted(this, new GetSupplierInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/Initialize_User", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Initialize_User(string userID) {
            object[] results = this.Invoke("Initialize_User", new object[] {
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize_UserAsync(string userID) {
            this.Initialize_UserAsync(userID, null);
        }
        
        /// <remarks/>
        public void Initialize_UserAsync(string userID, object userState) {
            if ((this.Initialize_UserOperationCompleted == null)) {
                this.Initialize_UserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize_UserOperationCompleted);
            }
            this.InvokeAsync("Initialize_User", new object[] {
                        userID}, this.Initialize_UserOperationCompleted, userState);
        }
        
        private void OnInitialize_UserOperationCompleted(object arg) {
            if ((this.Initialize_UserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize_UserCompleted(this, new Initialize_UserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/Transfer_Position", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Transfer_Position(string strType, string vorna, string name, string reason, string stype, string datum) {
            object[] results = this.Invoke("Transfer_Position", new object[] {
                        strType,
                        vorna,
                        name,
                        reason,
                        stype,
                        datum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Transfer_PositionAsync(string strType, string vorna, string name, string reason, string stype, string datum) {
            this.Transfer_PositionAsync(strType, vorna, name, reason, stype, datum, null);
        }
        
        /// <remarks/>
        public void Transfer_PositionAsync(string strType, string vorna, string name, string reason, string stype, string datum, object userState) {
            if ((this.Transfer_PositionOperationCompleted == null)) {
                this.Transfer_PositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransfer_PositionOperationCompleted);
            }
            this.InvokeAsync("Transfer_Position", new object[] {
                        strType,
                        vorna,
                        name,
                        reason,
                        stype,
                        datum}, this.Transfer_PositionOperationCompleted, userState);
        }
        
        private void OnTransfer_PositionOperationCompleted(object arg) {
            if ((this.Transfer_PositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Transfer_PositionCompleted(this, new Transfer_PositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetOCV_Data", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOCV_Data(string Cell_SN) {
            object[] results = this.Invoke("GetOCV_Data", new object[] {
                        Cell_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOCV_DataAsync(string Cell_SN) {
            this.GetOCV_DataAsync(Cell_SN, null);
        }
        
        /// <remarks/>
        public void GetOCV_DataAsync(string Cell_SN, object userState) {
            if ((this.GetOCV_DataOperationCompleted == null)) {
                this.GetOCV_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOCV_DataOperationCompleted);
            }
            this.InvokeAsync("GetOCV_Data", new object[] {
                        Cell_SN}, this.GetOCV_DataOperationCompleted, userState);
        }
        
        private void OnGetOCV_DataOperationCompleted(object arg) {
            if ((this.GetOCV_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOCV_DataCompleted(this, new GetOCV_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DelSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelSN(string M_SN, string M_EMP_NO, string M_EMP_PWD) {
            object[] results = this.Invoke("DelSN", new object[] {
                        M_SN,
                        M_EMP_NO,
                        M_EMP_PWD});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelSNAsync(string M_SN, string M_EMP_NO, string M_EMP_PWD) {
            this.DelSNAsync(M_SN, M_EMP_NO, M_EMP_PWD, null);
        }
        
        /// <remarks/>
        public void DelSNAsync(string M_SN, string M_EMP_NO, string M_EMP_PWD, object userState) {
            if ((this.DelSNOperationCompleted == null)) {
                this.DelSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelSNOperationCompleted);
            }
            this.InvokeAsync("DelSN", new object[] {
                        M_SN,
                        M_EMP_NO,
                        M_EMP_PWD}, this.DelSNOperationCompleted, userState);
        }
        
        private void OnDelSNOperationCompleted(object arg) {
            if ((this.DelSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelSNCompleted(this, new DelSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckUserDo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckUserDo(string M_USERNO, string M_PASSWORD, string M_MACHINENO) {
            object[] results = this.Invoke("CheckUserDo", new object[] {
                        M_USERNO,
                        M_PASSWORD,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserDoAsync(string M_USERNO, string M_PASSWORD, string M_MACHINENO) {
            this.CheckUserDoAsync(M_USERNO, M_PASSWORD, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void CheckUserDoAsync(string M_USERNO, string M_PASSWORD, string M_MACHINENO, object userState) {
            if ((this.CheckUserDoOperationCompleted == null)) {
                this.CheckUserDoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserDoOperationCompleted);
            }
            this.InvokeAsync("CheckUserDo", new object[] {
                        M_USERNO,
                        M_PASSWORD,
                        M_MACHINENO}, this.CheckUserDoOperationCompleted, userState);
        }
        
        private void OnCheckUserDoOperationCompleted(object arg) {
            if ((this.CheckUserDoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserDoCompleted(this, new CheckUserDoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BatteryLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatteryLink(string M_MO, string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO) {
            object[] results = this.Invoke("BatteryLink", new object[] {
                        M_MO,
                        M_BATTERY_SN,
                        M_BATTERIES_SN,
                        M_EMP_NO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatteryLinkAsync(string M_MO, string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO) {
            this.BatteryLinkAsync(M_MO, M_BATTERY_SN, M_BATTERIES_SN, M_EMP_NO, null);
        }
        
        /// <remarks/>
        public void BatteryLinkAsync(string M_MO, string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO, object userState) {
            if ((this.BatteryLinkOperationCompleted == null)) {
                this.BatteryLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatteryLinkOperationCompleted);
            }
            this.InvokeAsync("BatteryLink", new object[] {
                        M_MO,
                        M_BATTERY_SN,
                        M_BATTERIES_SN,
                        M_EMP_NO}, this.BatteryLinkOperationCompleted, userState);
        }
        
        private void OnBatteryLinkOperationCompleted(object arg) {
            if ((this.BatteryLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatteryLinkCompleted(this, new BatteryLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DelBatteryLink", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelBatteryLink(string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO) {
            object[] results = this.Invoke("DelBatteryLink", new object[] {
                        M_BATTERY_SN,
                        M_BATTERIES_SN,
                        M_EMP_NO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelBatteryLinkAsync(string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO) {
            this.DelBatteryLinkAsync(M_BATTERY_SN, M_BATTERIES_SN, M_EMP_NO, null);
        }
        
        /// <remarks/>
        public void DelBatteryLinkAsync(string M_BATTERY_SN, string M_BATTERIES_SN, string M_EMP_NO, object userState) {
            if ((this.DelBatteryLinkOperationCompleted == null)) {
                this.DelBatteryLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelBatteryLinkOperationCompleted);
            }
            this.InvokeAsync("DelBatteryLink", new object[] {
                        M_BATTERY_SN,
                        M_BATTERIES_SN,
                        M_EMP_NO}, this.DelBatteryLinkOperationCompleted, userState);
        }
        
        private void OnDelBatteryLinkOperationCompleted(object arg) {
            if ((this.DelBatteryLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelBatteryLinkCompleted(this, new DelBatteryLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBatterySN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBatterySN(string M_BATTERIES_SN) {
            object[] results = this.Invoke("GetBatterySN", new object[] {
                        M_BATTERIES_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBatterySNAsync(string M_BATTERIES_SN) {
            this.GetBatterySNAsync(M_BATTERIES_SN, null);
        }
        
        /// <remarks/>
        public void GetBatterySNAsync(string M_BATTERIES_SN, object userState) {
            if ((this.GetBatterySNOperationCompleted == null)) {
                this.GetBatterySNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBatterySNOperationCompleted);
            }
            this.InvokeAsync("GetBatterySN", new object[] {
                        M_BATTERIES_SN}, this.GetBatterySNOperationCompleted, userState);
        }
        
        private void OnGetBatterySNOperationCompleted(object arg) {
            if ((this.GetBatterySNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBatterySNCompleted(this, new GetBatterySNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBatteriesSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBatteriesSN(string M_BATTERY_SN) {
            object[] results = this.Invoke("GetBatteriesSN", new object[] {
                        M_BATTERY_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBatteriesSNAsync(string M_BATTERY_SN) {
            this.GetBatteriesSNAsync(M_BATTERY_SN, null);
        }
        
        /// <remarks/>
        public void GetBatteriesSNAsync(string M_BATTERY_SN, object userState) {
            if ((this.GetBatteriesSNOperationCompleted == null)) {
                this.GetBatteriesSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBatteriesSNOperationCompleted);
            }
            this.InvokeAsync("GetBatteriesSN", new object[] {
                        M_BATTERY_SN}, this.GetBatteriesSNOperationCompleted, userState);
        }
        
        private void OnGetBatteriesSNOperationCompleted(object arg) {
            if ((this.GetBatteriesSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBatteriesSNCompleted(this, new GetBatteriesSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/LargePanelCheck", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LargePanelCheck(string M_LARGE_PANEL, string M_MO, string M_WORKSTATION_SN, int M_PANELS, string RES) {
            object[] results = this.Invoke("LargePanelCheck", new object[] {
                        M_LARGE_PANEL,
                        M_MO,
                        M_WORKSTATION_SN,
                        M_PANELS,
                        RES});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LargePanelCheckAsync(string M_LARGE_PANEL, string M_MO, string M_WORKSTATION_SN, int M_PANELS, string RES) {
            this.LargePanelCheckAsync(M_LARGE_PANEL, M_MO, M_WORKSTATION_SN, M_PANELS, RES, null);
        }
        
        /// <remarks/>
        public void LargePanelCheckAsync(string M_LARGE_PANEL, string M_MO, string M_WORKSTATION_SN, int M_PANELS, string RES, object userState) {
            if ((this.LargePanelCheckOperationCompleted == null)) {
                this.LargePanelCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLargePanelCheckOperationCompleted);
            }
            this.InvokeAsync("LargePanelCheck", new object[] {
                        M_LARGE_PANEL,
                        M_MO,
                        M_WORKSTATION_SN,
                        M_PANELS,
                        RES}, this.LargePanelCheckOperationCompleted, userState);
        }
        
        private void OnLargePanelCheckOperationCompleted(object arg) {
            if ((this.LargePanelCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LargePanelCheckCompleted(this, new LargePanelCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/PanelLargeToSmall", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PanelLargeToSmall(string M_LARGE_PANEL, string M_SMALL_PANEL, string M_MO, string M_WORKSTATION_SN, string M_EMP, string M_PANELS, string RES) {
            object[] results = this.Invoke("PanelLargeToSmall", new object[] {
                        M_LARGE_PANEL,
                        M_SMALL_PANEL,
                        M_MO,
                        M_WORKSTATION_SN,
                        M_EMP,
                        M_PANELS,
                        RES});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PanelLargeToSmallAsync(string M_LARGE_PANEL, string M_SMALL_PANEL, string M_MO, string M_WORKSTATION_SN, string M_EMP, string M_PANELS, string RES) {
            this.PanelLargeToSmallAsync(M_LARGE_PANEL, M_SMALL_PANEL, M_MO, M_WORKSTATION_SN, M_EMP, M_PANELS, RES, null);
        }
        
        /// <remarks/>
        public void PanelLargeToSmallAsync(string M_LARGE_PANEL, string M_SMALL_PANEL, string M_MO, string M_WORKSTATION_SN, string M_EMP, string M_PANELS, string RES, object userState) {
            if ((this.PanelLargeToSmallOperationCompleted == null)) {
                this.PanelLargeToSmallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPanelLargeToSmallOperationCompleted);
            }
            this.InvokeAsync("PanelLargeToSmall", new object[] {
                        M_LARGE_PANEL,
                        M_SMALL_PANEL,
                        M_MO,
                        M_WORKSTATION_SN,
                        M_EMP,
                        M_PANELS,
                        RES}, this.PanelLargeToSmallOperationCompleted, userState);
        }
        
        private void OnPanelLargeToSmallOperationCompleted(object arg) {
            if ((this.PanelLargeToSmallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PanelLargeToSmallCompleted(this, new PanelLargeToSmallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/AgIngDeBugEvent", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AgIngDeBugEvent(string M_SN, string M_MO, string M_TIME, string M_EVENT, string M_STATUS, string M_OTHER) {
            object[] results = this.Invoke("AgIngDeBugEvent", new object[] {
                        M_SN,
                        M_MO,
                        M_TIME,
                        M_EVENT,
                        M_STATUS,
                        M_OTHER});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AgIngDeBugEventAsync(string M_SN, string M_MO, string M_TIME, string M_EVENT, string M_STATUS, string M_OTHER) {
            this.AgIngDeBugEventAsync(M_SN, M_MO, M_TIME, M_EVENT, M_STATUS, M_OTHER, null);
        }
        
        /// <remarks/>
        public void AgIngDeBugEventAsync(string M_SN, string M_MO, string M_TIME, string M_EVENT, string M_STATUS, string M_OTHER, object userState) {
            if ((this.AgIngDeBugEventOperationCompleted == null)) {
                this.AgIngDeBugEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgIngDeBugEventOperationCompleted);
            }
            this.InvokeAsync("AgIngDeBugEvent", new object[] {
                        M_SN,
                        M_MO,
                        M_TIME,
                        M_EVENT,
                        M_STATUS,
                        M_OTHER}, this.AgIngDeBugEventOperationCompleted, userState);
        }
        
        private void OnAgIngDeBugEventOperationCompleted(object arg) {
            if ((this.AgIngDeBugEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgIngDeBugEventCompleted(this, new AgIngDeBugEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/AgIngDeBugData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AgIngDeBugData(string M_SN, string M_MO, string M_STATUS, string M_OTHER, string M_TEST_DATA) {
            object[] results = this.Invoke("AgIngDeBugData", new object[] {
                        M_SN,
                        M_MO,
                        M_STATUS,
                        M_OTHER,
                        M_TEST_DATA});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AgIngDeBugDataAsync(string M_SN, string M_MO, string M_STATUS, string M_OTHER, string M_TEST_DATA) {
            this.AgIngDeBugDataAsync(M_SN, M_MO, M_STATUS, M_OTHER, M_TEST_DATA, null);
        }
        
        /// <remarks/>
        public void AgIngDeBugDataAsync(string M_SN, string M_MO, string M_STATUS, string M_OTHER, string M_TEST_DATA, object userState) {
            if ((this.AgIngDeBugDataOperationCompleted == null)) {
                this.AgIngDeBugDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgIngDeBugDataOperationCompleted);
            }
            this.InvokeAsync("AgIngDeBugData", new object[] {
                        M_SN,
                        M_MO,
                        M_STATUS,
                        M_OTHER,
                        M_TEST_DATA}, this.AgIngDeBugDataOperationCompleted, userState);
        }
        
        private void OnAgIngDeBugDataOperationCompleted(object arg) {
            if ((this.AgIngDeBugDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgIngDeBugDataCompleted(this, new AgIngDeBugDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GroupTest", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GroupTest(string M_SN, string M_MACHINCENO, string M_EMP) {
            object[] results = this.Invoke("GroupTest", new object[] {
                        M_SN,
                        M_MACHINCENO,
                        M_EMP});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GroupTestAsync(string M_SN, string M_MACHINCENO, string M_EMP) {
            this.GroupTestAsync(M_SN, M_MACHINCENO, M_EMP, null);
        }
        
        /// <remarks/>
        public void GroupTestAsync(string M_SN, string M_MACHINCENO, string M_EMP, object userState) {
            if ((this.GroupTestOperationCompleted == null)) {
                this.GroupTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGroupTestOperationCompleted);
            }
            this.InvokeAsync("GroupTest", new object[] {
                        M_SN,
                        M_MACHINCENO,
                        M_EMP}, this.GroupTestOperationCompleted, userState);
        }
        
        private void OnGroupTestOperationCompleted(object arg) {
            if ((this.GroupTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GroupTestCompleted(this, new GroupTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GroupTestCommon", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GroupTestCommon(string M_SN, string M_MACHINCENO, string M_EMP, string M_MO) {
            object[] results = this.Invoke("GroupTestCommon", new object[] {
                        M_SN,
                        M_MACHINCENO,
                        M_EMP,
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GroupTestCommonAsync(string M_SN, string M_MACHINCENO, string M_EMP, string M_MO) {
            this.GroupTestCommonAsync(M_SN, M_MACHINCENO, M_EMP, M_MO, null);
        }
        
        /// <remarks/>
        public void GroupTestCommonAsync(string M_SN, string M_MACHINCENO, string M_EMP, string M_MO, object userState) {
            if ((this.GroupTestCommonOperationCompleted == null)) {
                this.GroupTestCommonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGroupTestCommonOperationCompleted);
            }
            this.InvokeAsync("GroupTestCommon", new object[] {
                        M_SN,
                        M_MACHINCENO,
                        M_EMP,
                        M_MO}, this.GroupTestCommonOperationCompleted, userState);
        }
        
        private void OnGroupTestCommonOperationCompleted(object arg) {
            if ((this.GroupTestCommonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GroupTestCommonCompleted(this, new GroupTestCommonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckSupplierSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckSupplierSN(string M_SN) {
            object[] results = this.Invoke("CheckSupplierSN", new object[] {
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSupplierSNAsync(string M_SN) {
            this.CheckSupplierSNAsync(M_SN, null);
        }
        
        /// <remarks/>
        public void CheckSupplierSNAsync(string M_SN, object userState) {
            if ((this.CheckSupplierSNOperationCompleted == null)) {
                this.CheckSupplierSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSupplierSNOperationCompleted);
            }
            this.InvokeAsync("CheckSupplierSN", new object[] {
                        M_SN}, this.CheckSupplierSNOperationCompleted, userState);
        }
        
        private void OnCheckSupplierSNOperationCompleted(object arg) {
            if ((this.CheckSupplierSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSupplierSNCompleted(this, new CheckSupplierSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/WeldInput", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WeldInput(string M_SN, string M_MO, string M_USERNO, string M_MACHINENO) {
            object[] results = this.Invoke("WeldInput", new object[] {
                        M_SN,
                        M_MO,
                        M_USERNO,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WeldInputAsync(string M_SN, string M_MO, string M_USERNO, string M_MACHINENO) {
            this.WeldInputAsync(M_SN, M_MO, M_USERNO, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void WeldInputAsync(string M_SN, string M_MO, string M_USERNO, string M_MACHINENO, object userState) {
            if ((this.WeldInputOperationCompleted == null)) {
                this.WeldInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWeldInputOperationCompleted);
            }
            this.InvokeAsync("WeldInput", new object[] {
                        M_SN,
                        M_MO,
                        M_USERNO,
                        M_MACHINENO}, this.WeldInputOperationCompleted, userState);
        }
        
        private void OnWeldInputOperationCompleted(object arg) {
            if ((this.WeldInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WeldInputCompleted(this, new WeldInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/AutoSelectInput", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AutoSelectInput(string M_SN, string M_MO, string M_USERNO, string M_MACHINENO, string M_ITEMVALUE) {
            object[] results = this.Invoke("AutoSelectInput", new object[] {
                        M_SN,
                        M_MO,
                        M_USERNO,
                        M_MACHINENO,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AutoSelectInputAsync(string M_SN, string M_MO, string M_USERNO, string M_MACHINENO, string M_ITEMVALUE) {
            this.AutoSelectInputAsync(M_SN, M_MO, M_USERNO, M_MACHINENO, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void AutoSelectInputAsync(string M_SN, string M_MO, string M_USERNO, string M_MACHINENO, string M_ITEMVALUE, object userState) {
            if ((this.AutoSelectInputOperationCompleted == null)) {
                this.AutoSelectInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoSelectInputOperationCompleted);
            }
            this.InvokeAsync("AutoSelectInput", new object[] {
                        M_SN,
                        M_MO,
                        M_USERNO,
                        M_MACHINENO,
                        M_ITEMVALUE}, this.AutoSelectInputOperationCompleted, userState);
        }
        
        private void OnAutoSelectInputOperationCompleted(object arg) {
            if ((this.AutoSelectInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoSelectInputCompleted(this, new AutoSelectInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/WIPTESTSAMPLE", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WIPTESTSAMPLE(string M_MACHINENO, string M_SN, string M_NO, string M_EMP, string M_ITEMVALUE, string M_RESULT) {
            object[] results = this.Invoke("WIPTESTSAMPLE", new object[] {
                        M_MACHINENO,
                        M_SN,
                        M_NO,
                        M_EMP,
                        M_ITEMVALUE,
                        M_RESULT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WIPTESTSAMPLEAsync(string M_MACHINENO, string M_SN, string M_NO, string M_EMP, string M_ITEMVALUE, string M_RESULT) {
            this.WIPTESTSAMPLEAsync(M_MACHINENO, M_SN, M_NO, M_EMP, M_ITEMVALUE, M_RESULT, null);
        }
        
        /// <remarks/>
        public void WIPTESTSAMPLEAsync(string M_MACHINENO, string M_SN, string M_NO, string M_EMP, string M_ITEMVALUE, string M_RESULT, object userState) {
            if ((this.WIPTESTSAMPLEOperationCompleted == null)) {
                this.WIPTESTSAMPLEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWIPTESTSAMPLEOperationCompleted);
            }
            this.InvokeAsync("WIPTESTSAMPLE", new object[] {
                        M_MACHINENO,
                        M_SN,
                        M_NO,
                        M_EMP,
                        M_ITEMVALUE,
                        M_RESULT}, this.WIPTESTSAMPLEOperationCompleted, userState);
        }
        
        private void OnWIPTESTSAMPLEOperationCompleted(object arg) {
            if ((this.WIPTESTSAMPLECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WIPTESTSAMPLECompleted(this, new WIPTESTSAMPLECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GETSAMPLETESTDATA", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GETSAMPLETESTDATA(string M_SN) {
            object[] results = this.Invoke("GETSAMPLETESTDATA", new object[] {
                        M_SN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GETSAMPLETESTDATAAsync(string M_SN) {
            this.GETSAMPLETESTDATAAsync(M_SN, null);
        }
        
        /// <remarks/>
        public void GETSAMPLETESTDATAAsync(string M_SN, object userState) {
            if ((this.GETSAMPLETESTDATAOperationCompleted == null)) {
                this.GETSAMPLETESTDATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGETSAMPLETESTDATAOperationCompleted);
            }
            this.InvokeAsync("GETSAMPLETESTDATA", new object[] {
                        M_SN}, this.GETSAMPLETESTDATAOperationCompleted, userState);
        }
        
        private void OnGETSAMPLETESTDATAOperationCompleted(object arg) {
            if ((this.GETSAMPLETESTDATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GETSAMPLETESTDATACompleted(this, new GETSAMPLETESTDATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GETTESTDATA", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GETTESTDATA(string M_MACHINENO, string M_SN, string M_NO) {
            object[] results = this.Invoke("GETTESTDATA", new object[] {
                        M_MACHINENO,
                        M_SN,
                        M_NO});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GETTESTDATAAsync(string M_MACHINENO, string M_SN, string M_NO) {
            this.GETTESTDATAAsync(M_MACHINENO, M_SN, M_NO, null);
        }
        
        /// <remarks/>
        public void GETTESTDATAAsync(string M_MACHINENO, string M_SN, string M_NO, object userState) {
            if ((this.GETTESTDATAOperationCompleted == null)) {
                this.GETTESTDATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGETTESTDATAOperationCompleted);
            }
            this.InvokeAsync("GETTESTDATA", new object[] {
                        M_MACHINENO,
                        M_SN,
                        M_NO}, this.GETTESTDATAOperationCompleted, userState);
        }
        
        private void OnGETTESTDATAOperationCompleted(object arg) {
            if ((this.GETTESTDATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GETTESTDATACompleted(this, new GETTESTDATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/WIPTEST", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WIPTEST(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            object[] results = this.Invoke("WIPTEST", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WIPTESTAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            this.WIPTESTAsync(M_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ERROR, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void WIPTESTAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, object userState) {
            if ((this.WIPTESTOperationCompleted == null)) {
                this.WIPTESTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWIPTESTOperationCompleted);
            }
            this.InvokeAsync("WIPTEST", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE}, this.WIPTESTOperationCompleted, userState);
        }
        
        private void OnWIPTESTOperationCompleted(object arg) {
            if ((this.WIPTESTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WIPTESTCompleted(this, new WIPTESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/WipTestConversion", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WipTestConversion(string M_ODL_PRODUCT_SN, string M_NEW_PRODUCT_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            object[] results = this.Invoke("WipTestConversion", new object[] {
                        M_ODL_PRODUCT_SN,
                        M_NEW_PRODUCT_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WipTestConversionAsync(string M_ODL_PRODUCT_SN, string M_NEW_PRODUCT_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            this.WipTestConversionAsync(M_ODL_PRODUCT_SN, M_NEW_PRODUCT_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ERROR, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void WipTestConversionAsync(string M_ODL_PRODUCT_SN, string M_NEW_PRODUCT_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, object userState) {
            if ((this.WipTestConversionOperationCompleted == null)) {
                this.WipTestConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWipTestConversionOperationCompleted);
            }
            this.InvokeAsync("WipTestConversion", new object[] {
                        M_ODL_PRODUCT_SN,
                        M_NEW_PRODUCT_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE}, this.WipTestConversionOperationCompleted, userState);
        }
        
        private void OnWipTestConversionOperationCompleted(object arg) {
            if ((this.WipTestConversionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WipTestConversionCompleted(this, new WipTestConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/OfflineDataUpload", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OfflineDataUpload(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            object[] results = this.Invoke("OfflineDataUpload", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OfflineDataUploadAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            this.OfflineDataUploadAsync(M_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ERROR, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void OfflineDataUploadAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, object userState) {
            if ((this.OfflineDataUploadOperationCompleted == null)) {
                this.OfflineDataUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOfflineDataUploadOperationCompleted);
            }
            this.InvokeAsync("OfflineDataUpload", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE}, this.OfflineDataUploadOperationCompleted, userState);
        }
        
        private void OnOfflineDataUploadOperationCompleted(object arg) {
            if ((this.OfflineDataUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OfflineDataUploadCompleted(this, new OfflineDataUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/OfflineData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OfflineData(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            object[] results = this.Invoke("OfflineData", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OfflineDataAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE) {
            this.OfflineDataAsync(M_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ERROR, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void OfflineDataAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, object userState) {
            if ((this.OfflineDataOperationCompleted == null)) {
                this.OfflineDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOfflineDataOperationCompleted);
            }
            this.InvokeAsync("OfflineData", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE}, this.OfflineDataOperationCompleted, userState);
        }
        
        private void OnOfflineDataOperationCompleted(object arg) {
            if ((this.OfflineDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OfflineDataCompleted(this, new OfflineDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/WeldInputTest", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WeldInputTest(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, string M_MO) {
            object[] results = this.Invoke("WeldInputTest", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE,
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WeldInputTestAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, string M_MO) {
            this.WeldInputTestAsync(M_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ERROR, M_ITEMVALUE, M_MO, null);
        }
        
        /// <remarks/>
        public void WeldInputTestAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ERROR, string M_ITEMVALUE, string M_MO, object userState) {
            if ((this.WeldInputTestOperationCompleted == null)) {
                this.WeldInputTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWeldInputTestOperationCompleted);
            }
            this.InvokeAsync("WeldInputTest", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ERROR,
                        M_ITEMVALUE,
                        M_MO}, this.WeldInputTestOperationCompleted, userState);
        }
        
        private void OnWeldInputTestOperationCompleted(object arg) {
            if ((this.WeldInputTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WeldInputTestCompleted(this, new WeldInputTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SPITEST", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SPITEST(string M_SN, string M_MACHINENO, string M_ITEMVALUE) {
            object[] results = this.Invoke("SPITEST", new object[] {
                        M_SN,
                        M_MACHINENO,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SPITESTAsync(string M_SN, string M_MACHINENO, string M_ITEMVALUE) {
            this.SPITESTAsync(M_SN, M_MACHINENO, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void SPITESTAsync(string M_SN, string M_MACHINENO, string M_ITEMVALUE, object userState) {
            if ((this.SPITESTOperationCompleted == null)) {
                this.SPITESTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPITESTOperationCompleted);
            }
            this.InvokeAsync("SPITEST", new object[] {
                        M_SN,
                        M_MACHINENO,
                        M_ITEMVALUE}, this.SPITESTOperationCompleted, userState);
        }
        
        private void OnSPITESTOperationCompleted(object arg) {
            if ((this.SPITESTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPITESTCompleted(this, new SPITESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/AOITest", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AOITest(string M_SN, string M_EC_ALL_DATA, string M_POINT_ALL_DATA, string M_COUNT_ALL_DATA, string M_EMP, string M_NG_COUNT, string M_RESULT, string M_MACHINENO) {
            object[] results = this.Invoke("AOITest", new object[] {
                        M_SN,
                        M_EC_ALL_DATA,
                        M_POINT_ALL_DATA,
                        M_COUNT_ALL_DATA,
                        M_EMP,
                        M_NG_COUNT,
                        M_RESULT,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AOITestAsync(string M_SN, string M_EC_ALL_DATA, string M_POINT_ALL_DATA, string M_COUNT_ALL_DATA, string M_EMP, string M_NG_COUNT, string M_RESULT, string M_MACHINENO) {
            this.AOITestAsync(M_SN, M_EC_ALL_DATA, M_POINT_ALL_DATA, M_COUNT_ALL_DATA, M_EMP, M_NG_COUNT, M_RESULT, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void AOITestAsync(string M_SN, string M_EC_ALL_DATA, string M_POINT_ALL_DATA, string M_COUNT_ALL_DATA, string M_EMP, string M_NG_COUNT, string M_RESULT, string M_MACHINENO, object userState) {
            if ((this.AOITestOperationCompleted == null)) {
                this.AOITestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAOITestOperationCompleted);
            }
            this.InvokeAsync("AOITest", new object[] {
                        M_SN,
                        M_EC_ALL_DATA,
                        M_POINT_ALL_DATA,
                        M_COUNT_ALL_DATA,
                        M_EMP,
                        M_NG_COUNT,
                        M_RESULT,
                        M_MACHINENO}, this.AOITestOperationCompleted, userState);
        }
        
        private void OnAOITestOperationCompleted(object arg) {
            if ((this.AOITestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AOITestCompleted(this, new AOITestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/AddTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddTestData(string M_SN, string M_MACHINENO, string M_EMP, string M_ITEMVALUE, string M_TEST_RESULT) {
            object[] results = this.Invoke("AddTestData", new object[] {
                        M_SN,
                        M_MACHINENO,
                        M_EMP,
                        M_ITEMVALUE,
                        M_TEST_RESULT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestDataAsync(string M_SN, string M_MACHINENO, string M_EMP, string M_ITEMVALUE, string M_TEST_RESULT) {
            this.AddTestDataAsync(M_SN, M_MACHINENO, M_EMP, M_ITEMVALUE, M_TEST_RESULT, null);
        }
        
        /// <remarks/>
        public void AddTestDataAsync(string M_SN, string M_MACHINENO, string M_EMP, string M_ITEMVALUE, string M_TEST_RESULT, object userState) {
            if ((this.AddTestDataOperationCompleted == null)) {
                this.AddTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestDataOperationCompleted);
            }
            this.InvokeAsync("AddTestData", new object[] {
                        M_SN,
                        M_MACHINENO,
                        M_EMP,
                        M_ITEMVALUE,
                        M_TEST_RESULT}, this.AddTestDataOperationCompleted, userState);
        }
        
        private void OnAddTestDataOperationCompleted(object arg) {
            if ((this.AddTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestDataCompleted(this, new AddTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/OffLineDataNew", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OffLineDataNew(string M_SN, string M_TEST_RESULT, string M_EMP, string M_MACHINENO, string M_ITEMVALUE) {
            object[] results = this.Invoke("OffLineDataNew", new object[] {
                        M_SN,
                        M_TEST_RESULT,
                        M_EMP,
                        M_MACHINENO,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OffLineDataNewAsync(string M_SN, string M_TEST_RESULT, string M_EMP, string M_MACHINENO, string M_ITEMVALUE) {
            this.OffLineDataNewAsync(M_SN, M_TEST_RESULT, M_EMP, M_MACHINENO, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void OffLineDataNewAsync(string M_SN, string M_TEST_RESULT, string M_EMP, string M_MACHINENO, string M_ITEMVALUE, object userState) {
            if ((this.OffLineDataNewOperationCompleted == null)) {
                this.OffLineDataNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOffLineDataNewOperationCompleted);
            }
            this.InvokeAsync("OffLineDataNew", new object[] {
                        M_SN,
                        M_TEST_RESULT,
                        M_EMP,
                        M_MACHINENO,
                        M_ITEMVALUE}, this.OffLineDataNewOperationCompleted, userState);
        }
        
        private void OnOffLineDataNewOperationCompleted(object arg) {
            if ((this.OffLineDataNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OffLineDataNewCompleted(this, new OffLineDataNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckUserUnlock", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckUserUnlock(string M_USERNO, string M_PASSWORD) {
            object[] results = this.Invoke("CheckUserUnlock", new object[] {
                        M_USERNO,
                        M_PASSWORD});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserUnlockAsync(string M_USERNO, string M_PASSWORD) {
            this.CheckUserUnlockAsync(M_USERNO, M_PASSWORD, null);
        }
        
        /// <remarks/>
        public void CheckUserUnlockAsync(string M_USERNO, string M_PASSWORD, object userState) {
            if ((this.CheckUserUnlockOperationCompleted == null)) {
                this.CheckUserUnlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserUnlockOperationCompleted);
            }
            this.InvokeAsync("CheckUserUnlock", new object[] {
                        M_USERNO,
                        M_PASSWORD}, this.CheckUserUnlockOperationCompleted, userState);
        }
        
        private void OnCheckUserUnlockOperationCompleted(object arg) {
            if ((this.CheckUserUnlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserUnlockCompleted(this, new CheckUserUnlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBurinFilePathSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBurinFilePathSN(string M_SN) {
            object[] results = this.Invoke("GetBurinFilePathSN", new object[] {
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBurinFilePathSNAsync(string M_SN) {
            this.GetBurinFilePathSNAsync(M_SN, null);
        }
        
        /// <remarks/>
        public void GetBurinFilePathSNAsync(string M_SN, object userState) {
            if ((this.GetBurinFilePathSNOperationCompleted == null)) {
                this.GetBurinFilePathSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBurinFilePathSNOperationCompleted);
            }
            this.InvokeAsync("GetBurinFilePathSN", new object[] {
                        M_SN}, this.GetBurinFilePathSNOperationCompleted, userState);
        }
        
        private void OnGetBurinFilePathSNOperationCompleted(object arg) {
            if ((this.GetBurinFilePathSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBurinFilePathSNCompleted(this, new GetBurinFilePathSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBurinFilePath", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBurinFilePath(string M_ITEMCODE, string VER) {
            object[] results = this.Invoke("GetBurinFilePath", new object[] {
                        M_ITEMCODE,
                        VER});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBurinFilePathAsync(string M_ITEMCODE, string VER) {
            this.GetBurinFilePathAsync(M_ITEMCODE, VER, null);
        }
        
        /// <remarks/>
        public void GetBurinFilePathAsync(string M_ITEMCODE, string VER, object userState) {
            if ((this.GetBurinFilePathOperationCompleted == null)) {
                this.GetBurinFilePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBurinFilePathOperationCompleted);
            }
            this.InvokeAsync("GetBurinFilePath", new object[] {
                        M_ITEMCODE,
                        VER}, this.GetBurinFilePathOperationCompleted, userState);
        }
        
        private void OnGetBurinFilePathOperationCompleted(object arg) {
            if ((this.GetBurinFilePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBurinFilePathCompleted(this, new GetBurinFilePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetMoes", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMoes(string strWhere) {
            object[] results = this.Invoke("GetMoes", new object[] {
                        strWhere});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoesAsync(string strWhere) {
            this.GetMoesAsync(strWhere, null);
        }
        
        /// <remarks/>
        public void GetMoesAsync(string strWhere, object userState) {
            if ((this.GetMoesOperationCompleted == null)) {
                this.GetMoesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoesOperationCompleted);
            }
            this.InvokeAsync("GetMoes", new object[] {
                        strWhere}, this.GetMoesOperationCompleted, userState);
        }
        
        private void OnGetMoesOperationCompleted(object arg) {
            if ((this.GetMoesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoesCompleted(this, new GetMoesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MoExist", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MoExist(string M_MO) {
            object[] results = this.Invoke("MoExist", new object[] {
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MoExistAsync(string M_MO) {
            this.MoExistAsync(M_MO, null);
        }
        
        /// <remarks/>
        public void MoExistAsync(string M_MO, object userState) {
            if ((this.MoExistOperationCompleted == null)) {
                this.MoExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoExistOperationCompleted);
            }
            this.InvokeAsync("MoExist", new object[] {
                        M_MO}, this.MoExistOperationCompleted, userState);
        }
        
        private void OnMoExistOperationCompleted(object arg) {
            if ((this.MoExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoExistCompleted(this, new MoExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/AutoPasteLabeling", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AutoPasteLabeling(string M_SN, string M_CUSTOMER_SN, string M_MACHINENO, string M_USERNO) {
            object[] results = this.Invoke("AutoPasteLabeling", new object[] {
                        M_SN,
                        M_CUSTOMER_SN,
                        M_MACHINENO,
                        M_USERNO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AutoPasteLabelingAsync(string M_SN, string M_CUSTOMER_SN, string M_MACHINENO, string M_USERNO) {
            this.AutoPasteLabelingAsync(M_SN, M_CUSTOMER_SN, M_MACHINENO, M_USERNO, null);
        }
        
        /// <remarks/>
        public void AutoPasteLabelingAsync(string M_SN, string M_CUSTOMER_SN, string M_MACHINENO, string M_USERNO, object userState) {
            if ((this.AutoPasteLabelingOperationCompleted == null)) {
                this.AutoPasteLabelingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoPasteLabelingOperationCompleted);
            }
            this.InvokeAsync("AutoPasteLabeling", new object[] {
                        M_SN,
                        M_CUSTOMER_SN,
                        M_MACHINENO,
                        M_USERNO}, this.AutoPasteLabelingOperationCompleted, userState);
        }
        
        private void OnAutoPasteLabelingOperationCompleted(object arg) {
            if ((this.AutoPasteLabelingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoPasteLabelingCompleted(this, new AutoPasteLabelingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetTestItemValues", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTestItemValues(string M_SN, string M_MACHINENO) {
            object[] results = this.Invoke("GetTestItemValues", new object[] {
                        M_SN,
                        M_MACHINENO});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestItemValuesAsync(string M_SN, string M_MACHINENO) {
            this.GetTestItemValuesAsync(M_SN, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void GetTestItemValuesAsync(string M_SN, string M_MACHINENO, object userState) {
            if ((this.GetTestItemValuesOperationCompleted == null)) {
                this.GetTestItemValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestItemValuesOperationCompleted);
            }
            this.InvokeAsync("GetTestItemValues", new object[] {
                        M_SN,
                        M_MACHINENO}, this.GetTestItemValuesOperationCompleted, userState);
        }
        
        private void OnGetTestItemValuesOperationCompleted(object arg) {
            if ((this.GetTestItemValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestItemValuesCompleted(this, new GetTestItemValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductItemValues", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductItemValues(string M_SN, string M_MACHINENO, string M_ITEM) {
            object[] results = this.Invoke("GetProductItemValues", new object[] {
                        M_SN,
                        M_MACHINENO,
                        M_ITEM});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductItemValuesAsync(string M_SN, string M_MACHINENO, string M_ITEM) {
            this.GetProductItemValuesAsync(M_SN, M_MACHINENO, M_ITEM, null);
        }
        
        /// <remarks/>
        public void GetProductItemValuesAsync(string M_SN, string M_MACHINENO, string M_ITEM, object userState) {
            if ((this.GetProductItemValuesOperationCompleted == null)) {
                this.GetProductItemValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductItemValuesOperationCompleted);
            }
            this.InvokeAsync("GetProductItemValues", new object[] {
                        M_SN,
                        M_MACHINENO,
                        M_ITEM}, this.GetProductItemValuesOperationCompleted, userState);
        }
        
        private void OnGetProductItemValuesOperationCompleted(object arg) {
            if ((this.GetProductItemValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductItemValuesCompleted(this, new GetProductItemValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetMonumberSettingInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMonumberSettingInfo(string monumber, string data_type) {
            object[] results = this.Invoke("GetMonumberSettingInfo", new object[] {
                        monumber,
                        data_type});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMonumberSettingInfoAsync(string monumber, string data_type) {
            this.GetMonumberSettingInfoAsync(monumber, data_type, null);
        }
        
        /// <remarks/>
        public void GetMonumberSettingInfoAsync(string monumber, string data_type, object userState) {
            if ((this.GetMonumberSettingInfoOperationCompleted == null)) {
                this.GetMonumberSettingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMonumberSettingInfoOperationCompleted);
            }
            this.InvokeAsync("GetMonumberSettingInfo", new object[] {
                        monumber,
                        data_type}, this.GetMonumberSettingInfoOperationCompleted, userState);
        }
        
        private void OnGetMonumberSettingInfoOperationCompleted(object arg) {
            if ((this.GetMonumberSettingInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMonumberSettingInfoCompleted(this, new GetMonumberSettingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductItemLine", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductItemLine(string M_SN, string M_ITEM) {
            object[] results = this.Invoke("GetProductItemLine", new object[] {
                        M_SN,
                        M_ITEM});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductItemLineAsync(string M_SN, string M_ITEM) {
            this.GetProductItemLineAsync(M_SN, M_ITEM, null);
        }
        
        /// <remarks/>
        public void GetProductItemLineAsync(string M_SN, string M_ITEM, object userState) {
            if ((this.GetProductItemLineOperationCompleted == null)) {
                this.GetProductItemLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductItemLineOperationCompleted);
            }
            this.InvokeAsync("GetProductItemLine", new object[] {
                        M_SN,
                        M_ITEM}, this.GetProductItemLineOperationCompleted, userState);
        }
        
        private void OnGetProductItemLineOperationCompleted(object arg) {
            if ((this.GetProductItemLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductItemLineCompleted(this, new GetProductItemLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindBatteryProductSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindBatteryProductSn(string BATTERY_SERIAL, string M_SN, string M_MACHINENO, string M_EMP, string M_MO) {
            object[] results = this.Invoke("BindBatteryProductSn", new object[] {
                        BATTERY_SERIAL,
                        M_SN,
                        M_MACHINENO,
                        M_EMP,
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindBatteryProductSnAsync(string BATTERY_SERIAL, string M_SN, string M_MACHINENO, string M_EMP, string M_MO) {
            this.BindBatteryProductSnAsync(BATTERY_SERIAL, M_SN, M_MACHINENO, M_EMP, M_MO, null);
        }
        
        /// <remarks/>
        public void BindBatteryProductSnAsync(string BATTERY_SERIAL, string M_SN, string M_MACHINENO, string M_EMP, string M_MO, object userState) {
            if ((this.BindBatteryProductSnOperationCompleted == null)) {
                this.BindBatteryProductSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindBatteryProductSnOperationCompleted);
            }
            this.InvokeAsync("BindBatteryProductSn", new object[] {
                        BATTERY_SERIAL,
                        M_SN,
                        M_MACHINENO,
                        M_EMP,
                        M_MO}, this.BindBatteryProductSnOperationCompleted, userState);
        }
        
        private void OnBindBatteryProductSnOperationCompleted(object arg) {
            if ((this.BindBatteryProductSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindBatteryProductSnCompleted(this, new BindBatteryProductSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BoxProductSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoxProductSn(string BOX_NO, string M_SN, string M_MACHINENO, string M_EMP, string M_MO, string BOX_QTY) {
            object[] results = this.Invoke("BoxProductSn", new object[] {
                        BOX_NO,
                        M_SN,
                        M_MACHINENO,
                        M_EMP,
                        M_MO,
                        BOX_QTY});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoxProductSnAsync(string BOX_NO, string M_SN, string M_MACHINENO, string M_EMP, string M_MO, string BOX_QTY) {
            this.BoxProductSnAsync(BOX_NO, M_SN, M_MACHINENO, M_EMP, M_MO, BOX_QTY, null);
        }
        
        /// <remarks/>
        public void BoxProductSnAsync(string BOX_NO, string M_SN, string M_MACHINENO, string M_EMP, string M_MO, string BOX_QTY, object userState) {
            if ((this.BoxProductSnOperationCompleted == null)) {
                this.BoxProductSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoxProductSnOperationCompleted);
            }
            this.InvokeAsync("BoxProductSn", new object[] {
                        BOX_NO,
                        M_SN,
                        M_MACHINENO,
                        M_EMP,
                        M_MO,
                        BOX_QTY}, this.BoxProductSnOperationCompleted, userState);
        }
        
        private void OnBoxProductSnOperationCompleted(object arg) {
            if ((this.BoxProductSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoxProductSnCompleted(this, new BoxProductSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BoxProductSnes", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoxProductSnes(string BOX_NO, System.Data.DataSet M_SNES, string M_MACHINENO, string M_EMP, string M_MO, string BOX_QTY, string M_WEIGHT) {
            object[] results = this.Invoke("BoxProductSnes", new object[] {
                        BOX_NO,
                        M_SNES,
                        M_MACHINENO,
                        M_EMP,
                        M_MO,
                        BOX_QTY,
                        M_WEIGHT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoxProductSnesAsync(string BOX_NO, System.Data.DataSet M_SNES, string M_MACHINENO, string M_EMP, string M_MO, string BOX_QTY, string M_WEIGHT) {
            this.BoxProductSnesAsync(BOX_NO, M_SNES, M_MACHINENO, M_EMP, M_MO, BOX_QTY, M_WEIGHT, null);
        }
        
        /// <remarks/>
        public void BoxProductSnesAsync(string BOX_NO, System.Data.DataSet M_SNES, string M_MACHINENO, string M_EMP, string M_MO, string BOX_QTY, string M_WEIGHT, object userState) {
            if ((this.BoxProductSnesOperationCompleted == null)) {
                this.BoxProductSnesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoxProductSnesOperationCompleted);
            }
            this.InvokeAsync("BoxProductSnes", new object[] {
                        BOX_NO,
                        M_SNES,
                        M_MACHINENO,
                        M_EMP,
                        M_MO,
                        BOX_QTY,
                        M_WEIGHT}, this.BoxProductSnesOperationCompleted, userState);
        }
        
        private void OnBoxProductSnesOperationCompleted(object arg) {
            if ((this.BoxProductSnesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoxProductSnesCompleted(this, new BoxProductSnesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetATLBarcode", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetATLBarcode(string subconcellname) {
            object[] results = this.Invoke("GetATLBarcode", new object[] {
                        subconcellname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetATLBarcodeAsync(string subconcellname) {
            this.GetATLBarcodeAsync(subconcellname, null);
        }
        
        /// <remarks/>
        public void GetATLBarcodeAsync(string subconcellname, object userState) {
            if ((this.GetATLBarcodeOperationCompleted == null)) {
                this.GetATLBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetATLBarcodeOperationCompleted);
            }
            this.InvokeAsync("GetATLBarcode", new object[] {
                        subconcellname}, this.GetATLBarcodeOperationCompleted, userState);
        }
        
        private void OnGetATLBarcodeOperationCompleted(object arg) {
            if ((this.GetATLBarcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetATLBarcodeCompleted(this, new GetATLBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DEVICE_INTERFACE_TEST", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable DEVICE_INTERFACE_TEST(string SN, string MO, string STATION_SN, string DEVICE_NO, string TEST_EMP, string Dt_Begin, string Dt_End) {
            object[] results = this.Invoke("DEVICE_INTERFACE_TEST", new object[] {
                        SN,
                        MO,
                        STATION_SN,
                        DEVICE_NO,
                        TEST_EMP,
                        Dt_Begin,
                        Dt_End});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void DEVICE_INTERFACE_TESTAsync(string SN, string MO, string STATION_SN, string DEVICE_NO, string TEST_EMP, string Dt_Begin, string Dt_End) {
            this.DEVICE_INTERFACE_TESTAsync(SN, MO, STATION_SN, DEVICE_NO, TEST_EMP, Dt_Begin, Dt_End, null);
        }
        
        /// <remarks/>
        public void DEVICE_INTERFACE_TESTAsync(string SN, string MO, string STATION_SN, string DEVICE_NO, string TEST_EMP, string Dt_Begin, string Dt_End, object userState) {
            if ((this.DEVICE_INTERFACE_TESTOperationCompleted == null)) {
                this.DEVICE_INTERFACE_TESTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDEVICE_INTERFACE_TESTOperationCompleted);
            }
            this.InvokeAsync("DEVICE_INTERFACE_TEST", new object[] {
                        SN,
                        MO,
                        STATION_SN,
                        DEVICE_NO,
                        TEST_EMP,
                        Dt_Begin,
                        Dt_End}, this.DEVICE_INTERFACE_TESTOperationCompleted, userState);
        }
        
        private void OnDEVICE_INTERFACE_TESTOperationCompleted(object arg) {
            if ((this.DEVICE_INTERFACE_TESTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DEVICE_INTERFACE_TESTCompleted(this, new DEVICE_INTERFACE_TESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetGroupItem", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetGroupItem(string M_MACHINENO, string M_MO) {
            object[] results = this.Invoke("GetGroupItem", new object[] {
                        M_MACHINENO,
                        M_MO});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupItemAsync(string M_MACHINENO, string M_MO) {
            this.GetGroupItemAsync(M_MACHINENO, M_MO, null);
        }
        
        /// <remarks/>
        public void GetGroupItemAsync(string M_MACHINENO, string M_MO, object userState) {
            if ((this.GetGroupItemOperationCompleted == null)) {
                this.GetGroupItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupItemOperationCompleted);
            }
            this.InvokeAsync("GetGroupItem", new object[] {
                        M_MACHINENO,
                        M_MO}, this.GetGroupItemOperationCompleted, userState);
        }
        
        private void OnGetGroupItemOperationCompleted(object arg) {
            if ((this.GetGroupItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupItemCompleted(this, new GetGroupItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductCellItem", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductCellItem(string M_MACHINENO, string M_PRODUCT) {
            object[] results = this.Invoke("GetProductCellItem", new object[] {
                        M_MACHINENO,
                        M_PRODUCT});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductCellItemAsync(string M_MACHINENO, string M_PRODUCT) {
            this.GetProductCellItemAsync(M_MACHINENO, M_PRODUCT, null);
        }
        
        /// <remarks/>
        public void GetProductCellItemAsync(string M_MACHINENO, string M_PRODUCT, object userState) {
            if ((this.GetProductCellItemOperationCompleted == null)) {
                this.GetProductCellItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductCellItemOperationCompleted);
            }
            this.InvokeAsync("GetProductCellItem", new object[] {
                        M_MACHINENO,
                        M_PRODUCT}, this.GetProductCellItemOperationCompleted, userState);
        }
        
        private void OnGetProductCellItemOperationCompleted(object arg) {
            if ((this.GetProductCellItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductCellItemCompleted(this, new GetProductCellItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/HWInterface", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HWInterface(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL) {
            object[] results = this.Invoke("HWInterface", new object[] {
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HWInterfaceAsync(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL) {
            this.HWInterfaceAsync(M_MACHINENO, M_PRODUCT_SN, M_MO, M_EMP, M_KP_ITEMSN_ALL, null);
        }
        
        /// <remarks/>
        public void HWInterfaceAsync(string M_MACHINENO, string M_PRODUCT_SN, string M_MO, string M_EMP, string M_KP_ITEMSN_ALL, object userState) {
            if ((this.HWInterfaceOperationCompleted == null)) {
                this.HWInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHWInterfaceOperationCompleted);
            }
            this.InvokeAsync("HWInterface", new object[] {
                        M_MACHINENO,
                        M_PRODUCT_SN,
                        M_MO,
                        M_EMP,
                        M_KP_ITEMSN_ALL}, this.HWInterfaceOperationCompleted, userState);
        }
        
        private void OnHWInterfaceOperationCompleted(object arg) {
            if ((this.HWInterfaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HWInterfaceCompleted(this, new HWInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UploadLongData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadLongData(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ITEMVALUE) {
            object[] results = this.Invoke("UploadLongData", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ITEMVALUE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadLongDataAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ITEMVALUE) {
            this.UploadLongDataAsync(M_SN, M_RESULT, M_USERNO, M_MACHINENO, M_ITEMVALUE, null);
        }
        
        /// <remarks/>
        public void UploadLongDataAsync(string M_SN, string M_RESULT, string M_USERNO, string M_MACHINENO, string M_ITEMVALUE, object userState) {
            if ((this.UploadLongDataOperationCompleted == null)) {
                this.UploadLongDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadLongDataOperationCompleted);
            }
            this.InvokeAsync("UploadLongData", new object[] {
                        M_SN,
                        M_RESULT,
                        M_USERNO,
                        M_MACHINENO,
                        M_ITEMVALUE}, this.UploadLongDataOperationCompleted, userState);
        }
        
        private void OnUploadLongDataOperationCompleted(object arg) {
            if ((this.UploadLongDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadLongDataCompleted(this, new UploadLongDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetErrorCode", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetErrorCode(string M_SN) {
            object[] results = this.Invoke("GetErrorCode", new object[] {
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetErrorCodeAsync(string M_SN) {
            this.GetErrorCodeAsync(M_SN, null);
        }
        
        /// <remarks/>
        public void GetErrorCodeAsync(string M_SN, object userState) {
            if ((this.GetErrorCodeOperationCompleted == null)) {
                this.GetErrorCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetErrorCodeOperationCompleted);
            }
            this.InvokeAsync("GetErrorCode", new object[] {
                        M_SN}, this.GetErrorCodeOperationCompleted, userState);
        }
        
        private void OnGetErrorCodeOperationCompleted(object arg) {
            if ((this.GetErrorCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetErrorCodeCompleted(this, new GetErrorCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCUSTOMER_SN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCUSTOMER_SN(string PRODUCT_SN) {
            object[] results = this.Invoke("GetCUSTOMER_SN", new object[] {
                        PRODUCT_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCUSTOMER_SNAsync(string PRODUCT_SN) {
            this.GetCUSTOMER_SNAsync(PRODUCT_SN, null);
        }
        
        /// <remarks/>
        public void GetCUSTOMER_SNAsync(string PRODUCT_SN, object userState) {
            if ((this.GetCUSTOMER_SNOperationCompleted == null)) {
                this.GetCUSTOMER_SNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCUSTOMER_SNOperationCompleted);
            }
            this.InvokeAsync("GetCUSTOMER_SN", new object[] {
                        PRODUCT_SN}, this.GetCUSTOMER_SNOperationCompleted, userState);
        }
        
        private void OnGetCUSTOMER_SNOperationCompleted(object arg) {
            if ((this.GetCUSTOMER_SNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCUSTOMER_SNCompleted(this, new GetCUSTOMER_SNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SavePCMData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SavePCMData(string M_SN, string M_USERNO, string M_TIME, string M_MAINSTEP, string M_SUBSTEP, string M_CELLNO, string M_CONDITION, string M_RESULT, string M_POWEROFF, string M_POWERON, string M_MACHINENO, string M_MO) {
            object[] results = this.Invoke("SavePCMData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_TIME,
                        M_MAINSTEP,
                        M_SUBSTEP,
                        M_CELLNO,
                        M_CONDITION,
                        M_RESULT,
                        M_POWEROFF,
                        M_POWERON,
                        M_MACHINENO,
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SavePCMDataAsync(string M_SN, string M_USERNO, string M_TIME, string M_MAINSTEP, string M_SUBSTEP, string M_CELLNO, string M_CONDITION, string M_RESULT, string M_POWEROFF, string M_POWERON, string M_MACHINENO, string M_MO) {
            this.SavePCMDataAsync(M_SN, M_USERNO, M_TIME, M_MAINSTEP, M_SUBSTEP, M_CELLNO, M_CONDITION, M_RESULT, M_POWEROFF, M_POWERON, M_MACHINENO, M_MO, null);
        }
        
        /// <remarks/>
        public void SavePCMDataAsync(string M_SN, string M_USERNO, string M_TIME, string M_MAINSTEP, string M_SUBSTEP, string M_CELLNO, string M_CONDITION, string M_RESULT, string M_POWEROFF, string M_POWERON, string M_MACHINENO, string M_MO, object userState) {
            if ((this.SavePCMDataOperationCompleted == null)) {
                this.SavePCMDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePCMDataOperationCompleted);
            }
            this.InvokeAsync("SavePCMData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_TIME,
                        M_MAINSTEP,
                        M_SUBSTEP,
                        M_CELLNO,
                        M_CONDITION,
                        M_RESULT,
                        M_POWEROFF,
                        M_POWERON,
                        M_MACHINENO,
                        M_MO}, this.SavePCMDataOperationCompleted, userState);
        }
        
        private void OnSavePCMDataOperationCompleted(object arg) {
            if ((this.SavePCMDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePCMDataCompleted(this, new SavePCMDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPCMData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetPCMData(string M_SN, string M_USERNO, string M_MACHINENO, string M_MO, string M_TIMESTART, string M_TIMEEND) {
            object[] results = this.Invoke("GetPCMData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_MACHINENO,
                        M_MO,
                        M_TIMESTART,
                        M_TIMEEND});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPCMDataAsync(string M_SN, string M_USERNO, string M_MACHINENO, string M_MO, string M_TIMESTART, string M_TIMEEND) {
            this.GetPCMDataAsync(M_SN, M_USERNO, M_MACHINENO, M_MO, M_TIMESTART, M_TIMEEND, null);
        }
        
        /// <remarks/>
        public void GetPCMDataAsync(string M_SN, string M_USERNO, string M_MACHINENO, string M_MO, string M_TIMESTART, string M_TIMEEND, object userState) {
            if ((this.GetPCMDataOperationCompleted == null)) {
                this.GetPCMDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPCMDataOperationCompleted);
            }
            this.InvokeAsync("GetPCMData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_MACHINENO,
                        M_MO,
                        M_TIMESTART,
                        M_TIMEEND}, this.GetPCMDataOperationCompleted, userState);
        }
        
        private void OnGetPCMDataOperationCompleted(object arg) {
            if ((this.GetPCMDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPCMDataCompleted(this, new GetPCMDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SaveMutureData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveMutureData(string M_SN, string M_USERNO, string M_TIME, string M_TYPE, string M_PROCESS, string M_RESULT, string M_MACHINENO) {
            object[] results = this.Invoke("SaveMutureData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_TIME,
                        M_TYPE,
                        M_PROCESS,
                        M_RESULT,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveMutureDataAsync(string M_SN, string M_USERNO, string M_TIME, string M_TYPE, string M_PROCESS, string M_RESULT, string M_MACHINENO) {
            this.SaveMutureDataAsync(M_SN, M_USERNO, M_TIME, M_TYPE, M_PROCESS, M_RESULT, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void SaveMutureDataAsync(string M_SN, string M_USERNO, string M_TIME, string M_TYPE, string M_PROCESS, string M_RESULT, string M_MACHINENO, object userState) {
            if ((this.SaveMutureDataOperationCompleted == null)) {
                this.SaveMutureDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveMutureDataOperationCompleted);
            }
            this.InvokeAsync("SaveMutureData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_TIME,
                        M_TYPE,
                        M_PROCESS,
                        M_RESULT,
                        M_MACHINENO}, this.SaveMutureDataOperationCompleted, userState);
        }
        
        private void OnSaveMutureDataOperationCompleted(object arg) {
            if ((this.SaveMutureDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveMutureDataCompleted(this, new SaveMutureDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetMutureData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMutureData(string M_SN, string M_USERNO, string M_MACHINENO, string M_TYPE, string M_TIMESTART, string M_TIMEEND) {
            object[] results = this.Invoke("GetMutureData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_MACHINENO,
                        M_TYPE,
                        M_TIMESTART,
                        M_TIMEEND});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMutureDataAsync(string M_SN, string M_USERNO, string M_MACHINENO, string M_TYPE, string M_TIMESTART, string M_TIMEEND) {
            this.GetMutureDataAsync(M_SN, M_USERNO, M_MACHINENO, M_TYPE, M_TIMESTART, M_TIMEEND, null);
        }
        
        /// <remarks/>
        public void GetMutureDataAsync(string M_SN, string M_USERNO, string M_MACHINENO, string M_TYPE, string M_TIMESTART, string M_TIMEEND, object userState) {
            if ((this.GetMutureDataOperationCompleted == null)) {
                this.GetMutureDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMutureDataOperationCompleted);
            }
            this.InvokeAsync("GetMutureData", new object[] {
                        M_SN,
                        M_USERNO,
                        M_MACHINENO,
                        M_TYPE,
                        M_TIMESTART,
                        M_TIMEEND}, this.GetMutureDataOperationCompleted, userState);
        }
        
        private void OnGetMutureDataOperationCompleted(object arg) {
            if ((this.GetMutureDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMutureDataCompleted(this, new GetMutureDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DelMutureData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelMutureData(string M_SN, string M_TYPE) {
            object[] results = this.Invoke("DelMutureData", new object[] {
                        M_SN,
                        M_TYPE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelMutureDataAsync(string M_SN, string M_TYPE) {
            this.DelMutureDataAsync(M_SN, M_TYPE, null);
        }
        
        /// <remarks/>
        public void DelMutureDataAsync(string M_SN, string M_TYPE, object userState) {
            if ((this.DelMutureDataOperationCompleted == null)) {
                this.DelMutureDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelMutureDataOperationCompleted);
            }
            this.InvokeAsync("DelMutureData", new object[] {
                        M_SN,
                        M_TYPE}, this.DelMutureDataOperationCompleted, userState);
        }
        
        private void OnDelMutureDataOperationCompleted(object arg) {
            if ((this.DelMutureDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelMutureDataCompleted(this, new DelMutureDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CarrierRecycle", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CarrierRecycle(string M_MACHINENO, string M_MO, string M_EMP, string M_PRODUCT_SN, string M_CUSTOMER_SN) {
            object[] results = this.Invoke("CarrierRecycle", new object[] {
                        M_MACHINENO,
                        M_MO,
                        M_EMP,
                        M_PRODUCT_SN,
                        M_CUSTOMER_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CarrierRecycleAsync(string M_MACHINENO, string M_MO, string M_EMP, string M_PRODUCT_SN, string M_CUSTOMER_SN) {
            this.CarrierRecycleAsync(M_MACHINENO, M_MO, M_EMP, M_PRODUCT_SN, M_CUSTOMER_SN, null);
        }
        
        /// <remarks/>
        public void CarrierRecycleAsync(string M_MACHINENO, string M_MO, string M_EMP, string M_PRODUCT_SN, string M_CUSTOMER_SN, object userState) {
            if ((this.CarrierRecycleOperationCompleted == null)) {
                this.CarrierRecycleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarrierRecycleOperationCompleted);
            }
            this.InvokeAsync("CarrierRecycle", new object[] {
                        M_MACHINENO,
                        M_MO,
                        M_EMP,
                        M_PRODUCT_SN,
                        M_CUSTOMER_SN}, this.CarrierRecycleOperationCompleted, userState);
        }
        
        private void OnCarrierRecycleOperationCompleted(object arg) {
            if ((this.CarrierRecycleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarrierRecycleCompleted(this, new CarrierRecycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BatteryBinding", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatteryBinding(string M_MO, string M_CUSTOMER_SN) {
            object[] results = this.Invoke("BatteryBinding", new object[] {
                        M_MO,
                        M_CUSTOMER_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatteryBindingAsync(string M_MO, string M_CUSTOMER_SN) {
            this.BatteryBindingAsync(M_MO, M_CUSTOMER_SN, null);
        }
        
        /// <remarks/>
        public void BatteryBindingAsync(string M_MO, string M_CUSTOMER_SN, object userState) {
            if ((this.BatteryBindingOperationCompleted == null)) {
                this.BatteryBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatteryBindingOperationCompleted);
            }
            this.InvokeAsync("BatteryBinding", new object[] {
                        M_MO,
                        M_CUSTOMER_SN}, this.BatteryBindingOperationCompleted, userState);
        }
        
        private void OnBatteryBindingOperationCompleted(object arg) {
            if ((this.BatteryBindingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatteryBindingCompleted(this, new BatteryBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckStation", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckStation(string M_SN) {
            object[] results = this.Invoke("CheckStation", new object[] {
                        M_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckStationAsync(string M_SN) {
            this.CheckStationAsync(M_SN, null);
        }
        
        /// <remarks/>
        public void CheckStationAsync(string M_SN, object userState) {
            if ((this.CheckStationOperationCompleted == null)) {
                this.CheckStationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckStationOperationCompleted);
            }
            this.InvokeAsync("CheckStation", new object[] {
                        M_SN}, this.CheckStationOperationCompleted, userState);
        }
        
        private void OnCheckStationOperationCompleted(object arg) {
            if ((this.CheckStationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckStationCompleted(this, new CheckStationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ReplaceSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceSN(string M_MO, string M_ITEM_SN) {
            object[] results = this.Invoke("ReplaceSN", new object[] {
                        M_MO,
                        M_ITEM_SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceSNAsync(string M_MO, string M_ITEM_SN) {
            this.ReplaceSNAsync(M_MO, M_ITEM_SN, null);
        }
        
        /// <remarks/>
        public void ReplaceSNAsync(string M_MO, string M_ITEM_SN, object userState) {
            if ((this.ReplaceSNOperationCompleted == null)) {
                this.ReplaceSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceSNOperationCompleted);
            }
            this.InvokeAsync("ReplaceSN", new object[] {
                        M_MO,
                        M_ITEM_SN}, this.ReplaceSNOperationCompleted, userState);
        }
        
        private void OnReplaceSNOperationCompleted(object arg) {
            if ((this.ReplaceSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceSNCompleted(this, new ReplaceSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindCarrierPack", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindCarrierPack(string CarrierSn, string PackSn, string LineNo) {
            object[] results = this.Invoke("BindCarrierPack", new object[] {
                        CarrierSn,
                        PackSn,
                        LineNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindCarrierPackAsync(string CarrierSn, string PackSn, string LineNo) {
            this.BindCarrierPackAsync(CarrierSn, PackSn, LineNo, null);
        }
        
        /// <remarks/>
        public void BindCarrierPackAsync(string CarrierSn, string PackSn, string LineNo, object userState) {
            if ((this.BindCarrierPackOperationCompleted == null)) {
                this.BindCarrierPackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindCarrierPackOperationCompleted);
            }
            this.InvokeAsync("BindCarrierPack", new object[] {
                        CarrierSn,
                        PackSn,
                        LineNo}, this.BindCarrierPackOperationCompleted, userState);
        }
        
        private void OnBindCarrierPackOperationCompleted(object arg) {
            if ((this.BindCarrierPackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindCarrierPackCompleted(this, new BindCarrierPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UnbindCarrirPack", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnbindCarrirPack(string CarrierSn, string PackSn) {
            object[] results = this.Invoke("UnbindCarrirPack", new object[] {
                        CarrierSn,
                        PackSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnbindCarrirPackAsync(string CarrierSn, string PackSn) {
            this.UnbindCarrirPackAsync(CarrierSn, PackSn, null);
        }
        
        /// <remarks/>
        public void UnbindCarrirPackAsync(string CarrierSn, string PackSn, object userState) {
            if ((this.UnbindCarrirPackOperationCompleted == null)) {
                this.UnbindCarrirPackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnbindCarrirPackOperationCompleted);
            }
            this.InvokeAsync("UnbindCarrirPack", new object[] {
                        CarrierSn,
                        PackSn}, this.UnbindCarrirPackOperationCompleted, userState);
        }
        
        private void OnUnbindCarrirPackOperationCompleted(object arg) {
            if ((this.UnbindCarrirPackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnbindCarrirPackCompleted(this, new UnbindCarrirPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBindingPack", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBindingPack(string CarrierSn) {
            object[] results = this.Invoke("GetBindingPack", new object[] {
                        CarrierSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBindingPackAsync(string CarrierSn) {
            this.GetBindingPackAsync(CarrierSn, null);
        }
        
        /// <remarks/>
        public void GetBindingPackAsync(string CarrierSn, object userState) {
            if ((this.GetBindingPackOperationCompleted == null)) {
                this.GetBindingPackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBindingPackOperationCompleted);
            }
            this.InvokeAsync("GetBindingPack", new object[] {
                        CarrierSn}, this.GetBindingPackOperationCompleted, userState);
        }
        
        private void OnGetBindingPackOperationCompleted(object arg) {
            if ((this.GetBindingPackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBindingPackCompleted(this, new GetBindingPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBindingList", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetBindingList(string LineNo) {
            object[] results = this.Invoke("GetBindingList", new object[] {
                        LineNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetBindingListAsync(string LineNo) {
            this.GetBindingListAsync(LineNo, null);
        }
        
        /// <remarks/>
        public void GetBindingListAsync(string LineNo, object userState) {
            if ((this.GetBindingListOperationCompleted == null)) {
                this.GetBindingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBindingListOperationCompleted);
            }
            this.InvokeAsync("GetBindingList", new object[] {
                        LineNo}, this.GetBindingListOperationCompleted, userState);
        }
        
        private void OnGetBindingListOperationCompleted(object arg) {
            if ((this.GetBindingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBindingListCompleted(this, new GetBindingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/RemoveAllBinding", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveAllBinding(string LineNo) {
            object[] results = this.Invoke("RemoveAllBinding", new object[] {
                        LineNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllBindingAsync(string LineNo) {
            this.RemoveAllBindingAsync(LineNo, null);
        }
        
        /// <remarks/>
        public void RemoveAllBindingAsync(string LineNo, object userState) {
            if ((this.RemoveAllBindingOperationCompleted == null)) {
                this.RemoveAllBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllBindingOperationCompleted);
            }
            this.InvokeAsync("RemoveAllBinding", new object[] {
                        LineNo}, this.RemoveAllBindingOperationCompleted, userState);
        }
        
        private void OnRemoveAllBindingOperationCompleted(object arg) {
            if ((this.RemoveAllBindingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllBindingCompleted(this, new RemoveAllBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ImportBatteryCapacity", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportBatteryCapacity(string[] SN, string BatteryType, string BatNO, double[] Capacities, string[] CapacityDescription) {
            object[] results = this.Invoke("ImportBatteryCapacity", new object[] {
                        SN,
                        BatteryType,
                        BatNO,
                        Capacities,
                        CapacityDescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportBatteryCapacityAsync(string[] SN, string BatteryType, string BatNO, double[] Capacities, string[] CapacityDescription) {
            this.ImportBatteryCapacityAsync(SN, BatteryType, BatNO, Capacities, CapacityDescription, null);
        }
        
        /// <remarks/>
        public void ImportBatteryCapacityAsync(string[] SN, string BatteryType, string BatNO, double[] Capacities, string[] CapacityDescription, object userState) {
            if ((this.ImportBatteryCapacityOperationCompleted == null)) {
                this.ImportBatteryCapacityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportBatteryCapacityOperationCompleted);
            }
            this.InvokeAsync("ImportBatteryCapacity", new object[] {
                        SN,
                        BatteryType,
                        BatNO,
                        Capacities,
                        CapacityDescription}, this.ImportBatteryCapacityOperationCompleted, userState);
        }
        
        private void OnImportBatteryCapacityOperationCompleted(object arg) {
            if ((this.ImportBatteryCapacityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportBatteryCapacityCompleted(this, new ImportBatteryCapacityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UploadOCV", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadOCV(string SN, double OCV) {
            object[] results = this.Invoke("UploadOCV", new object[] {
                        SN,
                        OCV});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadOCVAsync(string SN, double OCV) {
            this.UploadOCVAsync(SN, OCV, null);
        }
        
        /// <remarks/>
        public void UploadOCVAsync(string SN, double OCV, object userState) {
            if ((this.UploadOCVOperationCompleted == null)) {
                this.UploadOCVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadOCVOperationCompleted);
            }
            this.InvokeAsync("UploadOCV", new object[] {
                        SN,
                        OCV}, this.UploadOCVOperationCompleted, userState);
        }
        
        private void OnUploadOCVOperationCompleted(object arg) {
            if ((this.UploadOCVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadOCVCompleted(this, new UploadOCVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/FinishBat", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FinishBat(string BatNO) {
            object[] results = this.Invoke("FinishBat", new object[] {
                        BatNO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FinishBatAsync(string BatNO) {
            this.FinishBatAsync(BatNO, null);
        }
        
        /// <remarks/>
        public void FinishBatAsync(string BatNO, object userState) {
            if ((this.FinishBatOperationCompleted == null)) {
                this.FinishBatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishBatOperationCompleted);
            }
            this.InvokeAsync("FinishBat", new object[] {
                        BatNO}, this.FinishBatOperationCompleted, userState);
        }
        
        private void OnFinishBatOperationCompleted(object arg) {
            if ((this.FinishBatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishBatCompleted(this, new FinishBatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BulidBatteryGroup", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BulidBatteryGroup(string[] SN) {
            object[] results = this.Invoke("BulidBatteryGroup", new object[] {
                        SN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BulidBatteryGroupAsync(string[] SN) {
            this.BulidBatteryGroupAsync(SN, null);
        }
        
        /// <remarks/>
        public void BulidBatteryGroupAsync(string[] SN, object userState) {
            if ((this.BulidBatteryGroupOperationCompleted == null)) {
                this.BulidBatteryGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBulidBatteryGroupOperationCompleted);
            }
            this.InvokeAsync("BulidBatteryGroup", new object[] {
                        SN}, this.BulidBatteryGroupOperationCompleted, userState);
        }
        
        private void OnBulidBatteryGroupOperationCompleted(object arg) {
            if ((this.BulidBatteryGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BulidBatteryGroupCompleted(this, new BulidBatteryGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/BindPackSN", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindPackSN(string[] CellSN, string PackSN) {
            object[] results = this.Invoke("BindPackSN", new object[] {
                        CellSN,
                        PackSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindPackSNAsync(string[] CellSN, string PackSN) {
            this.BindPackSNAsync(CellSN, PackSN, null);
        }
        
        /// <remarks/>
        public void BindPackSNAsync(string[] CellSN, string PackSN, object userState) {
            if ((this.BindPackSNOperationCompleted == null)) {
                this.BindPackSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindPackSNOperationCompleted);
            }
            this.InvokeAsync("BindPackSN", new object[] {
                        CellSN,
                        PackSN}, this.BindPackSNOperationCompleted, userState);
        }
        
        private void OnBindPackSNOperationCompleted(object arg) {
            if ((this.BindPackSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindPackSNCompleted(this, new BindPackSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPackSnByCellSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackSnByCellSn(string[] CellSN) {
            object[] results = this.Invoke("GetPackSnByCellSn", new object[] {
                        CellSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackSnByCellSnAsync(string[] CellSN) {
            this.GetPackSnByCellSnAsync(CellSN, null);
        }
        
        /// <remarks/>
        public void GetPackSnByCellSnAsync(string[] CellSN, object userState) {
            if ((this.GetPackSnByCellSnOperationCompleted == null)) {
                this.GetPackSnByCellSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackSnByCellSnOperationCompleted);
            }
            this.InvokeAsync("GetPackSnByCellSn", new object[] {
                        CellSN}, this.GetPackSnByCellSnOperationCompleted, userState);
        }
        
        private void OnGetPackSnByCellSnOperationCompleted(object arg) {
            if ((this.GetPackSnByCellSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackSnByCellSnCompleted(this, new GetPackSnByCellSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DelCellSnByPackSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelCellSnByPackSn(string PackSN) {
            object[] results = this.Invoke("DelCellSnByPackSn", new object[] {
                        PackSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelCellSnByPackSnAsync(string PackSN) {
            this.DelCellSnByPackSnAsync(PackSN, null);
        }
        
        /// <remarks/>
        public void DelCellSnByPackSnAsync(string PackSN, object userState) {
            if ((this.DelCellSnByPackSnOperationCompleted == null)) {
                this.DelCellSnByPackSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelCellSnByPackSnOperationCompleted);
            }
            this.InvokeAsync("DelCellSnByPackSn", new object[] {
                        PackSN}, this.DelCellSnByPackSnOperationCompleted, userState);
        }
        
        private void OnDelCellSnByPackSnOperationCompleted(object arg) {
            if ((this.DelCellSnByPackSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelCellSnByPackSnCompleted(this, new DelCellSnByPackSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPackSnTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackSnTestData(string CarrierSn, string M_MACHINENO, string M_ItemName) {
            object[] results = this.Invoke("GetPackSnTestData", new object[] {
                        CarrierSn,
                        M_MACHINENO,
                        M_ItemName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackSnTestDataAsync(string CarrierSn, string M_MACHINENO, string M_ItemName) {
            this.GetPackSnTestDataAsync(CarrierSn, M_MACHINENO, M_ItemName, null);
        }
        
        /// <remarks/>
        public void GetPackSnTestDataAsync(string CarrierSn, string M_MACHINENO, string M_ItemName, object userState) {
            if ((this.GetPackSnTestDataOperationCompleted == null)) {
                this.GetPackSnTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackSnTestDataOperationCompleted);
            }
            this.InvokeAsync("GetPackSnTestData", new object[] {
                        CarrierSn,
                        M_MACHINENO,
                        M_ItemName}, this.GetPackSnTestDataOperationCompleted, userState);
        }
        
        private void OnGetPackSnTestDataOperationCompleted(object arg) {
            if ((this.GetPackSnTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackSnTestDataCompleted(this, new GetPackSnTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPackSnItemNameTestData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackSnItemNameTestData(string PackSn, string M_ItemName, string M_MO, string oldday) {
            object[] results = this.Invoke("GetPackSnItemNameTestData", new object[] {
                        PackSn,
                        M_ItemName,
                        M_MO,
                        oldday});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackSnItemNameTestDataAsync(string PackSn, string M_ItemName, string M_MO, string oldday) {
            this.GetPackSnItemNameTestDataAsync(PackSn, M_ItemName, M_MO, oldday, null);
        }
        
        /// <remarks/>
        public void GetPackSnItemNameTestDataAsync(string PackSn, string M_ItemName, string M_MO, string oldday, object userState) {
            if ((this.GetPackSnItemNameTestDataOperationCompleted == null)) {
                this.GetPackSnItemNameTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackSnItemNameTestDataOperationCompleted);
            }
            this.InvokeAsync("GetPackSnItemNameTestData", new object[] {
                        PackSn,
                        M_ItemName,
                        M_MO,
                        oldday}, this.GetPackSnItemNameTestDataOperationCompleted, userState);
        }
        
        private void OnGetPackSnItemNameTestDataOperationCompleted(object arg) {
            if ((this.GetPackSnItemNameTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackSnItemNameTestDataCompleted(this, new GetPackSnItemNameTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSqlData", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSqlData(string sql) {
            object[] results = this.Invoke("GetSqlData", new object[] {
                        sql});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSqlDataAsync(string sql) {
            this.GetSqlDataAsync(sql, null);
        }
        
        /// <remarks/>
        public void GetSqlDataAsync(string sql, object userState) {
            if ((this.GetSqlDataOperationCompleted == null)) {
                this.GetSqlDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlDataOperationCompleted);
            }
            this.InvokeAsync("GetSqlData", new object[] {
                        sql}, this.GetSqlDataOperationCompleted, userState);
        }
        
        private void OnGetSqlDataOperationCompleted(object arg) {
            if ((this.GetSqlDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSqlDataCompleted(this, new GetSqlDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSqlDataConn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSqlDataConn(string sql, string conn) {
            object[] results = this.Invoke("GetSqlDataConn", new object[] {
                        sql,
                        conn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSqlDataConnAsync(string sql, string conn) {
            this.GetSqlDataConnAsync(sql, conn, null);
        }
        
        /// <remarks/>
        public void GetSqlDataConnAsync(string sql, string conn, object userState) {
            if ((this.GetSqlDataConnOperationCompleted == null)) {
                this.GetSqlDataConnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlDataConnOperationCompleted);
            }
            this.InvokeAsync("GetSqlDataConn", new object[] {
                        sql,
                        conn}, this.GetSqlDataConnOperationCompleted, userState);
        }
        
        private void OnGetSqlDataConnOperationCompleted(object arg) {
            if ((this.GetSqlDataConnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSqlDataConnCompleted(this, new GetSqlDataConnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DelWipInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelWipInfo(string M_SN, string M_USERNO, string M_MACHINENO) {
            object[] results = this.Invoke("DelWipInfo", new object[] {
                        M_SN,
                        M_USERNO,
                        M_MACHINENO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelWipInfoAsync(string M_SN, string M_USERNO, string M_MACHINENO) {
            this.DelWipInfoAsync(M_SN, M_USERNO, M_MACHINENO, null);
        }
        
        /// <remarks/>
        public void DelWipInfoAsync(string M_SN, string M_USERNO, string M_MACHINENO, object userState) {
            if ((this.DelWipInfoOperationCompleted == null)) {
                this.DelWipInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelWipInfoOperationCompleted);
            }
            this.InvokeAsync("DelWipInfo", new object[] {
                        M_SN,
                        M_USERNO,
                        M_MACHINENO}, this.DelWipInfoOperationCompleted, userState);
        }
        
        private void OnDelWipInfoOperationCompleted(object arg) {
            if ((this.DelWipInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelWipInfoCompleted(this, new DelWipInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckBarcodeRule", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckBarcodeRule(string M_PRODUCT_SN, string M_MO) {
            object[] results = this.Invoke("CheckBarcodeRule", new object[] {
                        M_PRODUCT_SN,
                        M_MO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBarcodeRuleAsync(string M_PRODUCT_SN, string M_MO) {
            this.CheckBarcodeRuleAsync(M_PRODUCT_SN, M_MO, null);
        }
        
        /// <remarks/>
        public void CheckBarcodeRuleAsync(string M_PRODUCT_SN, string M_MO, object userState) {
            if ((this.CheckBarcodeRuleOperationCompleted == null)) {
                this.CheckBarcodeRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBarcodeRuleOperationCompleted);
            }
            this.InvokeAsync("CheckBarcodeRule", new object[] {
                        M_PRODUCT_SN,
                        M_MO}, this.CheckBarcodeRuleOperationCompleted, userState);
        }
        
        private void OnCheckBarcodeRuleOperationCompleted(object arg) {
            if ((this.CheckBarcodeRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBarcodeRuleCompleted(this, new CheckBarcodeRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/FittingBinding", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FittingBinding(string MainItems, string SubKey, string UserCode, string Device, string SubNumber) {
            object[] results = this.Invoke("FittingBinding", new object[] {
                        MainItems,
                        SubKey,
                        UserCode,
                        Device,
                        SubNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FittingBindingAsync(string MainItems, string SubKey, string UserCode, string Device, string SubNumber) {
            this.FittingBindingAsync(MainItems, SubKey, UserCode, Device, SubNumber, null);
        }
        
        /// <remarks/>
        public void FittingBindingAsync(string MainItems, string SubKey, string UserCode, string Device, string SubNumber, object userState) {
            if ((this.FittingBindingOperationCompleted == null)) {
                this.FittingBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFittingBindingOperationCompleted);
            }
            this.InvokeAsync("FittingBinding", new object[] {
                        MainItems,
                        SubKey,
                        UserCode,
                        Device,
                        SubNumber}, this.FittingBindingOperationCompleted, userState);
        }
        
        private void OnFittingBindingOperationCompleted(object arg) {
            if ((this.FittingBindingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FittingBindingCompleted(this, new FittingBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckRoute", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckRoute(string subkey) {
            object[] results = this.Invoke("CheckRoute", new object[] {
                        subkey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRouteAsync(string subkey) {
            this.CheckRouteAsync(subkey, null);
        }
        
        /// <remarks/>
        public void CheckRouteAsync(string subkey, object userState) {
            if ((this.CheckRouteOperationCompleted == null)) {
                this.CheckRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRouteOperationCompleted);
            }
            this.InvokeAsync("CheckRoute", new object[] {
                        subkey}, this.CheckRouteOperationCompleted, userState);
        }
        
        private void OnCheckRouteOperationCompleted(object arg) {
            if ((this.CheckRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRouteCompleted(this, new CheckRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MacBindCustSn", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MacBindCustSn(string Mac, string cust, string userCode) {
            object[] results = this.Invoke("MacBindCustSn", new object[] {
                        Mac,
                        cust,
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MacBindCustSnAsync(string Mac, string cust, string userCode) {
            this.MacBindCustSnAsync(Mac, cust, userCode, null);
        }
        
        /// <remarks/>
        public void MacBindCustSnAsync(string Mac, string cust, string userCode, object userState) {
            if ((this.MacBindCustSnOperationCompleted == null)) {
                this.MacBindCustSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMacBindCustSnOperationCompleted);
            }
            this.InvokeAsync("MacBindCustSn", new object[] {
                        Mac,
                        cust,
                        userCode}, this.MacBindCustSnOperationCompleted, userState);
        }
        
        private void OnMacBindCustSnOperationCompleted(object arg) {
            if ((this.MacBindCustSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MacBindCustSnCompleted(this, new MacBindCustSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/MacBindCustSnAndID", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MacBindCustSnAndID(string Mac, string cust, string userCode, string custid) {
            object[] results = this.Invoke("MacBindCustSnAndID", new object[] {
                        Mac,
                        cust,
                        userCode,
                        custid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MacBindCustSnAndIDAsync(string Mac, string cust, string userCode, string custid) {
            this.MacBindCustSnAndIDAsync(Mac, cust, userCode, custid, null);
        }
        
        /// <remarks/>
        public void MacBindCustSnAndIDAsync(string Mac, string cust, string userCode, string custid, object userState) {
            if ((this.MacBindCustSnAndIDOperationCompleted == null)) {
                this.MacBindCustSnAndIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMacBindCustSnAndIDOperationCompleted);
            }
            this.InvokeAsync("MacBindCustSnAndID", new object[] {
                        Mac,
                        cust,
                        userCode,
                        custid}, this.MacBindCustSnAndIDOperationCompleted, userState);
        }
        
        private void OnMacBindCustSnAndIDOperationCompleted(object arg) {
            if ((this.MacBindCustSnAndIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MacBindCustSnAndIDCompleted(this, new MacBindCustSnAndIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckCustMacBind", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckCustMacBind(string Mac, string Cust, string type) {
            object[] results = this.Invoke("CheckCustMacBind", new object[] {
                        Mac,
                        Cust,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCustMacBindAsync(string Mac, string Cust, string type) {
            this.CheckCustMacBindAsync(Mac, Cust, type, null);
        }
        
        /// <remarks/>
        public void CheckCustMacBindAsync(string Mac, string Cust, string type, object userState) {
            if ((this.CheckCustMacBindOperationCompleted == null)) {
                this.CheckCustMacBindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCustMacBindOperationCompleted);
            }
            this.InvokeAsync("CheckCustMacBind", new object[] {
                        Mac,
                        Cust,
                        type}, this.CheckCustMacBindOperationCompleted, userState);
        }
        
        private void OnCheckCustMacBindOperationCompleted(object arg) {
            if ((this.CheckCustMacBindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCustMacBindCompleted(this, new CheckCustMacBindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetSubKeyList", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubKeyList(string Mac) {
            object[] results = this.Invoke("GetSubKeyList", new object[] {
                        Mac});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubKeyListAsync(string Mac) {
            this.GetSubKeyListAsync(Mac, null);
        }
        
        /// <remarks/>
        public void GetSubKeyListAsync(string Mac, object userState) {
            if ((this.GetSubKeyListOperationCompleted == null)) {
                this.GetSubKeyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubKeyListOperationCompleted);
            }
            this.InvokeAsync("GetSubKeyList", new object[] {
                        Mac}, this.GetSubKeyListOperationCompleted, userState);
        }
        
        private void OnGetSubKeyListOperationCompleted(object arg) {
            if ((this.GetSubKeyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubKeyListCompleted(this, new GetSubKeyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CreatePallet", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreatePallet(string MoNumber, string PalletSN, int PalletCount) {
            object[] results = this.Invoke("CreatePallet", new object[] {
                        MoNumber,
                        PalletSN,
                        PalletCount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePalletAsync(string MoNumber, string PalletSN, int PalletCount) {
            this.CreatePalletAsync(MoNumber, PalletSN, PalletCount, null);
        }
        
        /// <remarks/>
        public void CreatePalletAsync(string MoNumber, string PalletSN, int PalletCount, object userState) {
            if ((this.CreatePalletOperationCompleted == null)) {
                this.CreatePalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePalletOperationCompleted);
            }
            this.InvokeAsync("CreatePallet", new object[] {
                        MoNumber,
                        PalletSN,
                        PalletCount}, this.CreatePalletOperationCompleted, userState);
        }
        
        private void OnCreatePalletOperationCompleted(object arg) {
            if ((this.CreatePalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePalletCompleted(this, new CreatePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPalletSerial", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPalletSerial(string Type, int Length) {
            object[] results = this.Invoke("GetPalletSerial", new object[] {
                        Type,
                        Length});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPalletSerialAsync(string Type, int Length) {
            this.GetPalletSerialAsync(Type, Length, null);
        }
        
        /// <remarks/>
        public void GetPalletSerialAsync(string Type, int Length, object userState) {
            if ((this.GetPalletSerialOperationCompleted == null)) {
                this.GetPalletSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPalletSerialOperationCompleted);
            }
            this.InvokeAsync("GetPalletSerial", new object[] {
                        Type,
                        Length}, this.GetPalletSerialOperationCompleted, userState);
        }
        
        private void OnGetPalletSerialOperationCompleted(object arg) {
            if ((this.GetPalletSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPalletSerialCompleted(this, new GetPalletSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CreateBox", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateBox(string BoxSn, string PalletSn, string MaxQty, string Weight, string Making) {
            object[] results = this.Invoke("CreateBox", new object[] {
                        BoxSn,
                        PalletSn,
                        MaxQty,
                        Weight,
                        Making});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBoxAsync(string BoxSn, string PalletSn, string MaxQty, string Weight, string Making) {
            this.CreateBoxAsync(BoxSn, PalletSn, MaxQty, Weight, Making, null);
        }
        
        /// <remarks/>
        public void CreateBoxAsync(string BoxSn, string PalletSn, string MaxQty, string Weight, string Making, object userState) {
            if ((this.CreateBoxOperationCompleted == null)) {
                this.CreateBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBoxOperationCompleted);
            }
            this.InvokeAsync("CreateBox", new object[] {
                        BoxSn,
                        PalletSn,
                        MaxQty,
                        Weight,
                        Making}, this.CreateBoxOperationCompleted, userState);
        }
        
        private void OnCreateBoxOperationCompleted(object arg) {
            if ((this.CreateBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBoxCompleted(this, new CreateBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeletePallet", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeletePallet(string PalletSn) {
            object[] results = this.Invoke("DeletePallet", new object[] {
                        PalletSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePalletAsync(string PalletSn) {
            this.DeletePalletAsync(PalletSn, null);
        }
        
        /// <remarks/>
        public void DeletePalletAsync(string PalletSn, object userState) {
            if ((this.DeletePalletOperationCompleted == null)) {
                this.DeletePalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePalletOperationCompleted);
            }
            this.InvokeAsync("DeletePallet", new object[] {
                        PalletSn}, this.DeletePalletOperationCompleted, userState);
        }
        
        private void OnDeletePalletOperationCompleted(object arg) {
            if ((this.DeletePalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePalletCompleted(this, new DeletePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/DeleteBox", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteBox(string BoxSn) {
            object[] results = this.Invoke("DeleteBox", new object[] {
                        BoxSn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteBoxAsync(string BoxSn) {
            this.DeleteBoxAsync(BoxSn, null);
        }
        
        /// <remarks/>
        public void DeleteBoxAsync(string BoxSn, object userState) {
            if ((this.DeleteBoxOperationCompleted == null)) {
                this.DeleteBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBoxOperationCompleted);
            }
            this.InvokeAsync("DeleteBox", new object[] {
                        BoxSn}, this.DeleteBoxOperationCompleted, userState);
        }
        
        private void OnDeleteBoxOperationCompleted(object arg) {
            if ((this.DeleteBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBoxCompleted(this, new DeleteBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SolutionBox", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SolutionBox(string BoxSn, string User) {
            object[] results = this.Invoke("SolutionBox", new object[] {
                        BoxSn,
                        User});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SolutionBoxAsync(string BoxSn, string User) {
            this.SolutionBoxAsync(BoxSn, User, null);
        }
        
        /// <remarks/>
        public void SolutionBoxAsync(string BoxSn, string User, object userState) {
            if ((this.SolutionBoxOperationCompleted == null)) {
                this.SolutionBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSolutionBoxOperationCompleted);
            }
            this.InvokeAsync("SolutionBox", new object[] {
                        BoxSn,
                        User}, this.SolutionBoxOperationCompleted, userState);
        }
        
        private void OnSolutionBoxOperationCompleted(object arg) {
            if ((this.SolutionBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SolutionBoxCompleted(this, new SolutionBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetPalletInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetPalletInfo(string MoNumber) {
            object[] results = this.Invoke("GetPalletInfo", new object[] {
                        MoNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPalletInfoAsync(string MoNumber) {
            this.GetPalletInfoAsync(MoNumber, null);
        }
        
        /// <remarks/>
        public void GetPalletInfoAsync(string MoNumber, object userState) {
            if ((this.GetPalletInfoOperationCompleted == null)) {
                this.GetPalletInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPalletInfoOperationCompleted);
            }
            this.InvokeAsync("GetPalletInfo", new object[] {
                        MoNumber}, this.GetPalletInfoOperationCompleted, userState);
        }
        
        private void OnGetPalletInfoOperationCompleted(object arg) {
            if ((this.GetPalletInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPalletInfoCompleted(this, new GetPalletInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetBoxInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetBoxInfo(string PalletSn) {
            object[] results = this.Invoke("GetBoxInfo", new object[] {
                        PalletSn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetBoxInfoAsync(string PalletSn) {
            this.GetBoxInfoAsync(PalletSn, null);
        }
        
        /// <remarks/>
        public void GetBoxInfoAsync(string PalletSn, object userState) {
            if ((this.GetBoxInfoOperationCompleted == null)) {
                this.GetBoxInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBoxInfoOperationCompleted);
            }
            this.InvokeAsync("GetBoxInfo", new object[] {
                        PalletSn}, this.GetBoxInfoOperationCompleted, userState);
        }
        
        private void OnGetBoxInfoOperationCompleted(object arg) {
            if ((this.GetBoxInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBoxInfoCompleted(this, new GetBoxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetProductInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductInfo(string BoxSn) {
            object[] results = this.Invoke("GetProductInfo", new object[] {
                        BoxSn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductInfoAsync(string BoxSn) {
            this.GetProductInfoAsync(BoxSn, null);
        }
        
        /// <remarks/>
        public void GetProductInfoAsync(string BoxSn, object userState) {
            if ((this.GetProductInfoOperationCompleted == null)) {
                this.GetProductInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductInfoOperationCompleted);
            }
            this.InvokeAsync("GetProductInfo", new object[] {
                        BoxSn}, this.GetProductInfoOperationCompleted, userState);
        }
        
        private void OnGetProductInfoOperationCompleted(object arg) {
            if ((this.GetProductInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductInfoCompleted(this, new GetProductInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/ProductPacking", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductPacking(string ProductSn, string BoxSn, string MoNumber, string Machineno, string UserCode) {
            object[] results = this.Invoke("ProductPacking", new object[] {
                        ProductSn,
                        BoxSn,
                        MoNumber,
                        Machineno,
                        UserCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductPackingAsync(string ProductSn, string BoxSn, string MoNumber, string Machineno, string UserCode) {
            this.ProductPackingAsync(ProductSn, BoxSn, MoNumber, Machineno, UserCode, null);
        }
        
        /// <remarks/>
        public void ProductPackingAsync(string ProductSn, string BoxSn, string MoNumber, string Machineno, string UserCode, object userState) {
            if ((this.ProductPackingOperationCompleted == null)) {
                this.ProductPackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductPackingOperationCompleted);
            }
            this.InvokeAsync("ProductPacking", new object[] {
                        ProductSn,
                        BoxSn,
                        MoNumber,
                        Machineno,
                        UserCode}, this.ProductPackingOperationCompleted, userState);
        }
        
        private void OnProductPackingOperationCompleted(object arg) {
            if ((this.ProductPackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductPackingCompleted(this, new ProductPackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/CheckCellBing", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckCellBing(string CellSn, string ProductSn, string MoNumber, string UserCode) {
            object[] results = this.Invoke("CheckCellBing", new object[] {
                        CellSn,
                        ProductSn,
                        MoNumber,
                        UserCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCellBingAsync(string CellSn, string ProductSn, string MoNumber, string UserCode) {
            this.CheckCellBingAsync(CellSn, ProductSn, MoNumber, UserCode, null);
        }
        
        /// <remarks/>
        public void CheckCellBingAsync(string CellSn, string ProductSn, string MoNumber, string UserCode, object userState) {
            if ((this.CheckCellBingOperationCompleted == null)) {
                this.CheckCellBingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCellBingOperationCompleted);
            }
            this.InvokeAsync("CheckCellBing", new object[] {
                        CellSn,
                        ProductSn,
                        MoNumber,
                        UserCode}, this.CheckCellBingOperationCompleted, userState);
        }
        
        private void OnCheckCellBingOperationCompleted(object arg) {
            if ((this.CheckCellBingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCellBingCompleted(this, new CheckCellBingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetMarkingInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMarkingInfo() {
            object[] results = this.Invoke("GetMarkingInfo", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMarkingInfoAsync() {
            this.GetMarkingInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetMarkingInfoAsync(object userState) {
            if ((this.GetMarkingInfoOperationCompleted == null)) {
                this.GetMarkingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMarkingInfoOperationCompleted);
            }
            this.InvokeAsync("GetMarkingInfo", new object[0], this.GetMarkingInfoOperationCompleted, userState);
        }
        
        private void OnGetMarkingInfoOperationCompleted(object arg) {
            if ((this.GetMarkingInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMarkingInfoCompleted(this, new GetMarkingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SaveCusInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveCusInfo(string CustomerCode, string CustomerInfo) {
            object[] results = this.Invoke("SaveCusInfo", new object[] {
                        CustomerCode,
                        CustomerInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveCusInfoAsync(string CustomerCode, string CustomerInfo) {
            this.SaveCusInfoAsync(CustomerCode, CustomerInfo, null);
        }
        
        /// <remarks/>
        public void SaveCusInfoAsync(string CustomerCode, string CustomerInfo, object userState) {
            if ((this.SaveCusInfoOperationCompleted == null)) {
                this.SaveCusInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveCusInfoOperationCompleted);
            }
            this.InvokeAsync("SaveCusInfo", new object[] {
                        CustomerCode,
                        CustomerInfo}, this.SaveCusInfoOperationCompleted, userState);
        }
        
        private void OnSaveCusInfoOperationCompleted(object arg) {
            if ((this.SaveCusInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveCusInfoCompleted(this, new SaveCusInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetCustomerInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCustomerInfo(string MoNumber) {
            object[] results = this.Invoke("GetCustomerInfo", new object[] {
                        MoNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerInfoAsync(string MoNumber) {
            this.GetCustomerInfoAsync(MoNumber, null);
        }
        
        /// <remarks/>
        public void GetCustomerInfoAsync(string MoNumber, object userState) {
            if ((this.GetCustomerInfoOperationCompleted == null)) {
                this.GetCustomerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerInfoOperationCompleted);
            }
            this.InvokeAsync("GetCustomerInfo", new object[] {
                        MoNumber}, this.GetCustomerInfoOperationCompleted, userState);
        }
        
        private void OnGetCustomerInfoOperationCompleted(object arg) {
            if ((this.GetCustomerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerInfoCompleted(this, new GetCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetTrackingInfo", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTrackingInfo(string MoNumber) {
            object[] results = this.Invoke("GetTrackingInfo", new object[] {
                        MoNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrackingInfoAsync(string MoNumber) {
            this.GetTrackingInfoAsync(MoNumber, null);
        }
        
        /// <remarks/>
        public void GetTrackingInfoAsync(string MoNumber, object userState) {
            if ((this.GetTrackingInfoOperationCompleted == null)) {
                this.GetTrackingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackingInfoOperationCompleted);
            }
            this.InvokeAsync("GetTrackingInfo", new object[] {
                        MoNumber}, this.GetTrackingInfoOperationCompleted, userState);
        }
        
        private void OnGetTrackingInfoOperationCompleted(object arg) {
            if ((this.GetTrackingInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackingInfoCompleted(this, new GetTrackingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/UpdateLastBoxQty", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateLastBoxQty(string BoxSn, int BoxQty) {
            object[] results = this.Invoke("UpdateLastBoxQty", new object[] {
                        BoxSn,
                        BoxQty});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLastBoxQtyAsync(string BoxSn, int BoxQty) {
            this.UpdateLastBoxQtyAsync(BoxSn, BoxQty, null);
        }
        
        /// <remarks/>
        public void UpdateLastBoxQtyAsync(string BoxSn, int BoxQty, object userState) {
            if ((this.UpdateLastBoxQtyOperationCompleted == null)) {
                this.UpdateLastBoxQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLastBoxQtyOperationCompleted);
            }
            this.InvokeAsync("UpdateLastBoxQty", new object[] {
                        BoxSn,
                        BoxQty}, this.UpdateLastBoxQtyOperationCompleted, userState);
        }
        
        private void OnUpdateLastBoxQtyOperationCompleted(object arg) {
            if ((this.UpdateLastBoxQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLastBoxQtyCompleted(this, new UpdateLastBoxQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/GetLastPrint", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLastPrint(string BoxSn) {
            object[] results = this.Invoke("GetLastPrint", new object[] {
                        BoxSn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastPrintAsync(string BoxSn) {
            this.GetLastPrintAsync(BoxSn, null);
        }
        
        /// <remarks/>
        public void GetLastPrintAsync(string BoxSn, object userState) {
            if ((this.GetLastPrintOperationCompleted == null)) {
                this.GetLastPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastPrintOperationCompleted);
            }
            this.InvokeAsync("GetLastPrint", new object[] {
                        BoxSn}, this.GetLastPrintOperationCompleted, userState);
        }
        
        private void OnGetLastPrintOperationCompleted(object arg) {
            if ((this.GetLastPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastPrintCompleted(this, new GetLastPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.SUNWODA.COM/SaveLastPrint", RequestNamespace="WWW.SUNWODA.COM", ResponseNamespace="WWW.SUNWODA.COM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveLastPrint(string BoxSn, string userCode) {
            object[] results = this.Invoke("SaveLastPrint", new object[] {
                        BoxSn,
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveLastPrintAsync(string BoxSn, string userCode) {
            this.SaveLastPrintAsync(BoxSn, userCode, null);
        }
        
        /// <remarks/>
        public void SaveLastPrintAsync(string BoxSn, string userCode, object userState) {
            if ((this.SaveLastPrintOperationCompleted == null)) {
                this.SaveLastPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLastPrintOperationCompleted);
            }
            this.InvokeAsync("SaveLastPrint", new object[] {
                        BoxSn,
                        userCode}, this.SaveLastPrintOperationCompleted, userState);
        }
        
        private void OnSaveLastPrintOperationCompleted(object arg) {
            if ((this.SaveLastPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLastPrintCompleted(this, new SaveLastPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSoftwareVersionCompletedEventHandler(object sender, GetSoftwareVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoftwareVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoftwareVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSystemTimeCompletedEventHandler(object sender, getSystemTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSystemTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSystemTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckPO_PalletCompletedEventHandler(object sender, CheckPO_PalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPO_PalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPO_PalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void QMS_FQA_ResultCompletedEventHandler(object sender, QMS_FQA_ResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QMS_FQA_ResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QMS_FQA_ResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HR_UserInfoCompletedEventHandler(object sender, HR_UserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HR_UserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HR_UserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BatchInsertDataCompletedEventHandler(object sender, BatchInsertDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchInsertDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchInsertDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckPalletCompletedEventHandler(object sender, CheckPalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviceInformationSZCompletedEventHandler(object sender, DeviceInformationSZCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceInformationSZCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceInformationSZCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductionGroupInfoSZCompletedEventHandler(object sender, ProductionGroupInfoSZCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductionGroupInfoSZCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductionGroupInfoSZCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LoginCheckCompletedEventHandler(object sender, LoginCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviceInformationCompletedEventHandler(object sender, DeviceInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductionGroupInfoCompletedEventHandler(object sender, ProductionGroupInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductionGroupInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductionGroupInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MaterialControlCompletedEventHandler(object sender, MaterialControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaterialControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MaterialControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NegativePressureMessageCompletedEventHandler(object sender, NegativePressureMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NegativePressureMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NegativePressureMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductModelNameCompletedEventHandler(object sender, GetProductModelNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductModelNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductModelNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RelTestDataUploadCompletedEventHandler(object sender, RelTestDataUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RelTestDataUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RelTestDataUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SNbindBatchNumberCompletedEventHandler(object sender, SNbindBatchNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SNbindBatchNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SNbindBatchNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void checkNetStatusCompletedEventHandler(object sender, checkNetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkNetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkNetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductEndDateCompletedEventHandler(object sender, GetProductEndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductEndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductEndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void checkSNUniquenessCompletedEventHandler(object sender, checkSNUniquenessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkSNUniquenessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkSNUniquenessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUseInfoCompletedEventHandler(object sender, getUseInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindingCompletedEventHandler(object sender, BindingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HWInterfaceTest_testCompletedEventHandler(object sender, HWInterfaceTest_testCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HWInterfaceTest_testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HWInterfaceTest_testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSNCompletedEventHandler(object sender, getSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCellsByModuleCompletedEventHandler(object sender, getCellsByModuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCellsByModuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCellsByModuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void uploadDownCellsCompletedEventHandler(object sender, uploadDownCellsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadDownCellsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadDownCellsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void mainFittingLinkCompletedEventHandler(object sender, mainFittingLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class mainFittingLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal mainFittingLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OpenOrColsePalletCompletedEventHandler(object sender, OpenOrColsePalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenOrColsePalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenOrColsePalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OpenOrCloseBoxCompletedEventHandler(object sender, OpenOrCloseBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenOrCloseBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenOrCloseBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckUserCompletedEventHandler(object sender, CheckUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetImagesCompletedEventHandler(object sender, GetImagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetOneImagesCompletedEventHandler(object sender, GetOneImagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOneImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOneImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadImageFtpCompletedEventHandler(object sender, UploadImageFtpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadImageFtpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageFtpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadImageCompletedEventHandler(object sender, UploadImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPurviewInfoCompletedEventHandler(object sender, GetPurviewInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPurviewInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPurviewInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDepartmentInfoCompletedEventHandler(object sender, GetDepartmentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDepartmentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDepartmentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetRoleInfoCompletedEventHandler(object sender, GetRoleInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLoginLogCompletedEventHandler(object sender, GetLoginLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UPLOADTESTDATACompletedEventHandler(object sender, UPLOADTESTDATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPLOADTESTDATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UPLOADTESTDATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UPLOADBAT540TESTDATACompletedEventHandler(object sender, UPLOADBAT540TESTDATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPLOADBAT540TESTDATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UPLOADBAT540TESTDATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWipPackSnCompletedEventHandler(object sender, GetWipPackSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWipPackSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWipPackSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetIfactoryWipPackSnCompletedEventHandler(object sender, GetIfactoryWipPackSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIfactoryWipPackSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIfactoryWipPackSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindCellSNCompletedEventHandler(object sender, BindCellSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindCellSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindCellSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindCellMoreCompletedEventHandler(object sender, BindCellMoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindCellMoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindCellMoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindOneCellCompletedEventHandler(object sender, BindOneCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindOneCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindOneCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindTwoCellCompletedEventHandler(object sender, BindTwoCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindTwoCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindTwoCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindThreeCellCompletedEventHandler(object sender, BindThreeCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindThreeCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindThreeCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindFourCellCompletedEventHandler(object sender, BindFourCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindFourCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindFourCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindPCMPackCompletedEventHandler(object sender, BindPCMPackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindPCMPackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindPCMPackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindPCMCellCompletedEventHandler(object sender, BindPCMCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindPCMCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindPCMCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PCMPackLinkCompletedEventHandler(object sender, PCMPackLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PCMPackLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PCMPackLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PCMPackBurnLinkCompletedEventHandler(object sender, PCMPackBurnLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PCMPackBurnLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PCMPackBurnLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCellSnCompletedEventHandler(object sender, GetCellSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveLogInfoCompletedEventHandler(object sender, SaveLogInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveLogInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveLogInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCellSNCompletedEventHandler(object sender, CheckCellSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCellSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCellSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCellTestDataCompletedEventHandler(object sender, GetCellTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadCellTestDataCompletedEventHandler(object sender, UploadCellTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCellTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCellTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckPCMSNCompletedEventHandler(object sender, CheckPCMSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPCMSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPCMSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindPackPCMCompletedEventHandler(object sender, BindPackPCMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindPackPCMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindPackPCMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void WipCellTestDataCompletedEventHandler(object sender, WipCellTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WipCellTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WipCellTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestDataCompletedEventHandler(object sender, GetTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCellAgvDataCompletedEventHandler(object sender, GetCellAgvDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellAgvDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellAgvDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CellGroupBindCompletedEventHandler(object sender, CellGroupBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CellGroupBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CellGroupBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCellGroupCompletedEventHandler(object sender, GetCellGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCellGroupCompletedEventHandler(object sender, CheckCellGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCellGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCellGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PackLinkCellGroupCompletedEventHandler(object sender, PackLinkCellGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PackLinkCellGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PackLinkCellGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CellBindPackCompletedEventHandler(object sender, CellBindPackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CellBindPackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CellBindPackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCellGroupBindPackCompletedEventHandler(object sender, CheckCellGroupBindPackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCellGroupBindPackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCellGroupBindPackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BatchInsertInfoCompletedEventHandler(object sender, BatchInsertInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchInsertInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchInsertInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckModuleCellBindCompletedEventHandler(object sender, CheckModuleCellBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckModuleCellBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckModuleCellBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckModuleGroupBindCompletedEventHandler(object sender, CheckModuleGroupBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckModuleGroupBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckModuleGroupBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckPACKGroupBindCompletedEventHandler(object sender, CheckPACKGroupBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPACKGroupBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPACKGroupBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ModuleGroupBindCompletedEventHandler(object sender, ModuleGroupBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModuleGroupBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModuleGroupBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PackGroupBindCompletedEventHandler(object sender, PackGroupBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PackGroupBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PackGroupBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ModuleCellBindCompletedEventHandler(object sender, ModuleCellBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModuleCellBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModuleCellBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ExecuteNonQueryCompletedEventHandler(object sender, ExecuteNonQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ExecuteNonQueryConnCompletedEventHandler(object sender, ExecuteNonQueryConnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQueryConnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQueryConnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LargeSmallPanelLinkCompletedEventHandler(object sender, LargeSmallPanelLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LargeSmallPanelLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LargeSmallPanelLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSmallPanelAisleCompletedEventHandler(object sender, GetSmallPanelAisleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSmallPanelAisleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSmallPanelAisleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetItemRuleCompletedEventHandler(object sender, GetItemRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestDateTimeCompletedEventHandler(object sender, GetTestDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckTestResultCompletedEventHandler(object sender, CheckTestResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckTestResOKCompletedEventHandler(object sender, CheckTestResOKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTestResOKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTestResOKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductItemValueCompletedEventHandler(object sender, GetProductItemValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductItemValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductItemValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestOKCompletedEventHandler(object sender, GetTestOKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestOKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestOKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CellGroupLinkCompletedEventHandler(object sender, CellGroupLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CellGroupLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CellGroupLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FittingLinkCheckCompletedEventHandler(object sender, FittingLinkCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FittingLinkCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FittingLinkCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CellGroupLinkCheckCompletedEventHandler(object sender, CellGroupLinkCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CellGroupLinkCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CellGroupLinkCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSupplierDataInfoCompletedEventHandler(object sender, GetSupplierDataInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupplierDataInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupplierDataInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBatteryCellLinkInfoCompletedEventHandler(object sender, GetBatteryCellLinkInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBatteryCellLinkInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBatteryCellLinkInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EBSMoProjectCompletedEventHandler(object sender, EBSMoProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EBSMoProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EBSMoProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EBSMoNumberToMESCompletedEventHandler(object sender, EBSMoNumberToMESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EBSMoNumberToMESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EBSMoNumberToMESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductTOCellSnCompletedEventHandler(object sender, GetProductTOCellSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductTOCellSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductTOCellSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMotoProductTOUIDCompletedEventHandler(object sender, GetMotoProductTOUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMotoProductTOUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMotoProductTOUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetKeyToProductCompletedEventHandler(object sender, GetKeyToProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyToProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyToProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckProductMoNumberCompletedEventHandler(object sender, CheckProductMoNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckProductMoNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckProductMoNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LockProductCompletedEventHandler(object sender, LockProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PCMPackBurnLinkRuleCompletedEventHandler(object sender, PCMPackBurnLinkRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PCMPackBurnLinkRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PCMPackBurnLinkRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCarrierToProductTypeCompletedEventHandler(object sender, GetCarrierToProductTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarrierToProductTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarrierToProductTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductTestDataCompletedEventHandler(object sender, GetProductTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductTestDataListCompletedEventHandler(object sender, GetProductTestDataListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductTestDataListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductTestDataListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCarrierToProductCompletedEventHandler(object sender, GetCarrierToProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarrierToProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarrierToProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindCarrierProductCompletedEventHandler(object sender, BindCarrierProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindCarrierProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindCarrierProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductFittingLinkCompletedEventHandler(object sender, ProductFittingLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductFittingLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductFittingLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetModuleNumberCompletedEventHandler(object sender, GetModuleNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModuleNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModuleNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviecStatusCompletedEventHandler(object sender, DeviecStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviecStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviecStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviceStatusCompletedEventHandler(object sender, DeviceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HWInterfaceTestCompletedEventHandler(object sender, HWInterfaceTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HWInterfaceTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HWInterfaceTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HWInterfaceConversionCompletedEventHandler(object sender, HWInterfaceConversionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HWInterfaceConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HWInterfaceConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckPoNumberCompletedEventHandler(object sender, CheckPoNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPoNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPoNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckAddressCodeCompletedEventHandler(object sender, CheckAddressCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAddressCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAddressCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PoPalletLinkCompletedEventHandler(object sender, PoPalletLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PoPalletLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PoPalletLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MachineFittingLinkCompletedEventHandler(object sender, MachineFittingLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MachineFittingLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MachineFittingLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMacIdCompletedEventHandler(object sender, GetMacIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMacIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMacIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BarcodeConversionCompletedEventHandler(object sender, BarcodeConversionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarcodeConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BarcodeConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductNewSnCompletedEventHandler(object sender, GetProductNewSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductNewSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductNewSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductOldSnCompletedEventHandler(object sender, GetProductOldSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductOldSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductOldSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPrioductDIDInfoCompletedEventHandler(object sender, GetPrioductDIDInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrioductDIDInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrioductDIDInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductThroughStationCompletedEventHandler(object sender, ProductThroughStationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductThroughStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductThroughStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckRouteFirstCompletedEventHandler(object sender, CheckRouteFirstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRouteFirstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRouteFirstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RES {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeleteProductMessageCompletedEventHandler(object sender, DeleteProductMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProductMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProductMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SMTWeldInputCompletedEventHandler(object sender, SMTWeldInputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SMTWeldInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SMTWeldInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MES_KEYPSN_SAVECompletedEventHandler(object sender, MES_KEYPSN_SAVECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MES_KEYPSN_SAVECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MES_KEYPSN_SAVECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MES_PACK_BATTERYLINK_RULECompletedEventHandler(object sender, MES_PACK_BATTERYLINK_RULECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MES_PACK_BATTERYLINK_RULECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MES_PACK_BATTERYLINK_RULECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckRoutePackingCompletedEventHandler(object sender, CheckRoutePackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRoutePackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRoutePackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PackingCheckCellTypeCompletedEventHandler(object sender, PackingCheckCellTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PackingCheckCellTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PackingCheckCellTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BarcodeConversionNEWCompletedEventHandler(object sender, BarcodeConversionNEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarcodeConversionNEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BarcodeConversionNEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EVBModelSortingCompletedEventHandler(object sender, EVBModelSortingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EVBModelSortingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EVBModelSortingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EVBModelReplaceCompletedEventHandler(object sender, EVBModelReplaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EVBModelReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EVBModelReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EVBGetModelInfoCompletedEventHandler(object sender, EVBGetModelInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EVBGetModelInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EVBGetModelInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckItemRuleProductCompletedEventHandler(object sender, CheckItemRuleProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckItemRuleProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckItemRuleProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckItemRuleCompletedEventHandler(object sender, CheckItemRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckItemRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckItemRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ItemAsnWMSToMESCompletedEventHandler(object sender, ItemAsnWMSToMESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ItemAsnWMSToMESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ItemAsnWMSToMESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCycleRecordNumberCompletedEventHandler(object sender, getCycleRecordNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCycleRecordNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCycleRecordNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void cycleLevelsDataCompletedEventHandler(object sender, cycleLevelsDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cycleLevelsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cycleLevelsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void cycleGasGaugeDataCompletedEventHandler(object sender, cycleGasGaugeDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cycleGasGaugeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cycleGasGaugeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void recordLayerDataCompletedEventHandler(object sender, recordLayerDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recordLayerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recordLayerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void cycleDataAllCompletedEventHandler(object sender, cycleDataAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cycleDataAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cycleDataAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckAddressLinkCompletedEventHandler(object sender, CheckAddressLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAddressLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAddressLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetStencilInfoCompletedEventHandler(object sender, GetStencilInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStencilInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStencilInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckAddressAndPalletLinkCompletedEventHandler(object sender, CheckAddressAndPalletLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAddressAndPalletLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAddressAndPalletLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PrintProductUploadCompletedEventHandler(object sender, PrintProductUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintProductUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintProductUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PrintCheckProductCompletedEventHandler(object sender, PrintCheckProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintCheckProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintCheckProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSupplierInfoCompletedEventHandler(object sender, GetSupplierInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupplierInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupplierInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Initialize_UserCompletedEventHandler(object sender, Initialize_UserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize_UserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize_UserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Transfer_PositionCompletedEventHandler(object sender, Transfer_PositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Transfer_PositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Transfer_PositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetOCV_DataCompletedEventHandler(object sender, GetOCV_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOCV_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOCV_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelSNCompletedEventHandler(object sender, DelSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckUserDoCompletedEventHandler(object sender, CheckUserDoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserDoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserDoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BatteryLinkCompletedEventHandler(object sender, BatteryLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatteryLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatteryLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelBatteryLinkCompletedEventHandler(object sender, DelBatteryLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelBatteryLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelBatteryLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBatterySNCompletedEventHandler(object sender, GetBatterySNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBatterySNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBatterySNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBatteriesSNCompletedEventHandler(object sender, GetBatteriesSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBatteriesSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBatteriesSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LargePanelCheckCompletedEventHandler(object sender, LargePanelCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LargePanelCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LargePanelCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PanelLargeToSmallCompletedEventHandler(object sender, PanelLargeToSmallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PanelLargeToSmallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PanelLargeToSmallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AgIngDeBugEventCompletedEventHandler(object sender, AgIngDeBugEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgIngDeBugEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgIngDeBugEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AgIngDeBugDataCompletedEventHandler(object sender, AgIngDeBugDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgIngDeBugDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgIngDeBugDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GroupTestCompletedEventHandler(object sender, GroupTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GroupTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GroupTestCommonCompletedEventHandler(object sender, GroupTestCommonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupTestCommonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GroupTestCommonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckSupplierSNCompletedEventHandler(object sender, CheckSupplierSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSupplierSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSupplierSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void WeldInputCompletedEventHandler(object sender, WeldInputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WeldInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WeldInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AutoSelectInputCompletedEventHandler(object sender, AutoSelectInputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AutoSelectInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AutoSelectInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void WIPTESTSAMPLECompletedEventHandler(object sender, WIPTESTSAMPLECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WIPTESTSAMPLECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WIPTESTSAMPLECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GETSAMPLETESTDATACompletedEventHandler(object sender, GETSAMPLETESTDATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GETSAMPLETESTDATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GETSAMPLETESTDATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GETTESTDATACompletedEventHandler(object sender, GETTESTDATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GETTESTDATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GETTESTDATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void WIPTESTCompletedEventHandler(object sender, WIPTESTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WIPTESTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WIPTESTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void WipTestConversionCompletedEventHandler(object sender, WipTestConversionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WipTestConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WipTestConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OfflineDataUploadCompletedEventHandler(object sender, OfflineDataUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OfflineDataUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OfflineDataUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OfflineDataCompletedEventHandler(object sender, OfflineDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OfflineDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OfflineDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void WeldInputTestCompletedEventHandler(object sender, WeldInputTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WeldInputTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WeldInputTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SPITESTCompletedEventHandler(object sender, SPITESTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPITESTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPITESTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AOITestCompletedEventHandler(object sender, AOITestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AOITestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AOITestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddTestDataCompletedEventHandler(object sender, AddTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OffLineDataNewCompletedEventHandler(object sender, OffLineDataNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OffLineDataNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OffLineDataNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckUserUnlockCompletedEventHandler(object sender, CheckUserUnlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserUnlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserUnlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBurinFilePathSNCompletedEventHandler(object sender, GetBurinFilePathSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBurinFilePathSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBurinFilePathSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBurinFilePathCompletedEventHandler(object sender, GetBurinFilePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBurinFilePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBurinFilePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMoesCompletedEventHandler(object sender, GetMoesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MoExistCompletedEventHandler(object sender, MoExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AutoPasteLabelingCompletedEventHandler(object sender, AutoPasteLabelingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AutoPasteLabelingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AutoPasteLabelingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestItemValuesCompletedEventHandler(object sender, GetTestItemValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestItemValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestItemValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductItemValuesCompletedEventHandler(object sender, GetProductItemValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductItemValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductItemValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMonumberSettingInfoCompletedEventHandler(object sender, GetMonumberSettingInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMonumberSettingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMonumberSettingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductItemLineCompletedEventHandler(object sender, GetProductItemLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductItemLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductItemLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindBatteryProductSnCompletedEventHandler(object sender, BindBatteryProductSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindBatteryProductSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindBatteryProductSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BoxProductSnCompletedEventHandler(object sender, BoxProductSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoxProductSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoxProductSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BoxProductSnesCompletedEventHandler(object sender, BoxProductSnesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoxProductSnesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoxProductSnesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetATLBarcodeCompletedEventHandler(object sender, GetATLBarcodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetATLBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetATLBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DEVICE_INTERFACE_TESTCompletedEventHandler(object sender, DEVICE_INTERFACE_TESTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DEVICE_INTERFACE_TESTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DEVICE_INTERFACE_TESTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetGroupItemCompletedEventHandler(object sender, GetGroupItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductCellItemCompletedEventHandler(object sender, GetProductCellItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductCellItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductCellItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HWInterfaceCompletedEventHandler(object sender, HWInterfaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HWInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HWInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadLongDataCompletedEventHandler(object sender, UploadLongDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadLongDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadLongDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetErrorCodeCompletedEventHandler(object sender, GetErrorCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetErrorCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetErrorCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCUSTOMER_SNCompletedEventHandler(object sender, GetCUSTOMER_SNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCUSTOMER_SNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCUSTOMER_SNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SavePCMDataCompletedEventHandler(object sender, SavePCMDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePCMDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePCMDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPCMDataCompletedEventHandler(object sender, GetPCMDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPCMDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPCMDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveMutureDataCompletedEventHandler(object sender, SaveMutureDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveMutureDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveMutureDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMutureDataCompletedEventHandler(object sender, GetMutureDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMutureDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMutureDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelMutureDataCompletedEventHandler(object sender, DelMutureDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelMutureDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelMutureDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CarrierRecycleCompletedEventHandler(object sender, CarrierRecycleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarrierRecycleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarrierRecycleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BatteryBindingCompletedEventHandler(object sender, BatteryBindingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatteryBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatteryBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckStationCompletedEventHandler(object sender, CheckStationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ReplaceSNCompletedEventHandler(object sender, ReplaceSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindCarrierPackCompletedEventHandler(object sender, BindCarrierPackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindCarrierPackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindCarrierPackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UnbindCarrirPackCompletedEventHandler(object sender, UnbindCarrirPackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnbindCarrirPackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnbindCarrirPackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBindingPackCompletedEventHandler(object sender, GetBindingPackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBindingPackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBindingPackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBindingListCompletedEventHandler(object sender, GetBindingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBindingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBindingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoveAllBindingCompletedEventHandler(object sender, RemoveAllBindingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ImportBatteryCapacityCompletedEventHandler(object sender, ImportBatteryCapacityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportBatteryCapacityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportBatteryCapacityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadOCVCompletedEventHandler(object sender, UploadOCVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadOCVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadOCVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FinishBatCompletedEventHandler(object sender, FinishBatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishBatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishBatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BulidBatteryGroupCompletedEventHandler(object sender, BulidBatteryGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BulidBatteryGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BulidBatteryGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BindPackSNCompletedEventHandler(object sender, BindPackSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindPackSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindPackSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPackSnByCellSnCompletedEventHandler(object sender, GetPackSnByCellSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackSnByCellSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackSnByCellSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelCellSnByPackSnCompletedEventHandler(object sender, DelCellSnByPackSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelCellSnByPackSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelCellSnByPackSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPackSnTestDataCompletedEventHandler(object sender, GetPackSnTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackSnTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackSnTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPackSnItemNameTestDataCompletedEventHandler(object sender, GetPackSnItemNameTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackSnItemNameTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackSnItemNameTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSqlDataCompletedEventHandler(object sender, GetSqlDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSqlDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSqlDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSqlDataConnCompletedEventHandler(object sender, GetSqlDataConnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSqlDataConnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSqlDataConnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelWipInfoCompletedEventHandler(object sender, DelWipInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelWipInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelWipInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckBarcodeRuleCompletedEventHandler(object sender, CheckBarcodeRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBarcodeRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBarcodeRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FittingBindingCompletedEventHandler(object sender, FittingBindingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FittingBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FittingBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckRouteCompletedEventHandler(object sender, CheckRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MacBindCustSnCompletedEventHandler(object sender, MacBindCustSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MacBindCustSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MacBindCustSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MacBindCustSnAndIDCompletedEventHandler(object sender, MacBindCustSnAndIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MacBindCustSnAndIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MacBindCustSnAndIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCustMacBindCompletedEventHandler(object sender, CheckCustMacBindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCustMacBindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCustMacBindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSubKeyListCompletedEventHandler(object sender, GetSubKeyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubKeyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubKeyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreatePalletCompletedEventHandler(object sender, CreatePalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPalletSerialCompletedEventHandler(object sender, GetPalletSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPalletSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPalletSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateBoxCompletedEventHandler(object sender, CreateBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeletePalletCompletedEventHandler(object sender, DeletePalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeleteBoxCompletedEventHandler(object sender, DeleteBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SolutionBoxCompletedEventHandler(object sender, SolutionBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SolutionBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SolutionBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPalletInfoCompletedEventHandler(object sender, GetPalletInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPalletInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPalletInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBoxInfoCompletedEventHandler(object sender, GetBoxInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBoxInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBoxInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProductInfoCompletedEventHandler(object sender, GetProductInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductPackingCompletedEventHandler(object sender, ProductPackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductPackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductPackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCellBingCompletedEventHandler(object sender, CheckCellBingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCellBingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCellBingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMarkingInfoCompletedEventHandler(object sender, GetMarkingInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMarkingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMarkingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveCusInfoCompletedEventHandler(object sender, SaveCusInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveCusInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveCusInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCustomerInfoCompletedEventHandler(object sender, GetCustomerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTrackingInfoCompletedEventHandler(object sender, GetTrackingInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrackingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateLastBoxQtyCompletedEventHandler(object sender, UpdateLastBoxQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLastBoxQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLastBoxQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLastPrintCompletedEventHandler(object sender, GetLastPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveLastPrintCompletedEventHandler(object sender, SaveLastPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveLastPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveLastPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591